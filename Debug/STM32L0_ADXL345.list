
STM32L0_ADXL345.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000354c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  0800360c  0800360c  0001360c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036a8  080036a8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080036a8  080036a8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080036a8  080036a8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036a8  080036a8  000136a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036ac  080036ac  000136ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080036b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000004  080036b4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  080036b4  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005cf4  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001379  00000000  00000000  00025d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000670  00000000  00000000  000270a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005b8  00000000  00000000  00027710  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000f6c7  00000000  00000000  00027cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006013  00000000  00000000  0003738f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005ce34  00000000  00000000  0003d3a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0009a1d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001690  00000000  00000000  0009a254  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080035f4 	.word	0x080035f4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	080035f4 	.word	0x080035f4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_i2f>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	2800      	cmp	r0, #0
 8000224:	d03d      	beq.n	80002a2 <__aeabi_i2f+0x82>
 8000226:	17c3      	asrs	r3, r0, #31
 8000228:	18c5      	adds	r5, r0, r3
 800022a:	405d      	eors	r5, r3
 800022c:	0fc4      	lsrs	r4, r0, #31
 800022e:	0028      	movs	r0, r5
 8000230:	f000 fe8a 	bl	8000f48 <__clzsi2>
 8000234:	229e      	movs	r2, #158	; 0x9e
 8000236:	1a12      	subs	r2, r2, r0
 8000238:	2a96      	cmp	r2, #150	; 0x96
 800023a:	dc07      	bgt.n	800024c <__aeabi_i2f+0x2c>
 800023c:	b2d2      	uxtb	r2, r2
 800023e:	2808      	cmp	r0, #8
 8000240:	dd33      	ble.n	80002aa <__aeabi_i2f+0x8a>
 8000242:	3808      	subs	r0, #8
 8000244:	4085      	lsls	r5, r0
 8000246:	0268      	lsls	r0, r5, #9
 8000248:	0a40      	lsrs	r0, r0, #9
 800024a:	e023      	b.n	8000294 <__aeabi_i2f+0x74>
 800024c:	2a99      	cmp	r2, #153	; 0x99
 800024e:	dd0b      	ble.n	8000268 <__aeabi_i2f+0x48>
 8000250:	2305      	movs	r3, #5
 8000252:	0029      	movs	r1, r5
 8000254:	1a1b      	subs	r3, r3, r0
 8000256:	40d9      	lsrs	r1, r3
 8000258:	0003      	movs	r3, r0
 800025a:	331b      	adds	r3, #27
 800025c:	409d      	lsls	r5, r3
 800025e:	002b      	movs	r3, r5
 8000260:	1e5d      	subs	r5, r3, #1
 8000262:	41ab      	sbcs	r3, r5
 8000264:	4319      	orrs	r1, r3
 8000266:	000d      	movs	r5, r1
 8000268:	2805      	cmp	r0, #5
 800026a:	dd01      	ble.n	8000270 <__aeabi_i2f+0x50>
 800026c:	1f43      	subs	r3, r0, #5
 800026e:	409d      	lsls	r5, r3
 8000270:	002b      	movs	r3, r5
 8000272:	490f      	ldr	r1, [pc, #60]	; (80002b0 <__aeabi_i2f+0x90>)
 8000274:	400b      	ands	r3, r1
 8000276:	076e      	lsls	r6, r5, #29
 8000278:	d009      	beq.n	800028e <__aeabi_i2f+0x6e>
 800027a:	260f      	movs	r6, #15
 800027c:	4035      	ands	r5, r6
 800027e:	2d04      	cmp	r5, #4
 8000280:	d005      	beq.n	800028e <__aeabi_i2f+0x6e>
 8000282:	3304      	adds	r3, #4
 8000284:	015d      	lsls	r5, r3, #5
 8000286:	d502      	bpl.n	800028e <__aeabi_i2f+0x6e>
 8000288:	229f      	movs	r2, #159	; 0x9f
 800028a:	400b      	ands	r3, r1
 800028c:	1a12      	subs	r2, r2, r0
 800028e:	019b      	lsls	r3, r3, #6
 8000290:	0a58      	lsrs	r0, r3, #9
 8000292:	b2d2      	uxtb	r2, r2
 8000294:	0240      	lsls	r0, r0, #9
 8000296:	05d2      	lsls	r2, r2, #23
 8000298:	0a40      	lsrs	r0, r0, #9
 800029a:	07e4      	lsls	r4, r4, #31
 800029c:	4310      	orrs	r0, r2
 800029e:	4320      	orrs	r0, r4
 80002a0:	bd70      	pop	{r4, r5, r6, pc}
 80002a2:	2400      	movs	r4, #0
 80002a4:	2200      	movs	r2, #0
 80002a6:	2000      	movs	r0, #0
 80002a8:	e7f4      	b.n	8000294 <__aeabi_i2f+0x74>
 80002aa:	0268      	lsls	r0, r5, #9
 80002ac:	0a40      	lsrs	r0, r0, #9
 80002ae:	e7f1      	b.n	8000294 <__aeabi_i2f+0x74>
 80002b0:	fbffffff 	.word	0xfbffffff

080002b4 <__aeabi_ddiv>:
 80002b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b6:	4657      	mov	r7, sl
 80002b8:	46de      	mov	lr, fp
 80002ba:	464e      	mov	r6, r9
 80002bc:	4645      	mov	r5, r8
 80002be:	b5e0      	push	{r5, r6, r7, lr}
 80002c0:	4683      	mov	fp, r0
 80002c2:	0007      	movs	r7, r0
 80002c4:	030e      	lsls	r6, r1, #12
 80002c6:	0048      	lsls	r0, r1, #1
 80002c8:	b085      	sub	sp, #20
 80002ca:	4692      	mov	sl, r2
 80002cc:	001c      	movs	r4, r3
 80002ce:	0b36      	lsrs	r6, r6, #12
 80002d0:	0d40      	lsrs	r0, r0, #21
 80002d2:	0fcd      	lsrs	r5, r1, #31
 80002d4:	2800      	cmp	r0, #0
 80002d6:	d100      	bne.n	80002da <__aeabi_ddiv+0x26>
 80002d8:	e09d      	b.n	8000416 <__aeabi_ddiv+0x162>
 80002da:	4b95      	ldr	r3, [pc, #596]	; (8000530 <__aeabi_ddiv+0x27c>)
 80002dc:	4298      	cmp	r0, r3
 80002de:	d039      	beq.n	8000354 <__aeabi_ddiv+0xa0>
 80002e0:	2380      	movs	r3, #128	; 0x80
 80002e2:	00f6      	lsls	r6, r6, #3
 80002e4:	041b      	lsls	r3, r3, #16
 80002e6:	431e      	orrs	r6, r3
 80002e8:	4a92      	ldr	r2, [pc, #584]	; (8000534 <__aeabi_ddiv+0x280>)
 80002ea:	0f7b      	lsrs	r3, r7, #29
 80002ec:	4333      	orrs	r3, r6
 80002ee:	4699      	mov	r9, r3
 80002f0:	4694      	mov	ip, r2
 80002f2:	0003      	movs	r3, r0
 80002f4:	4463      	add	r3, ip
 80002f6:	9300      	str	r3, [sp, #0]
 80002f8:	2300      	movs	r3, #0
 80002fa:	2600      	movs	r6, #0
 80002fc:	00ff      	lsls	r7, r7, #3
 80002fe:	9302      	str	r3, [sp, #8]
 8000300:	0323      	lsls	r3, r4, #12
 8000302:	0b1b      	lsrs	r3, r3, #12
 8000304:	4698      	mov	r8, r3
 8000306:	0063      	lsls	r3, r4, #1
 8000308:	0fe4      	lsrs	r4, r4, #31
 800030a:	4652      	mov	r2, sl
 800030c:	0d5b      	lsrs	r3, r3, #21
 800030e:	9401      	str	r4, [sp, #4]
 8000310:	d100      	bne.n	8000314 <__aeabi_ddiv+0x60>
 8000312:	e0b3      	b.n	800047c <__aeabi_ddiv+0x1c8>
 8000314:	4986      	ldr	r1, [pc, #536]	; (8000530 <__aeabi_ddiv+0x27c>)
 8000316:	428b      	cmp	r3, r1
 8000318:	d100      	bne.n	800031c <__aeabi_ddiv+0x68>
 800031a:	e09e      	b.n	800045a <__aeabi_ddiv+0x1a6>
 800031c:	4642      	mov	r2, r8
 800031e:	00d1      	lsls	r1, r2, #3
 8000320:	2280      	movs	r2, #128	; 0x80
 8000322:	0412      	lsls	r2, r2, #16
 8000324:	430a      	orrs	r2, r1
 8000326:	4651      	mov	r1, sl
 8000328:	0f49      	lsrs	r1, r1, #29
 800032a:	4311      	orrs	r1, r2
 800032c:	468b      	mov	fp, r1
 800032e:	4981      	ldr	r1, [pc, #516]	; (8000534 <__aeabi_ddiv+0x280>)
 8000330:	4652      	mov	r2, sl
 8000332:	468c      	mov	ip, r1
 8000334:	9900      	ldr	r1, [sp, #0]
 8000336:	4463      	add	r3, ip
 8000338:	1acb      	subs	r3, r1, r3
 800033a:	2100      	movs	r1, #0
 800033c:	00d2      	lsls	r2, r2, #3
 800033e:	9300      	str	r3, [sp, #0]
 8000340:	002b      	movs	r3, r5
 8000342:	4063      	eors	r3, r4
 8000344:	469a      	mov	sl, r3
 8000346:	2e0f      	cmp	r6, #15
 8000348:	d900      	bls.n	800034c <__aeabi_ddiv+0x98>
 800034a:	e105      	b.n	8000558 <__aeabi_ddiv+0x2a4>
 800034c:	4b7a      	ldr	r3, [pc, #488]	; (8000538 <__aeabi_ddiv+0x284>)
 800034e:	00b6      	lsls	r6, r6, #2
 8000350:	599b      	ldr	r3, [r3, r6]
 8000352:	469f      	mov	pc, r3
 8000354:	465b      	mov	r3, fp
 8000356:	4333      	orrs	r3, r6
 8000358:	4699      	mov	r9, r3
 800035a:	d000      	beq.n	800035e <__aeabi_ddiv+0xaa>
 800035c:	e0b8      	b.n	80004d0 <__aeabi_ddiv+0x21c>
 800035e:	2302      	movs	r3, #2
 8000360:	2608      	movs	r6, #8
 8000362:	2700      	movs	r7, #0
 8000364:	9000      	str	r0, [sp, #0]
 8000366:	9302      	str	r3, [sp, #8]
 8000368:	e7ca      	b.n	8000300 <__aeabi_ddiv+0x4c>
 800036a:	46cb      	mov	fp, r9
 800036c:	003a      	movs	r2, r7
 800036e:	9902      	ldr	r1, [sp, #8]
 8000370:	9501      	str	r5, [sp, #4]
 8000372:	9b01      	ldr	r3, [sp, #4]
 8000374:	469a      	mov	sl, r3
 8000376:	2902      	cmp	r1, #2
 8000378:	d027      	beq.n	80003ca <__aeabi_ddiv+0x116>
 800037a:	2903      	cmp	r1, #3
 800037c:	d100      	bne.n	8000380 <__aeabi_ddiv+0xcc>
 800037e:	e280      	b.n	8000882 <__aeabi_ddiv+0x5ce>
 8000380:	2901      	cmp	r1, #1
 8000382:	d044      	beq.n	800040e <__aeabi_ddiv+0x15a>
 8000384:	496d      	ldr	r1, [pc, #436]	; (800053c <__aeabi_ddiv+0x288>)
 8000386:	9b00      	ldr	r3, [sp, #0]
 8000388:	468c      	mov	ip, r1
 800038a:	4463      	add	r3, ip
 800038c:	001c      	movs	r4, r3
 800038e:	2c00      	cmp	r4, #0
 8000390:	dd38      	ble.n	8000404 <__aeabi_ddiv+0x150>
 8000392:	0753      	lsls	r3, r2, #29
 8000394:	d000      	beq.n	8000398 <__aeabi_ddiv+0xe4>
 8000396:	e213      	b.n	80007c0 <__aeabi_ddiv+0x50c>
 8000398:	08d2      	lsrs	r2, r2, #3
 800039a:	465b      	mov	r3, fp
 800039c:	01db      	lsls	r3, r3, #7
 800039e:	d509      	bpl.n	80003b4 <__aeabi_ddiv+0x100>
 80003a0:	4659      	mov	r1, fp
 80003a2:	4b67      	ldr	r3, [pc, #412]	; (8000540 <__aeabi_ddiv+0x28c>)
 80003a4:	4019      	ands	r1, r3
 80003a6:	468b      	mov	fp, r1
 80003a8:	2180      	movs	r1, #128	; 0x80
 80003aa:	00c9      	lsls	r1, r1, #3
 80003ac:	468c      	mov	ip, r1
 80003ae:	9b00      	ldr	r3, [sp, #0]
 80003b0:	4463      	add	r3, ip
 80003b2:	001c      	movs	r4, r3
 80003b4:	4b63      	ldr	r3, [pc, #396]	; (8000544 <__aeabi_ddiv+0x290>)
 80003b6:	429c      	cmp	r4, r3
 80003b8:	dc07      	bgt.n	80003ca <__aeabi_ddiv+0x116>
 80003ba:	465b      	mov	r3, fp
 80003bc:	0564      	lsls	r4, r4, #21
 80003be:	075f      	lsls	r7, r3, #29
 80003c0:	025b      	lsls	r3, r3, #9
 80003c2:	4317      	orrs	r7, r2
 80003c4:	0b1b      	lsrs	r3, r3, #12
 80003c6:	0d62      	lsrs	r2, r4, #21
 80003c8:	e002      	b.n	80003d0 <__aeabi_ddiv+0x11c>
 80003ca:	2300      	movs	r3, #0
 80003cc:	2700      	movs	r7, #0
 80003ce:	4a58      	ldr	r2, [pc, #352]	; (8000530 <__aeabi_ddiv+0x27c>)
 80003d0:	2100      	movs	r1, #0
 80003d2:	031b      	lsls	r3, r3, #12
 80003d4:	0b1c      	lsrs	r4, r3, #12
 80003d6:	0d0b      	lsrs	r3, r1, #20
 80003d8:	051b      	lsls	r3, r3, #20
 80003da:	4323      	orrs	r3, r4
 80003dc:	0514      	lsls	r4, r2, #20
 80003de:	4a5a      	ldr	r2, [pc, #360]	; (8000548 <__aeabi_ddiv+0x294>)
 80003e0:	0038      	movs	r0, r7
 80003e2:	4013      	ands	r3, r2
 80003e4:	431c      	orrs	r4, r3
 80003e6:	4653      	mov	r3, sl
 80003e8:	0064      	lsls	r4, r4, #1
 80003ea:	07db      	lsls	r3, r3, #31
 80003ec:	0864      	lsrs	r4, r4, #1
 80003ee:	431c      	orrs	r4, r3
 80003f0:	0021      	movs	r1, r4
 80003f2:	b005      	add	sp, #20
 80003f4:	bc3c      	pop	{r2, r3, r4, r5}
 80003f6:	4690      	mov	r8, r2
 80003f8:	4699      	mov	r9, r3
 80003fa:	46a2      	mov	sl, r4
 80003fc:	46ab      	mov	fp, r5
 80003fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000400:	2201      	movs	r2, #1
 8000402:	4252      	negs	r2, r2
 8000404:	2301      	movs	r3, #1
 8000406:	1b1b      	subs	r3, r3, r4
 8000408:	2b38      	cmp	r3, #56	; 0x38
 800040a:	dc00      	bgt.n	800040e <__aeabi_ddiv+0x15a>
 800040c:	e1ad      	b.n	800076a <__aeabi_ddiv+0x4b6>
 800040e:	2200      	movs	r2, #0
 8000410:	2300      	movs	r3, #0
 8000412:	2700      	movs	r7, #0
 8000414:	e7dc      	b.n	80003d0 <__aeabi_ddiv+0x11c>
 8000416:	465b      	mov	r3, fp
 8000418:	4333      	orrs	r3, r6
 800041a:	4699      	mov	r9, r3
 800041c:	d05e      	beq.n	80004dc <__aeabi_ddiv+0x228>
 800041e:	2e00      	cmp	r6, #0
 8000420:	d100      	bne.n	8000424 <__aeabi_ddiv+0x170>
 8000422:	e18a      	b.n	800073a <__aeabi_ddiv+0x486>
 8000424:	0030      	movs	r0, r6
 8000426:	f000 fd8f 	bl	8000f48 <__clzsi2>
 800042a:	0003      	movs	r3, r0
 800042c:	3b0b      	subs	r3, #11
 800042e:	2b1c      	cmp	r3, #28
 8000430:	dd00      	ble.n	8000434 <__aeabi_ddiv+0x180>
 8000432:	e17b      	b.n	800072c <__aeabi_ddiv+0x478>
 8000434:	221d      	movs	r2, #29
 8000436:	1ad3      	subs	r3, r2, r3
 8000438:	465a      	mov	r2, fp
 800043a:	0001      	movs	r1, r0
 800043c:	40da      	lsrs	r2, r3
 800043e:	3908      	subs	r1, #8
 8000440:	408e      	lsls	r6, r1
 8000442:	0013      	movs	r3, r2
 8000444:	465f      	mov	r7, fp
 8000446:	4333      	orrs	r3, r6
 8000448:	4699      	mov	r9, r3
 800044a:	408f      	lsls	r7, r1
 800044c:	4b3f      	ldr	r3, [pc, #252]	; (800054c <__aeabi_ddiv+0x298>)
 800044e:	2600      	movs	r6, #0
 8000450:	1a1b      	subs	r3, r3, r0
 8000452:	9300      	str	r3, [sp, #0]
 8000454:	2300      	movs	r3, #0
 8000456:	9302      	str	r3, [sp, #8]
 8000458:	e752      	b.n	8000300 <__aeabi_ddiv+0x4c>
 800045a:	4641      	mov	r1, r8
 800045c:	4653      	mov	r3, sl
 800045e:	430b      	orrs	r3, r1
 8000460:	493b      	ldr	r1, [pc, #236]	; (8000550 <__aeabi_ddiv+0x29c>)
 8000462:	469b      	mov	fp, r3
 8000464:	468c      	mov	ip, r1
 8000466:	9b00      	ldr	r3, [sp, #0]
 8000468:	4463      	add	r3, ip
 800046a:	9300      	str	r3, [sp, #0]
 800046c:	465b      	mov	r3, fp
 800046e:	2b00      	cmp	r3, #0
 8000470:	d13b      	bne.n	80004ea <__aeabi_ddiv+0x236>
 8000472:	2302      	movs	r3, #2
 8000474:	2200      	movs	r2, #0
 8000476:	431e      	orrs	r6, r3
 8000478:	2102      	movs	r1, #2
 800047a:	e761      	b.n	8000340 <__aeabi_ddiv+0x8c>
 800047c:	4643      	mov	r3, r8
 800047e:	4313      	orrs	r3, r2
 8000480:	469b      	mov	fp, r3
 8000482:	d037      	beq.n	80004f4 <__aeabi_ddiv+0x240>
 8000484:	4643      	mov	r3, r8
 8000486:	2b00      	cmp	r3, #0
 8000488:	d100      	bne.n	800048c <__aeabi_ddiv+0x1d8>
 800048a:	e162      	b.n	8000752 <__aeabi_ddiv+0x49e>
 800048c:	4640      	mov	r0, r8
 800048e:	f000 fd5b 	bl	8000f48 <__clzsi2>
 8000492:	0003      	movs	r3, r0
 8000494:	3b0b      	subs	r3, #11
 8000496:	2b1c      	cmp	r3, #28
 8000498:	dd00      	ble.n	800049c <__aeabi_ddiv+0x1e8>
 800049a:	e153      	b.n	8000744 <__aeabi_ddiv+0x490>
 800049c:	0002      	movs	r2, r0
 800049e:	4641      	mov	r1, r8
 80004a0:	3a08      	subs	r2, #8
 80004a2:	4091      	lsls	r1, r2
 80004a4:	4688      	mov	r8, r1
 80004a6:	211d      	movs	r1, #29
 80004a8:	1acb      	subs	r3, r1, r3
 80004aa:	4651      	mov	r1, sl
 80004ac:	40d9      	lsrs	r1, r3
 80004ae:	000b      	movs	r3, r1
 80004b0:	4641      	mov	r1, r8
 80004b2:	430b      	orrs	r3, r1
 80004b4:	469b      	mov	fp, r3
 80004b6:	4653      	mov	r3, sl
 80004b8:	4093      	lsls	r3, r2
 80004ba:	001a      	movs	r2, r3
 80004bc:	9b00      	ldr	r3, [sp, #0]
 80004be:	4925      	ldr	r1, [pc, #148]	; (8000554 <__aeabi_ddiv+0x2a0>)
 80004c0:	469c      	mov	ip, r3
 80004c2:	4460      	add	r0, ip
 80004c4:	0003      	movs	r3, r0
 80004c6:	468c      	mov	ip, r1
 80004c8:	4463      	add	r3, ip
 80004ca:	9300      	str	r3, [sp, #0]
 80004cc:	2100      	movs	r1, #0
 80004ce:	e737      	b.n	8000340 <__aeabi_ddiv+0x8c>
 80004d0:	2303      	movs	r3, #3
 80004d2:	46b1      	mov	r9, r6
 80004d4:	9000      	str	r0, [sp, #0]
 80004d6:	260c      	movs	r6, #12
 80004d8:	9302      	str	r3, [sp, #8]
 80004da:	e711      	b.n	8000300 <__aeabi_ddiv+0x4c>
 80004dc:	2300      	movs	r3, #0
 80004de:	9300      	str	r3, [sp, #0]
 80004e0:	3301      	adds	r3, #1
 80004e2:	2604      	movs	r6, #4
 80004e4:	2700      	movs	r7, #0
 80004e6:	9302      	str	r3, [sp, #8]
 80004e8:	e70a      	b.n	8000300 <__aeabi_ddiv+0x4c>
 80004ea:	2303      	movs	r3, #3
 80004ec:	46c3      	mov	fp, r8
 80004ee:	431e      	orrs	r6, r3
 80004f0:	2103      	movs	r1, #3
 80004f2:	e725      	b.n	8000340 <__aeabi_ddiv+0x8c>
 80004f4:	3301      	adds	r3, #1
 80004f6:	431e      	orrs	r6, r3
 80004f8:	2200      	movs	r2, #0
 80004fa:	2101      	movs	r1, #1
 80004fc:	e720      	b.n	8000340 <__aeabi_ddiv+0x8c>
 80004fe:	2300      	movs	r3, #0
 8000500:	469a      	mov	sl, r3
 8000502:	2380      	movs	r3, #128	; 0x80
 8000504:	2700      	movs	r7, #0
 8000506:	031b      	lsls	r3, r3, #12
 8000508:	4a09      	ldr	r2, [pc, #36]	; (8000530 <__aeabi_ddiv+0x27c>)
 800050a:	e761      	b.n	80003d0 <__aeabi_ddiv+0x11c>
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	4649      	mov	r1, r9
 8000510:	031b      	lsls	r3, r3, #12
 8000512:	4219      	tst	r1, r3
 8000514:	d100      	bne.n	8000518 <__aeabi_ddiv+0x264>
 8000516:	e0e2      	b.n	80006de <__aeabi_ddiv+0x42a>
 8000518:	4659      	mov	r1, fp
 800051a:	4219      	tst	r1, r3
 800051c:	d000      	beq.n	8000520 <__aeabi_ddiv+0x26c>
 800051e:	e0de      	b.n	80006de <__aeabi_ddiv+0x42a>
 8000520:	430b      	orrs	r3, r1
 8000522:	031b      	lsls	r3, r3, #12
 8000524:	0017      	movs	r7, r2
 8000526:	0b1b      	lsrs	r3, r3, #12
 8000528:	46a2      	mov	sl, r4
 800052a:	4a01      	ldr	r2, [pc, #4]	; (8000530 <__aeabi_ddiv+0x27c>)
 800052c:	e750      	b.n	80003d0 <__aeabi_ddiv+0x11c>
 800052e:	46c0      	nop			; (mov r8, r8)
 8000530:	000007ff 	.word	0x000007ff
 8000534:	fffffc01 	.word	0xfffffc01
 8000538:	0800360c 	.word	0x0800360c
 800053c:	000003ff 	.word	0x000003ff
 8000540:	feffffff 	.word	0xfeffffff
 8000544:	000007fe 	.word	0x000007fe
 8000548:	800fffff 	.word	0x800fffff
 800054c:	fffffc0d 	.word	0xfffffc0d
 8000550:	fffff801 	.word	0xfffff801
 8000554:	000003f3 	.word	0x000003f3
 8000558:	45d9      	cmp	r9, fp
 800055a:	d900      	bls.n	800055e <__aeabi_ddiv+0x2aa>
 800055c:	e0cb      	b.n	80006f6 <__aeabi_ddiv+0x442>
 800055e:	d100      	bne.n	8000562 <__aeabi_ddiv+0x2ae>
 8000560:	e0c6      	b.n	80006f0 <__aeabi_ddiv+0x43c>
 8000562:	003c      	movs	r4, r7
 8000564:	4648      	mov	r0, r9
 8000566:	2700      	movs	r7, #0
 8000568:	9b00      	ldr	r3, [sp, #0]
 800056a:	3b01      	subs	r3, #1
 800056c:	9300      	str	r3, [sp, #0]
 800056e:	465b      	mov	r3, fp
 8000570:	0e16      	lsrs	r6, r2, #24
 8000572:	021b      	lsls	r3, r3, #8
 8000574:	431e      	orrs	r6, r3
 8000576:	0213      	lsls	r3, r2, #8
 8000578:	4698      	mov	r8, r3
 800057a:	0433      	lsls	r3, r6, #16
 800057c:	0c1b      	lsrs	r3, r3, #16
 800057e:	4699      	mov	r9, r3
 8000580:	0c31      	lsrs	r1, r6, #16
 8000582:	9101      	str	r1, [sp, #4]
 8000584:	f7ff fe46 	bl	8000214 <__aeabi_uidivmod>
 8000588:	464a      	mov	r2, r9
 800058a:	4342      	muls	r2, r0
 800058c:	040b      	lsls	r3, r1, #16
 800058e:	0c21      	lsrs	r1, r4, #16
 8000590:	0005      	movs	r5, r0
 8000592:	4319      	orrs	r1, r3
 8000594:	428a      	cmp	r2, r1
 8000596:	d907      	bls.n	80005a8 <__aeabi_ddiv+0x2f4>
 8000598:	1989      	adds	r1, r1, r6
 800059a:	3d01      	subs	r5, #1
 800059c:	428e      	cmp	r6, r1
 800059e:	d803      	bhi.n	80005a8 <__aeabi_ddiv+0x2f4>
 80005a0:	428a      	cmp	r2, r1
 80005a2:	d901      	bls.n	80005a8 <__aeabi_ddiv+0x2f4>
 80005a4:	1e85      	subs	r5, r0, #2
 80005a6:	1989      	adds	r1, r1, r6
 80005a8:	1a88      	subs	r0, r1, r2
 80005aa:	9901      	ldr	r1, [sp, #4]
 80005ac:	f7ff fe32 	bl	8000214 <__aeabi_uidivmod>
 80005b0:	0409      	lsls	r1, r1, #16
 80005b2:	468c      	mov	ip, r1
 80005b4:	464a      	mov	r2, r9
 80005b6:	0421      	lsls	r1, r4, #16
 80005b8:	4664      	mov	r4, ip
 80005ba:	4342      	muls	r2, r0
 80005bc:	0c09      	lsrs	r1, r1, #16
 80005be:	0003      	movs	r3, r0
 80005c0:	4321      	orrs	r1, r4
 80005c2:	428a      	cmp	r2, r1
 80005c4:	d904      	bls.n	80005d0 <__aeabi_ddiv+0x31c>
 80005c6:	1989      	adds	r1, r1, r6
 80005c8:	3b01      	subs	r3, #1
 80005ca:	428e      	cmp	r6, r1
 80005cc:	d800      	bhi.n	80005d0 <__aeabi_ddiv+0x31c>
 80005ce:	e0f1      	b.n	80007b4 <__aeabi_ddiv+0x500>
 80005d0:	042d      	lsls	r5, r5, #16
 80005d2:	431d      	orrs	r5, r3
 80005d4:	46ab      	mov	fp, r5
 80005d6:	4643      	mov	r3, r8
 80005d8:	1a89      	subs	r1, r1, r2
 80005da:	4642      	mov	r2, r8
 80005dc:	0c28      	lsrs	r0, r5, #16
 80005de:	0412      	lsls	r2, r2, #16
 80005e0:	0c1d      	lsrs	r5, r3, #16
 80005e2:	465b      	mov	r3, fp
 80005e4:	0c14      	lsrs	r4, r2, #16
 80005e6:	0022      	movs	r2, r4
 80005e8:	041b      	lsls	r3, r3, #16
 80005ea:	0c1b      	lsrs	r3, r3, #16
 80005ec:	435a      	muls	r2, r3
 80005ee:	9403      	str	r4, [sp, #12]
 80005f0:	436b      	muls	r3, r5
 80005f2:	4344      	muls	r4, r0
 80005f4:	9502      	str	r5, [sp, #8]
 80005f6:	4368      	muls	r0, r5
 80005f8:	191b      	adds	r3, r3, r4
 80005fa:	0c15      	lsrs	r5, r2, #16
 80005fc:	18eb      	adds	r3, r5, r3
 80005fe:	429c      	cmp	r4, r3
 8000600:	d903      	bls.n	800060a <__aeabi_ddiv+0x356>
 8000602:	2480      	movs	r4, #128	; 0x80
 8000604:	0264      	lsls	r4, r4, #9
 8000606:	46a4      	mov	ip, r4
 8000608:	4460      	add	r0, ip
 800060a:	0c1c      	lsrs	r4, r3, #16
 800060c:	0415      	lsls	r5, r2, #16
 800060e:	041b      	lsls	r3, r3, #16
 8000610:	0c2d      	lsrs	r5, r5, #16
 8000612:	1820      	adds	r0, r4, r0
 8000614:	195d      	adds	r5, r3, r5
 8000616:	4281      	cmp	r1, r0
 8000618:	d377      	bcc.n	800070a <__aeabi_ddiv+0x456>
 800061a:	d073      	beq.n	8000704 <__aeabi_ddiv+0x450>
 800061c:	1a0c      	subs	r4, r1, r0
 800061e:	4aa2      	ldr	r2, [pc, #648]	; (80008a8 <__aeabi_ddiv+0x5f4>)
 8000620:	1b7d      	subs	r5, r7, r5
 8000622:	42af      	cmp	r7, r5
 8000624:	41bf      	sbcs	r7, r7
 8000626:	4694      	mov	ip, r2
 8000628:	9b00      	ldr	r3, [sp, #0]
 800062a:	427f      	negs	r7, r7
 800062c:	4463      	add	r3, ip
 800062e:	1be0      	subs	r0, r4, r7
 8000630:	001c      	movs	r4, r3
 8000632:	4286      	cmp	r6, r0
 8000634:	d100      	bne.n	8000638 <__aeabi_ddiv+0x384>
 8000636:	e0db      	b.n	80007f0 <__aeabi_ddiv+0x53c>
 8000638:	9901      	ldr	r1, [sp, #4]
 800063a:	f7ff fdeb 	bl	8000214 <__aeabi_uidivmod>
 800063e:	464a      	mov	r2, r9
 8000640:	4342      	muls	r2, r0
 8000642:	040b      	lsls	r3, r1, #16
 8000644:	0c29      	lsrs	r1, r5, #16
 8000646:	0007      	movs	r7, r0
 8000648:	4319      	orrs	r1, r3
 800064a:	428a      	cmp	r2, r1
 800064c:	d907      	bls.n	800065e <__aeabi_ddiv+0x3aa>
 800064e:	1989      	adds	r1, r1, r6
 8000650:	3f01      	subs	r7, #1
 8000652:	428e      	cmp	r6, r1
 8000654:	d803      	bhi.n	800065e <__aeabi_ddiv+0x3aa>
 8000656:	428a      	cmp	r2, r1
 8000658:	d901      	bls.n	800065e <__aeabi_ddiv+0x3aa>
 800065a:	1e87      	subs	r7, r0, #2
 800065c:	1989      	adds	r1, r1, r6
 800065e:	1a88      	subs	r0, r1, r2
 8000660:	9901      	ldr	r1, [sp, #4]
 8000662:	f7ff fdd7 	bl	8000214 <__aeabi_uidivmod>
 8000666:	0409      	lsls	r1, r1, #16
 8000668:	464a      	mov	r2, r9
 800066a:	4689      	mov	r9, r1
 800066c:	0429      	lsls	r1, r5, #16
 800066e:	464d      	mov	r5, r9
 8000670:	4342      	muls	r2, r0
 8000672:	0c09      	lsrs	r1, r1, #16
 8000674:	0003      	movs	r3, r0
 8000676:	4329      	orrs	r1, r5
 8000678:	428a      	cmp	r2, r1
 800067a:	d907      	bls.n	800068c <__aeabi_ddiv+0x3d8>
 800067c:	1989      	adds	r1, r1, r6
 800067e:	3b01      	subs	r3, #1
 8000680:	428e      	cmp	r6, r1
 8000682:	d803      	bhi.n	800068c <__aeabi_ddiv+0x3d8>
 8000684:	428a      	cmp	r2, r1
 8000686:	d901      	bls.n	800068c <__aeabi_ddiv+0x3d8>
 8000688:	1e83      	subs	r3, r0, #2
 800068a:	1989      	adds	r1, r1, r6
 800068c:	043f      	lsls	r7, r7, #16
 800068e:	1a89      	subs	r1, r1, r2
 8000690:	003a      	movs	r2, r7
 8000692:	9f03      	ldr	r7, [sp, #12]
 8000694:	431a      	orrs	r2, r3
 8000696:	0038      	movs	r0, r7
 8000698:	0413      	lsls	r3, r2, #16
 800069a:	0c1b      	lsrs	r3, r3, #16
 800069c:	4358      	muls	r0, r3
 800069e:	4681      	mov	r9, r0
 80006a0:	9802      	ldr	r0, [sp, #8]
 80006a2:	0c15      	lsrs	r5, r2, #16
 80006a4:	436f      	muls	r7, r5
 80006a6:	4343      	muls	r3, r0
 80006a8:	4345      	muls	r5, r0
 80006aa:	4648      	mov	r0, r9
 80006ac:	0c00      	lsrs	r0, r0, #16
 80006ae:	4684      	mov	ip, r0
 80006b0:	19db      	adds	r3, r3, r7
 80006b2:	4463      	add	r3, ip
 80006b4:	429f      	cmp	r7, r3
 80006b6:	d903      	bls.n	80006c0 <__aeabi_ddiv+0x40c>
 80006b8:	2080      	movs	r0, #128	; 0x80
 80006ba:	0240      	lsls	r0, r0, #9
 80006bc:	4684      	mov	ip, r0
 80006be:	4465      	add	r5, ip
 80006c0:	4648      	mov	r0, r9
 80006c2:	0c1f      	lsrs	r7, r3, #16
 80006c4:	0400      	lsls	r0, r0, #16
 80006c6:	041b      	lsls	r3, r3, #16
 80006c8:	0c00      	lsrs	r0, r0, #16
 80006ca:	197d      	adds	r5, r7, r5
 80006cc:	1818      	adds	r0, r3, r0
 80006ce:	42a9      	cmp	r1, r5
 80006d0:	d200      	bcs.n	80006d4 <__aeabi_ddiv+0x420>
 80006d2:	e084      	b.n	80007de <__aeabi_ddiv+0x52a>
 80006d4:	d100      	bne.n	80006d8 <__aeabi_ddiv+0x424>
 80006d6:	e07f      	b.n	80007d8 <__aeabi_ddiv+0x524>
 80006d8:	2301      	movs	r3, #1
 80006da:	431a      	orrs	r2, r3
 80006dc:	e657      	b.n	800038e <__aeabi_ddiv+0xda>
 80006de:	2380      	movs	r3, #128	; 0x80
 80006e0:	464a      	mov	r2, r9
 80006e2:	031b      	lsls	r3, r3, #12
 80006e4:	4313      	orrs	r3, r2
 80006e6:	031b      	lsls	r3, r3, #12
 80006e8:	0b1b      	lsrs	r3, r3, #12
 80006ea:	46aa      	mov	sl, r5
 80006ec:	4a6f      	ldr	r2, [pc, #444]	; (80008ac <__aeabi_ddiv+0x5f8>)
 80006ee:	e66f      	b.n	80003d0 <__aeabi_ddiv+0x11c>
 80006f0:	42ba      	cmp	r2, r7
 80006f2:	d900      	bls.n	80006f6 <__aeabi_ddiv+0x442>
 80006f4:	e735      	b.n	8000562 <__aeabi_ddiv+0x2ae>
 80006f6:	464b      	mov	r3, r9
 80006f8:	07dc      	lsls	r4, r3, #31
 80006fa:	0858      	lsrs	r0, r3, #1
 80006fc:	087b      	lsrs	r3, r7, #1
 80006fe:	431c      	orrs	r4, r3
 8000700:	07ff      	lsls	r7, r7, #31
 8000702:	e734      	b.n	800056e <__aeabi_ddiv+0x2ba>
 8000704:	2400      	movs	r4, #0
 8000706:	42af      	cmp	r7, r5
 8000708:	d289      	bcs.n	800061e <__aeabi_ddiv+0x36a>
 800070a:	4447      	add	r7, r8
 800070c:	4547      	cmp	r7, r8
 800070e:	41a4      	sbcs	r4, r4
 8000710:	465b      	mov	r3, fp
 8000712:	4264      	negs	r4, r4
 8000714:	19a4      	adds	r4, r4, r6
 8000716:	1864      	adds	r4, r4, r1
 8000718:	3b01      	subs	r3, #1
 800071a:	42a6      	cmp	r6, r4
 800071c:	d21e      	bcs.n	800075c <__aeabi_ddiv+0x4a8>
 800071e:	42a0      	cmp	r0, r4
 8000720:	d86d      	bhi.n	80007fe <__aeabi_ddiv+0x54a>
 8000722:	d100      	bne.n	8000726 <__aeabi_ddiv+0x472>
 8000724:	e0b6      	b.n	8000894 <__aeabi_ddiv+0x5e0>
 8000726:	1a24      	subs	r4, r4, r0
 8000728:	469b      	mov	fp, r3
 800072a:	e778      	b.n	800061e <__aeabi_ddiv+0x36a>
 800072c:	0003      	movs	r3, r0
 800072e:	465a      	mov	r2, fp
 8000730:	3b28      	subs	r3, #40	; 0x28
 8000732:	409a      	lsls	r2, r3
 8000734:	2700      	movs	r7, #0
 8000736:	4691      	mov	r9, r2
 8000738:	e688      	b.n	800044c <__aeabi_ddiv+0x198>
 800073a:	4658      	mov	r0, fp
 800073c:	f000 fc04 	bl	8000f48 <__clzsi2>
 8000740:	3020      	adds	r0, #32
 8000742:	e672      	b.n	800042a <__aeabi_ddiv+0x176>
 8000744:	0003      	movs	r3, r0
 8000746:	4652      	mov	r2, sl
 8000748:	3b28      	subs	r3, #40	; 0x28
 800074a:	409a      	lsls	r2, r3
 800074c:	4693      	mov	fp, r2
 800074e:	2200      	movs	r2, #0
 8000750:	e6b4      	b.n	80004bc <__aeabi_ddiv+0x208>
 8000752:	4650      	mov	r0, sl
 8000754:	f000 fbf8 	bl	8000f48 <__clzsi2>
 8000758:	3020      	adds	r0, #32
 800075a:	e69a      	b.n	8000492 <__aeabi_ddiv+0x1de>
 800075c:	42a6      	cmp	r6, r4
 800075e:	d1e2      	bne.n	8000726 <__aeabi_ddiv+0x472>
 8000760:	45b8      	cmp	r8, r7
 8000762:	d9dc      	bls.n	800071e <__aeabi_ddiv+0x46a>
 8000764:	1a34      	subs	r4, r6, r0
 8000766:	469b      	mov	fp, r3
 8000768:	e759      	b.n	800061e <__aeabi_ddiv+0x36a>
 800076a:	2b1f      	cmp	r3, #31
 800076c:	dc65      	bgt.n	800083a <__aeabi_ddiv+0x586>
 800076e:	4c50      	ldr	r4, [pc, #320]	; (80008b0 <__aeabi_ddiv+0x5fc>)
 8000770:	9900      	ldr	r1, [sp, #0]
 8000772:	46a4      	mov	ip, r4
 8000774:	465c      	mov	r4, fp
 8000776:	4461      	add	r1, ip
 8000778:	0008      	movs	r0, r1
 800077a:	408c      	lsls	r4, r1
 800077c:	0011      	movs	r1, r2
 800077e:	4082      	lsls	r2, r0
 8000780:	40d9      	lsrs	r1, r3
 8000782:	1e50      	subs	r0, r2, #1
 8000784:	4182      	sbcs	r2, r0
 8000786:	430c      	orrs	r4, r1
 8000788:	4314      	orrs	r4, r2
 800078a:	465a      	mov	r2, fp
 800078c:	40da      	lsrs	r2, r3
 800078e:	0013      	movs	r3, r2
 8000790:	0762      	lsls	r2, r4, #29
 8000792:	d009      	beq.n	80007a8 <__aeabi_ddiv+0x4f4>
 8000794:	220f      	movs	r2, #15
 8000796:	4022      	ands	r2, r4
 8000798:	2a04      	cmp	r2, #4
 800079a:	d005      	beq.n	80007a8 <__aeabi_ddiv+0x4f4>
 800079c:	0022      	movs	r2, r4
 800079e:	1d14      	adds	r4, r2, #4
 80007a0:	4294      	cmp	r4, r2
 80007a2:	4189      	sbcs	r1, r1
 80007a4:	4249      	negs	r1, r1
 80007a6:	185b      	adds	r3, r3, r1
 80007a8:	021a      	lsls	r2, r3, #8
 80007aa:	d562      	bpl.n	8000872 <__aeabi_ddiv+0x5be>
 80007ac:	2201      	movs	r2, #1
 80007ae:	2300      	movs	r3, #0
 80007b0:	2700      	movs	r7, #0
 80007b2:	e60d      	b.n	80003d0 <__aeabi_ddiv+0x11c>
 80007b4:	428a      	cmp	r2, r1
 80007b6:	d800      	bhi.n	80007ba <__aeabi_ddiv+0x506>
 80007b8:	e70a      	b.n	80005d0 <__aeabi_ddiv+0x31c>
 80007ba:	1e83      	subs	r3, r0, #2
 80007bc:	1989      	adds	r1, r1, r6
 80007be:	e707      	b.n	80005d0 <__aeabi_ddiv+0x31c>
 80007c0:	230f      	movs	r3, #15
 80007c2:	4013      	ands	r3, r2
 80007c4:	2b04      	cmp	r3, #4
 80007c6:	d100      	bne.n	80007ca <__aeabi_ddiv+0x516>
 80007c8:	e5e6      	b.n	8000398 <__aeabi_ddiv+0xe4>
 80007ca:	1d17      	adds	r7, r2, #4
 80007cc:	4297      	cmp	r7, r2
 80007ce:	4192      	sbcs	r2, r2
 80007d0:	4253      	negs	r3, r2
 80007d2:	449b      	add	fp, r3
 80007d4:	08fa      	lsrs	r2, r7, #3
 80007d6:	e5e0      	b.n	800039a <__aeabi_ddiv+0xe6>
 80007d8:	2800      	cmp	r0, #0
 80007da:	d100      	bne.n	80007de <__aeabi_ddiv+0x52a>
 80007dc:	e5d7      	b.n	800038e <__aeabi_ddiv+0xda>
 80007de:	1871      	adds	r1, r6, r1
 80007e0:	1e53      	subs	r3, r2, #1
 80007e2:	42b1      	cmp	r1, r6
 80007e4:	d327      	bcc.n	8000836 <__aeabi_ddiv+0x582>
 80007e6:	42a9      	cmp	r1, r5
 80007e8:	d315      	bcc.n	8000816 <__aeabi_ddiv+0x562>
 80007ea:	d058      	beq.n	800089e <__aeabi_ddiv+0x5ea>
 80007ec:	001a      	movs	r2, r3
 80007ee:	e773      	b.n	80006d8 <__aeabi_ddiv+0x424>
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	dc00      	bgt.n	80007f6 <__aeabi_ddiv+0x542>
 80007f4:	e604      	b.n	8000400 <__aeabi_ddiv+0x14c>
 80007f6:	2301      	movs	r3, #1
 80007f8:	2200      	movs	r2, #0
 80007fa:	449b      	add	fp, r3
 80007fc:	e5cd      	b.n	800039a <__aeabi_ddiv+0xe6>
 80007fe:	2302      	movs	r3, #2
 8000800:	4447      	add	r7, r8
 8000802:	4547      	cmp	r7, r8
 8000804:	4189      	sbcs	r1, r1
 8000806:	425b      	negs	r3, r3
 8000808:	469c      	mov	ip, r3
 800080a:	4249      	negs	r1, r1
 800080c:	1989      	adds	r1, r1, r6
 800080e:	190c      	adds	r4, r1, r4
 8000810:	44e3      	add	fp, ip
 8000812:	1a24      	subs	r4, r4, r0
 8000814:	e703      	b.n	800061e <__aeabi_ddiv+0x36a>
 8000816:	4643      	mov	r3, r8
 8000818:	005f      	lsls	r7, r3, #1
 800081a:	4547      	cmp	r7, r8
 800081c:	419b      	sbcs	r3, r3
 800081e:	46b8      	mov	r8, r7
 8000820:	425b      	negs	r3, r3
 8000822:	199e      	adds	r6, r3, r6
 8000824:	3a02      	subs	r2, #2
 8000826:	1989      	adds	r1, r1, r6
 8000828:	42a9      	cmp	r1, r5
 800082a:	d000      	beq.n	800082e <__aeabi_ddiv+0x57a>
 800082c:	e754      	b.n	80006d8 <__aeabi_ddiv+0x424>
 800082e:	4540      	cmp	r0, r8
 8000830:	d000      	beq.n	8000834 <__aeabi_ddiv+0x580>
 8000832:	e751      	b.n	80006d8 <__aeabi_ddiv+0x424>
 8000834:	e5ab      	b.n	800038e <__aeabi_ddiv+0xda>
 8000836:	001a      	movs	r2, r3
 8000838:	e7f6      	b.n	8000828 <__aeabi_ddiv+0x574>
 800083a:	211f      	movs	r1, #31
 800083c:	465f      	mov	r7, fp
 800083e:	4249      	negs	r1, r1
 8000840:	1b0c      	subs	r4, r1, r4
 8000842:	40e7      	lsrs	r7, r4
 8000844:	2b20      	cmp	r3, #32
 8000846:	d007      	beq.n	8000858 <__aeabi_ddiv+0x5a4>
 8000848:	491a      	ldr	r1, [pc, #104]	; (80008b4 <__aeabi_ddiv+0x600>)
 800084a:	9b00      	ldr	r3, [sp, #0]
 800084c:	468c      	mov	ip, r1
 800084e:	4463      	add	r3, ip
 8000850:	0018      	movs	r0, r3
 8000852:	465b      	mov	r3, fp
 8000854:	4083      	lsls	r3, r0
 8000856:	431a      	orrs	r2, r3
 8000858:	1e50      	subs	r0, r2, #1
 800085a:	4182      	sbcs	r2, r0
 800085c:	433a      	orrs	r2, r7
 800085e:	2707      	movs	r7, #7
 8000860:	2300      	movs	r3, #0
 8000862:	4017      	ands	r7, r2
 8000864:	d009      	beq.n	800087a <__aeabi_ddiv+0x5c6>
 8000866:	210f      	movs	r1, #15
 8000868:	2300      	movs	r3, #0
 800086a:	4011      	ands	r1, r2
 800086c:	0014      	movs	r4, r2
 800086e:	2904      	cmp	r1, #4
 8000870:	d195      	bne.n	800079e <__aeabi_ddiv+0x4ea>
 8000872:	0022      	movs	r2, r4
 8000874:	075f      	lsls	r7, r3, #29
 8000876:	025b      	lsls	r3, r3, #9
 8000878:	0b1b      	lsrs	r3, r3, #12
 800087a:	08d2      	lsrs	r2, r2, #3
 800087c:	4317      	orrs	r7, r2
 800087e:	2200      	movs	r2, #0
 8000880:	e5a6      	b.n	80003d0 <__aeabi_ddiv+0x11c>
 8000882:	2380      	movs	r3, #128	; 0x80
 8000884:	4659      	mov	r1, fp
 8000886:	031b      	lsls	r3, r3, #12
 8000888:	430b      	orrs	r3, r1
 800088a:	031b      	lsls	r3, r3, #12
 800088c:	0017      	movs	r7, r2
 800088e:	0b1b      	lsrs	r3, r3, #12
 8000890:	4a06      	ldr	r2, [pc, #24]	; (80008ac <__aeabi_ddiv+0x5f8>)
 8000892:	e59d      	b.n	80003d0 <__aeabi_ddiv+0x11c>
 8000894:	42bd      	cmp	r5, r7
 8000896:	d8b2      	bhi.n	80007fe <__aeabi_ddiv+0x54a>
 8000898:	469b      	mov	fp, r3
 800089a:	2400      	movs	r4, #0
 800089c:	e6bf      	b.n	800061e <__aeabi_ddiv+0x36a>
 800089e:	4580      	cmp	r8, r0
 80008a0:	d3b9      	bcc.n	8000816 <__aeabi_ddiv+0x562>
 80008a2:	001a      	movs	r2, r3
 80008a4:	e7c3      	b.n	800082e <__aeabi_ddiv+0x57a>
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	000003ff 	.word	0x000003ff
 80008ac:	000007ff 	.word	0x000007ff
 80008b0:	0000041e 	.word	0x0000041e
 80008b4:	0000043e 	.word	0x0000043e

080008b8 <__aeabi_dmul>:
 80008b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008ba:	4657      	mov	r7, sl
 80008bc:	46de      	mov	lr, fp
 80008be:	464e      	mov	r6, r9
 80008c0:	4645      	mov	r5, r8
 80008c2:	b5e0      	push	{r5, r6, r7, lr}
 80008c4:	4683      	mov	fp, r0
 80008c6:	0006      	movs	r6, r0
 80008c8:	030f      	lsls	r7, r1, #12
 80008ca:	0048      	lsls	r0, r1, #1
 80008cc:	b087      	sub	sp, #28
 80008ce:	4692      	mov	sl, r2
 80008d0:	001d      	movs	r5, r3
 80008d2:	0b3f      	lsrs	r7, r7, #12
 80008d4:	0d40      	lsrs	r0, r0, #21
 80008d6:	0fcc      	lsrs	r4, r1, #31
 80008d8:	2800      	cmp	r0, #0
 80008da:	d100      	bne.n	80008de <__aeabi_dmul+0x26>
 80008dc:	e06f      	b.n	80009be <__aeabi_dmul+0x106>
 80008de:	4bde      	ldr	r3, [pc, #888]	; (8000c58 <__aeabi_dmul+0x3a0>)
 80008e0:	4298      	cmp	r0, r3
 80008e2:	d038      	beq.n	8000956 <__aeabi_dmul+0x9e>
 80008e4:	2380      	movs	r3, #128	; 0x80
 80008e6:	00ff      	lsls	r7, r7, #3
 80008e8:	041b      	lsls	r3, r3, #16
 80008ea:	431f      	orrs	r7, r3
 80008ec:	0f73      	lsrs	r3, r6, #29
 80008ee:	433b      	orrs	r3, r7
 80008f0:	9301      	str	r3, [sp, #4]
 80008f2:	4bda      	ldr	r3, [pc, #872]	; (8000c5c <__aeabi_dmul+0x3a4>)
 80008f4:	2700      	movs	r7, #0
 80008f6:	4699      	mov	r9, r3
 80008f8:	2300      	movs	r3, #0
 80008fa:	469b      	mov	fp, r3
 80008fc:	00f6      	lsls	r6, r6, #3
 80008fe:	4481      	add	r9, r0
 8000900:	032b      	lsls	r3, r5, #12
 8000902:	0069      	lsls	r1, r5, #1
 8000904:	0b1b      	lsrs	r3, r3, #12
 8000906:	4652      	mov	r2, sl
 8000908:	4698      	mov	r8, r3
 800090a:	0d49      	lsrs	r1, r1, #21
 800090c:	0fed      	lsrs	r5, r5, #31
 800090e:	2900      	cmp	r1, #0
 8000910:	d100      	bne.n	8000914 <__aeabi_dmul+0x5c>
 8000912:	e085      	b.n	8000a20 <__aeabi_dmul+0x168>
 8000914:	4bd0      	ldr	r3, [pc, #832]	; (8000c58 <__aeabi_dmul+0x3a0>)
 8000916:	4299      	cmp	r1, r3
 8000918:	d100      	bne.n	800091c <__aeabi_dmul+0x64>
 800091a:	e073      	b.n	8000a04 <__aeabi_dmul+0x14c>
 800091c:	4643      	mov	r3, r8
 800091e:	00da      	lsls	r2, r3, #3
 8000920:	2380      	movs	r3, #128	; 0x80
 8000922:	041b      	lsls	r3, r3, #16
 8000924:	4313      	orrs	r3, r2
 8000926:	4652      	mov	r2, sl
 8000928:	48cc      	ldr	r0, [pc, #816]	; (8000c5c <__aeabi_dmul+0x3a4>)
 800092a:	0f52      	lsrs	r2, r2, #29
 800092c:	4684      	mov	ip, r0
 800092e:	4313      	orrs	r3, r2
 8000930:	4652      	mov	r2, sl
 8000932:	2000      	movs	r0, #0
 8000934:	4461      	add	r1, ip
 8000936:	00d2      	lsls	r2, r2, #3
 8000938:	4489      	add	r9, r1
 800093a:	0021      	movs	r1, r4
 800093c:	4069      	eors	r1, r5
 800093e:	9100      	str	r1, [sp, #0]
 8000940:	468c      	mov	ip, r1
 8000942:	2101      	movs	r1, #1
 8000944:	4449      	add	r1, r9
 8000946:	468a      	mov	sl, r1
 8000948:	2f0f      	cmp	r7, #15
 800094a:	d900      	bls.n	800094e <__aeabi_dmul+0x96>
 800094c:	e090      	b.n	8000a70 <__aeabi_dmul+0x1b8>
 800094e:	49c4      	ldr	r1, [pc, #784]	; (8000c60 <__aeabi_dmul+0x3a8>)
 8000950:	00bf      	lsls	r7, r7, #2
 8000952:	59cf      	ldr	r7, [r1, r7]
 8000954:	46bf      	mov	pc, r7
 8000956:	465b      	mov	r3, fp
 8000958:	433b      	orrs	r3, r7
 800095a:	9301      	str	r3, [sp, #4]
 800095c:	d000      	beq.n	8000960 <__aeabi_dmul+0xa8>
 800095e:	e16a      	b.n	8000c36 <__aeabi_dmul+0x37e>
 8000960:	2302      	movs	r3, #2
 8000962:	2708      	movs	r7, #8
 8000964:	2600      	movs	r6, #0
 8000966:	4681      	mov	r9, r0
 8000968:	469b      	mov	fp, r3
 800096a:	e7c9      	b.n	8000900 <__aeabi_dmul+0x48>
 800096c:	0032      	movs	r2, r6
 800096e:	4658      	mov	r0, fp
 8000970:	9b01      	ldr	r3, [sp, #4]
 8000972:	4661      	mov	r1, ip
 8000974:	9100      	str	r1, [sp, #0]
 8000976:	2802      	cmp	r0, #2
 8000978:	d100      	bne.n	800097c <__aeabi_dmul+0xc4>
 800097a:	e075      	b.n	8000a68 <__aeabi_dmul+0x1b0>
 800097c:	2803      	cmp	r0, #3
 800097e:	d100      	bne.n	8000982 <__aeabi_dmul+0xca>
 8000980:	e1fe      	b.n	8000d80 <__aeabi_dmul+0x4c8>
 8000982:	2801      	cmp	r0, #1
 8000984:	d000      	beq.n	8000988 <__aeabi_dmul+0xd0>
 8000986:	e12c      	b.n	8000be2 <__aeabi_dmul+0x32a>
 8000988:	2300      	movs	r3, #0
 800098a:	2700      	movs	r7, #0
 800098c:	2600      	movs	r6, #0
 800098e:	2500      	movs	r5, #0
 8000990:	033f      	lsls	r7, r7, #12
 8000992:	0d2a      	lsrs	r2, r5, #20
 8000994:	0b3f      	lsrs	r7, r7, #12
 8000996:	48b3      	ldr	r0, [pc, #716]	; (8000c64 <__aeabi_dmul+0x3ac>)
 8000998:	0512      	lsls	r2, r2, #20
 800099a:	433a      	orrs	r2, r7
 800099c:	4002      	ands	r2, r0
 800099e:	051b      	lsls	r3, r3, #20
 80009a0:	4313      	orrs	r3, r2
 80009a2:	9a00      	ldr	r2, [sp, #0]
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	07d1      	lsls	r1, r2, #31
 80009a8:	085b      	lsrs	r3, r3, #1
 80009aa:	430b      	orrs	r3, r1
 80009ac:	0030      	movs	r0, r6
 80009ae:	0019      	movs	r1, r3
 80009b0:	b007      	add	sp, #28
 80009b2:	bc3c      	pop	{r2, r3, r4, r5}
 80009b4:	4690      	mov	r8, r2
 80009b6:	4699      	mov	r9, r3
 80009b8:	46a2      	mov	sl, r4
 80009ba:	46ab      	mov	fp, r5
 80009bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009be:	465b      	mov	r3, fp
 80009c0:	433b      	orrs	r3, r7
 80009c2:	9301      	str	r3, [sp, #4]
 80009c4:	d100      	bne.n	80009c8 <__aeabi_dmul+0x110>
 80009c6:	e12f      	b.n	8000c28 <__aeabi_dmul+0x370>
 80009c8:	2f00      	cmp	r7, #0
 80009ca:	d100      	bne.n	80009ce <__aeabi_dmul+0x116>
 80009cc:	e1a5      	b.n	8000d1a <__aeabi_dmul+0x462>
 80009ce:	0038      	movs	r0, r7
 80009d0:	f000 faba 	bl	8000f48 <__clzsi2>
 80009d4:	0003      	movs	r3, r0
 80009d6:	3b0b      	subs	r3, #11
 80009d8:	2b1c      	cmp	r3, #28
 80009da:	dd00      	ble.n	80009de <__aeabi_dmul+0x126>
 80009dc:	e196      	b.n	8000d0c <__aeabi_dmul+0x454>
 80009de:	221d      	movs	r2, #29
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	465a      	mov	r2, fp
 80009e4:	0001      	movs	r1, r0
 80009e6:	40da      	lsrs	r2, r3
 80009e8:	465e      	mov	r6, fp
 80009ea:	3908      	subs	r1, #8
 80009ec:	408f      	lsls	r7, r1
 80009ee:	0013      	movs	r3, r2
 80009f0:	408e      	lsls	r6, r1
 80009f2:	433b      	orrs	r3, r7
 80009f4:	9301      	str	r3, [sp, #4]
 80009f6:	4b9c      	ldr	r3, [pc, #624]	; (8000c68 <__aeabi_dmul+0x3b0>)
 80009f8:	2700      	movs	r7, #0
 80009fa:	1a1b      	subs	r3, r3, r0
 80009fc:	4699      	mov	r9, r3
 80009fe:	2300      	movs	r3, #0
 8000a00:	469b      	mov	fp, r3
 8000a02:	e77d      	b.n	8000900 <__aeabi_dmul+0x48>
 8000a04:	4641      	mov	r1, r8
 8000a06:	4653      	mov	r3, sl
 8000a08:	430b      	orrs	r3, r1
 8000a0a:	4993      	ldr	r1, [pc, #588]	; (8000c58 <__aeabi_dmul+0x3a0>)
 8000a0c:	468c      	mov	ip, r1
 8000a0e:	44e1      	add	r9, ip
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d000      	beq.n	8000a16 <__aeabi_dmul+0x15e>
 8000a14:	e11a      	b.n	8000c4c <__aeabi_dmul+0x394>
 8000a16:	2202      	movs	r2, #2
 8000a18:	2002      	movs	r0, #2
 8000a1a:	4317      	orrs	r7, r2
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	e78c      	b.n	800093a <__aeabi_dmul+0x82>
 8000a20:	4313      	orrs	r3, r2
 8000a22:	d100      	bne.n	8000a26 <__aeabi_dmul+0x16e>
 8000a24:	e10d      	b.n	8000c42 <__aeabi_dmul+0x38a>
 8000a26:	4643      	mov	r3, r8
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d100      	bne.n	8000a2e <__aeabi_dmul+0x176>
 8000a2c:	e181      	b.n	8000d32 <__aeabi_dmul+0x47a>
 8000a2e:	4640      	mov	r0, r8
 8000a30:	f000 fa8a 	bl	8000f48 <__clzsi2>
 8000a34:	0002      	movs	r2, r0
 8000a36:	3a0b      	subs	r2, #11
 8000a38:	2a1c      	cmp	r2, #28
 8000a3a:	dd00      	ble.n	8000a3e <__aeabi_dmul+0x186>
 8000a3c:	e172      	b.n	8000d24 <__aeabi_dmul+0x46c>
 8000a3e:	0001      	movs	r1, r0
 8000a40:	4643      	mov	r3, r8
 8000a42:	3908      	subs	r1, #8
 8000a44:	408b      	lsls	r3, r1
 8000a46:	4698      	mov	r8, r3
 8000a48:	231d      	movs	r3, #29
 8000a4a:	1a9a      	subs	r2, r3, r2
 8000a4c:	4653      	mov	r3, sl
 8000a4e:	40d3      	lsrs	r3, r2
 8000a50:	001a      	movs	r2, r3
 8000a52:	4643      	mov	r3, r8
 8000a54:	4313      	orrs	r3, r2
 8000a56:	4652      	mov	r2, sl
 8000a58:	408a      	lsls	r2, r1
 8000a5a:	4649      	mov	r1, r9
 8000a5c:	1a08      	subs	r0, r1, r0
 8000a5e:	4982      	ldr	r1, [pc, #520]	; (8000c68 <__aeabi_dmul+0x3b0>)
 8000a60:	4689      	mov	r9, r1
 8000a62:	4481      	add	r9, r0
 8000a64:	2000      	movs	r0, #0
 8000a66:	e768      	b.n	800093a <__aeabi_dmul+0x82>
 8000a68:	4b7b      	ldr	r3, [pc, #492]	; (8000c58 <__aeabi_dmul+0x3a0>)
 8000a6a:	2700      	movs	r7, #0
 8000a6c:	2600      	movs	r6, #0
 8000a6e:	e78e      	b.n	800098e <__aeabi_dmul+0xd6>
 8000a70:	0c14      	lsrs	r4, r2, #16
 8000a72:	0412      	lsls	r2, r2, #16
 8000a74:	0c12      	lsrs	r2, r2, #16
 8000a76:	0011      	movs	r1, r2
 8000a78:	0c37      	lsrs	r7, r6, #16
 8000a7a:	0436      	lsls	r6, r6, #16
 8000a7c:	0c35      	lsrs	r5, r6, #16
 8000a7e:	4379      	muls	r1, r7
 8000a80:	0028      	movs	r0, r5
 8000a82:	468c      	mov	ip, r1
 8000a84:	002e      	movs	r6, r5
 8000a86:	4360      	muls	r0, r4
 8000a88:	4460      	add	r0, ip
 8000a8a:	4683      	mov	fp, r0
 8000a8c:	4356      	muls	r6, r2
 8000a8e:	0021      	movs	r1, r4
 8000a90:	0c30      	lsrs	r0, r6, #16
 8000a92:	4680      	mov	r8, r0
 8000a94:	4658      	mov	r0, fp
 8000a96:	4379      	muls	r1, r7
 8000a98:	4440      	add	r0, r8
 8000a9a:	9102      	str	r1, [sp, #8]
 8000a9c:	4584      	cmp	ip, r0
 8000a9e:	d906      	bls.n	8000aae <__aeabi_dmul+0x1f6>
 8000aa0:	4688      	mov	r8, r1
 8000aa2:	2180      	movs	r1, #128	; 0x80
 8000aa4:	0249      	lsls	r1, r1, #9
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	44e0      	add	r8, ip
 8000aaa:	4641      	mov	r1, r8
 8000aac:	9102      	str	r1, [sp, #8]
 8000aae:	0436      	lsls	r6, r6, #16
 8000ab0:	0c01      	lsrs	r1, r0, #16
 8000ab2:	0c36      	lsrs	r6, r6, #16
 8000ab4:	0400      	lsls	r0, r0, #16
 8000ab6:	468b      	mov	fp, r1
 8000ab8:	1981      	adds	r1, r0, r6
 8000aba:	0c1e      	lsrs	r6, r3, #16
 8000abc:	041b      	lsls	r3, r3, #16
 8000abe:	0c1b      	lsrs	r3, r3, #16
 8000ac0:	9103      	str	r1, [sp, #12]
 8000ac2:	0019      	movs	r1, r3
 8000ac4:	4379      	muls	r1, r7
 8000ac6:	468c      	mov	ip, r1
 8000ac8:	0028      	movs	r0, r5
 8000aca:	4375      	muls	r5, r6
 8000acc:	4465      	add	r5, ip
 8000ace:	46a8      	mov	r8, r5
 8000ad0:	4358      	muls	r0, r3
 8000ad2:	0c05      	lsrs	r5, r0, #16
 8000ad4:	4445      	add	r5, r8
 8000ad6:	4377      	muls	r7, r6
 8000ad8:	42a9      	cmp	r1, r5
 8000ada:	d903      	bls.n	8000ae4 <__aeabi_dmul+0x22c>
 8000adc:	2180      	movs	r1, #128	; 0x80
 8000ade:	0249      	lsls	r1, r1, #9
 8000ae0:	468c      	mov	ip, r1
 8000ae2:	4467      	add	r7, ip
 8000ae4:	0c29      	lsrs	r1, r5, #16
 8000ae6:	468c      	mov	ip, r1
 8000ae8:	0039      	movs	r1, r7
 8000aea:	0400      	lsls	r0, r0, #16
 8000aec:	0c00      	lsrs	r0, r0, #16
 8000aee:	042d      	lsls	r5, r5, #16
 8000af0:	182d      	adds	r5, r5, r0
 8000af2:	4461      	add	r1, ip
 8000af4:	44ab      	add	fp, r5
 8000af6:	9105      	str	r1, [sp, #20]
 8000af8:	4659      	mov	r1, fp
 8000afa:	9104      	str	r1, [sp, #16]
 8000afc:	9901      	ldr	r1, [sp, #4]
 8000afe:	040f      	lsls	r7, r1, #16
 8000b00:	0c3f      	lsrs	r7, r7, #16
 8000b02:	0c08      	lsrs	r0, r1, #16
 8000b04:	0039      	movs	r1, r7
 8000b06:	4351      	muls	r1, r2
 8000b08:	4342      	muls	r2, r0
 8000b0a:	4690      	mov	r8, r2
 8000b0c:	0002      	movs	r2, r0
 8000b0e:	468c      	mov	ip, r1
 8000b10:	0c09      	lsrs	r1, r1, #16
 8000b12:	468b      	mov	fp, r1
 8000b14:	4362      	muls	r2, r4
 8000b16:	437c      	muls	r4, r7
 8000b18:	4444      	add	r4, r8
 8000b1a:	445c      	add	r4, fp
 8000b1c:	45a0      	cmp	r8, r4
 8000b1e:	d903      	bls.n	8000b28 <__aeabi_dmul+0x270>
 8000b20:	2180      	movs	r1, #128	; 0x80
 8000b22:	0249      	lsls	r1, r1, #9
 8000b24:	4688      	mov	r8, r1
 8000b26:	4442      	add	r2, r8
 8000b28:	0c21      	lsrs	r1, r4, #16
 8000b2a:	4688      	mov	r8, r1
 8000b2c:	4661      	mov	r1, ip
 8000b2e:	0409      	lsls	r1, r1, #16
 8000b30:	0c09      	lsrs	r1, r1, #16
 8000b32:	468c      	mov	ip, r1
 8000b34:	0039      	movs	r1, r7
 8000b36:	4359      	muls	r1, r3
 8000b38:	4343      	muls	r3, r0
 8000b3a:	4370      	muls	r0, r6
 8000b3c:	437e      	muls	r6, r7
 8000b3e:	0c0f      	lsrs	r7, r1, #16
 8000b40:	18f6      	adds	r6, r6, r3
 8000b42:	0424      	lsls	r4, r4, #16
 8000b44:	19be      	adds	r6, r7, r6
 8000b46:	4464      	add	r4, ip
 8000b48:	4442      	add	r2, r8
 8000b4a:	468c      	mov	ip, r1
 8000b4c:	42b3      	cmp	r3, r6
 8000b4e:	d903      	bls.n	8000b58 <__aeabi_dmul+0x2a0>
 8000b50:	2380      	movs	r3, #128	; 0x80
 8000b52:	025b      	lsls	r3, r3, #9
 8000b54:	4698      	mov	r8, r3
 8000b56:	4440      	add	r0, r8
 8000b58:	9b02      	ldr	r3, [sp, #8]
 8000b5a:	4661      	mov	r1, ip
 8000b5c:	4698      	mov	r8, r3
 8000b5e:	9b04      	ldr	r3, [sp, #16]
 8000b60:	0437      	lsls	r7, r6, #16
 8000b62:	4443      	add	r3, r8
 8000b64:	469b      	mov	fp, r3
 8000b66:	45ab      	cmp	fp, r5
 8000b68:	41ad      	sbcs	r5, r5
 8000b6a:	426b      	negs	r3, r5
 8000b6c:	040d      	lsls	r5, r1, #16
 8000b6e:	9905      	ldr	r1, [sp, #20]
 8000b70:	0c2d      	lsrs	r5, r5, #16
 8000b72:	468c      	mov	ip, r1
 8000b74:	197f      	adds	r7, r7, r5
 8000b76:	4467      	add	r7, ip
 8000b78:	18fd      	adds	r5, r7, r3
 8000b7a:	46a8      	mov	r8, r5
 8000b7c:	465d      	mov	r5, fp
 8000b7e:	192d      	adds	r5, r5, r4
 8000b80:	42a5      	cmp	r5, r4
 8000b82:	41a4      	sbcs	r4, r4
 8000b84:	4693      	mov	fp, r2
 8000b86:	4264      	negs	r4, r4
 8000b88:	46a4      	mov	ip, r4
 8000b8a:	44c3      	add	fp, r8
 8000b8c:	44dc      	add	ip, fp
 8000b8e:	428f      	cmp	r7, r1
 8000b90:	41bf      	sbcs	r7, r7
 8000b92:	4598      	cmp	r8, r3
 8000b94:	419b      	sbcs	r3, r3
 8000b96:	4593      	cmp	fp, r2
 8000b98:	4192      	sbcs	r2, r2
 8000b9a:	45a4      	cmp	ip, r4
 8000b9c:	41a4      	sbcs	r4, r4
 8000b9e:	425b      	negs	r3, r3
 8000ba0:	427f      	negs	r7, r7
 8000ba2:	431f      	orrs	r7, r3
 8000ba4:	0c36      	lsrs	r6, r6, #16
 8000ba6:	4252      	negs	r2, r2
 8000ba8:	4264      	negs	r4, r4
 8000baa:	19bf      	adds	r7, r7, r6
 8000bac:	4322      	orrs	r2, r4
 8000bae:	18bf      	adds	r7, r7, r2
 8000bb0:	4662      	mov	r2, ip
 8000bb2:	1838      	adds	r0, r7, r0
 8000bb4:	0243      	lsls	r3, r0, #9
 8000bb6:	0dd2      	lsrs	r2, r2, #23
 8000bb8:	9903      	ldr	r1, [sp, #12]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	026a      	lsls	r2, r5, #9
 8000bbe:	430a      	orrs	r2, r1
 8000bc0:	1e50      	subs	r0, r2, #1
 8000bc2:	4182      	sbcs	r2, r0
 8000bc4:	4661      	mov	r1, ip
 8000bc6:	0ded      	lsrs	r5, r5, #23
 8000bc8:	432a      	orrs	r2, r5
 8000bca:	024e      	lsls	r6, r1, #9
 8000bcc:	4332      	orrs	r2, r6
 8000bce:	01d9      	lsls	r1, r3, #7
 8000bd0:	d400      	bmi.n	8000bd4 <__aeabi_dmul+0x31c>
 8000bd2:	e0b3      	b.n	8000d3c <__aeabi_dmul+0x484>
 8000bd4:	2601      	movs	r6, #1
 8000bd6:	0850      	lsrs	r0, r2, #1
 8000bd8:	4032      	ands	r2, r6
 8000bda:	4302      	orrs	r2, r0
 8000bdc:	07de      	lsls	r6, r3, #31
 8000bde:	4332      	orrs	r2, r6
 8000be0:	085b      	lsrs	r3, r3, #1
 8000be2:	4c22      	ldr	r4, [pc, #136]	; (8000c6c <__aeabi_dmul+0x3b4>)
 8000be4:	4454      	add	r4, sl
 8000be6:	2c00      	cmp	r4, #0
 8000be8:	dd62      	ble.n	8000cb0 <__aeabi_dmul+0x3f8>
 8000bea:	0751      	lsls	r1, r2, #29
 8000bec:	d009      	beq.n	8000c02 <__aeabi_dmul+0x34a>
 8000bee:	200f      	movs	r0, #15
 8000bf0:	4010      	ands	r0, r2
 8000bf2:	2804      	cmp	r0, #4
 8000bf4:	d005      	beq.n	8000c02 <__aeabi_dmul+0x34a>
 8000bf6:	1d10      	adds	r0, r2, #4
 8000bf8:	4290      	cmp	r0, r2
 8000bfa:	4192      	sbcs	r2, r2
 8000bfc:	4252      	negs	r2, r2
 8000bfe:	189b      	adds	r3, r3, r2
 8000c00:	0002      	movs	r2, r0
 8000c02:	01d9      	lsls	r1, r3, #7
 8000c04:	d504      	bpl.n	8000c10 <__aeabi_dmul+0x358>
 8000c06:	2480      	movs	r4, #128	; 0x80
 8000c08:	4819      	ldr	r0, [pc, #100]	; (8000c70 <__aeabi_dmul+0x3b8>)
 8000c0a:	00e4      	lsls	r4, r4, #3
 8000c0c:	4003      	ands	r3, r0
 8000c0e:	4454      	add	r4, sl
 8000c10:	4818      	ldr	r0, [pc, #96]	; (8000c74 <__aeabi_dmul+0x3bc>)
 8000c12:	4284      	cmp	r4, r0
 8000c14:	dd00      	ble.n	8000c18 <__aeabi_dmul+0x360>
 8000c16:	e727      	b.n	8000a68 <__aeabi_dmul+0x1b0>
 8000c18:	075e      	lsls	r6, r3, #29
 8000c1a:	025b      	lsls	r3, r3, #9
 8000c1c:	08d2      	lsrs	r2, r2, #3
 8000c1e:	0b1f      	lsrs	r7, r3, #12
 8000c20:	0563      	lsls	r3, r4, #21
 8000c22:	4316      	orrs	r6, r2
 8000c24:	0d5b      	lsrs	r3, r3, #21
 8000c26:	e6b2      	b.n	800098e <__aeabi_dmul+0xd6>
 8000c28:	2300      	movs	r3, #0
 8000c2a:	4699      	mov	r9, r3
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	2704      	movs	r7, #4
 8000c30:	2600      	movs	r6, #0
 8000c32:	469b      	mov	fp, r3
 8000c34:	e664      	b.n	8000900 <__aeabi_dmul+0x48>
 8000c36:	2303      	movs	r3, #3
 8000c38:	9701      	str	r7, [sp, #4]
 8000c3a:	4681      	mov	r9, r0
 8000c3c:	270c      	movs	r7, #12
 8000c3e:	469b      	mov	fp, r3
 8000c40:	e65e      	b.n	8000900 <__aeabi_dmul+0x48>
 8000c42:	2201      	movs	r2, #1
 8000c44:	2001      	movs	r0, #1
 8000c46:	4317      	orrs	r7, r2
 8000c48:	2200      	movs	r2, #0
 8000c4a:	e676      	b.n	800093a <__aeabi_dmul+0x82>
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	2003      	movs	r0, #3
 8000c50:	431f      	orrs	r7, r3
 8000c52:	4643      	mov	r3, r8
 8000c54:	e671      	b.n	800093a <__aeabi_dmul+0x82>
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	000007ff 	.word	0x000007ff
 8000c5c:	fffffc01 	.word	0xfffffc01
 8000c60:	0800364c 	.word	0x0800364c
 8000c64:	800fffff 	.word	0x800fffff
 8000c68:	fffffc0d 	.word	0xfffffc0d
 8000c6c:	000003ff 	.word	0x000003ff
 8000c70:	feffffff 	.word	0xfeffffff
 8000c74:	000007fe 	.word	0x000007fe
 8000c78:	2300      	movs	r3, #0
 8000c7a:	2780      	movs	r7, #128	; 0x80
 8000c7c:	9300      	str	r3, [sp, #0]
 8000c7e:	033f      	lsls	r7, r7, #12
 8000c80:	2600      	movs	r6, #0
 8000c82:	4b43      	ldr	r3, [pc, #268]	; (8000d90 <__aeabi_dmul+0x4d8>)
 8000c84:	e683      	b.n	800098e <__aeabi_dmul+0xd6>
 8000c86:	9b01      	ldr	r3, [sp, #4]
 8000c88:	0032      	movs	r2, r6
 8000c8a:	46a4      	mov	ip, r4
 8000c8c:	4658      	mov	r0, fp
 8000c8e:	e670      	b.n	8000972 <__aeabi_dmul+0xba>
 8000c90:	46ac      	mov	ip, r5
 8000c92:	e66e      	b.n	8000972 <__aeabi_dmul+0xba>
 8000c94:	2780      	movs	r7, #128	; 0x80
 8000c96:	9901      	ldr	r1, [sp, #4]
 8000c98:	033f      	lsls	r7, r7, #12
 8000c9a:	4239      	tst	r1, r7
 8000c9c:	d02d      	beq.n	8000cfa <__aeabi_dmul+0x442>
 8000c9e:	423b      	tst	r3, r7
 8000ca0:	d12b      	bne.n	8000cfa <__aeabi_dmul+0x442>
 8000ca2:	431f      	orrs	r7, r3
 8000ca4:	033f      	lsls	r7, r7, #12
 8000ca6:	0b3f      	lsrs	r7, r7, #12
 8000ca8:	9500      	str	r5, [sp, #0]
 8000caa:	0016      	movs	r6, r2
 8000cac:	4b38      	ldr	r3, [pc, #224]	; (8000d90 <__aeabi_dmul+0x4d8>)
 8000cae:	e66e      	b.n	800098e <__aeabi_dmul+0xd6>
 8000cb0:	2501      	movs	r5, #1
 8000cb2:	1b2d      	subs	r5, r5, r4
 8000cb4:	2d38      	cmp	r5, #56	; 0x38
 8000cb6:	dd00      	ble.n	8000cba <__aeabi_dmul+0x402>
 8000cb8:	e666      	b.n	8000988 <__aeabi_dmul+0xd0>
 8000cba:	2d1f      	cmp	r5, #31
 8000cbc:	dc40      	bgt.n	8000d40 <__aeabi_dmul+0x488>
 8000cbe:	4835      	ldr	r0, [pc, #212]	; (8000d94 <__aeabi_dmul+0x4dc>)
 8000cc0:	001c      	movs	r4, r3
 8000cc2:	4450      	add	r0, sl
 8000cc4:	0016      	movs	r6, r2
 8000cc6:	4082      	lsls	r2, r0
 8000cc8:	4084      	lsls	r4, r0
 8000cca:	40ee      	lsrs	r6, r5
 8000ccc:	1e50      	subs	r0, r2, #1
 8000cce:	4182      	sbcs	r2, r0
 8000cd0:	4334      	orrs	r4, r6
 8000cd2:	4314      	orrs	r4, r2
 8000cd4:	40eb      	lsrs	r3, r5
 8000cd6:	0762      	lsls	r2, r4, #29
 8000cd8:	d009      	beq.n	8000cee <__aeabi_dmul+0x436>
 8000cda:	220f      	movs	r2, #15
 8000cdc:	4022      	ands	r2, r4
 8000cde:	2a04      	cmp	r2, #4
 8000ce0:	d005      	beq.n	8000cee <__aeabi_dmul+0x436>
 8000ce2:	0022      	movs	r2, r4
 8000ce4:	1d14      	adds	r4, r2, #4
 8000ce6:	4294      	cmp	r4, r2
 8000ce8:	4180      	sbcs	r0, r0
 8000cea:	4240      	negs	r0, r0
 8000cec:	181b      	adds	r3, r3, r0
 8000cee:	021a      	lsls	r2, r3, #8
 8000cf0:	d53e      	bpl.n	8000d70 <__aeabi_dmul+0x4b8>
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	2700      	movs	r7, #0
 8000cf6:	2600      	movs	r6, #0
 8000cf8:	e649      	b.n	800098e <__aeabi_dmul+0xd6>
 8000cfa:	2780      	movs	r7, #128	; 0x80
 8000cfc:	9b01      	ldr	r3, [sp, #4]
 8000cfe:	033f      	lsls	r7, r7, #12
 8000d00:	431f      	orrs	r7, r3
 8000d02:	033f      	lsls	r7, r7, #12
 8000d04:	0b3f      	lsrs	r7, r7, #12
 8000d06:	9400      	str	r4, [sp, #0]
 8000d08:	4b21      	ldr	r3, [pc, #132]	; (8000d90 <__aeabi_dmul+0x4d8>)
 8000d0a:	e640      	b.n	800098e <__aeabi_dmul+0xd6>
 8000d0c:	0003      	movs	r3, r0
 8000d0e:	465a      	mov	r2, fp
 8000d10:	3b28      	subs	r3, #40	; 0x28
 8000d12:	409a      	lsls	r2, r3
 8000d14:	2600      	movs	r6, #0
 8000d16:	9201      	str	r2, [sp, #4]
 8000d18:	e66d      	b.n	80009f6 <__aeabi_dmul+0x13e>
 8000d1a:	4658      	mov	r0, fp
 8000d1c:	f000 f914 	bl	8000f48 <__clzsi2>
 8000d20:	3020      	adds	r0, #32
 8000d22:	e657      	b.n	80009d4 <__aeabi_dmul+0x11c>
 8000d24:	0003      	movs	r3, r0
 8000d26:	4652      	mov	r2, sl
 8000d28:	3b28      	subs	r3, #40	; 0x28
 8000d2a:	409a      	lsls	r2, r3
 8000d2c:	0013      	movs	r3, r2
 8000d2e:	2200      	movs	r2, #0
 8000d30:	e693      	b.n	8000a5a <__aeabi_dmul+0x1a2>
 8000d32:	4650      	mov	r0, sl
 8000d34:	f000 f908 	bl	8000f48 <__clzsi2>
 8000d38:	3020      	adds	r0, #32
 8000d3a:	e67b      	b.n	8000a34 <__aeabi_dmul+0x17c>
 8000d3c:	46ca      	mov	sl, r9
 8000d3e:	e750      	b.n	8000be2 <__aeabi_dmul+0x32a>
 8000d40:	201f      	movs	r0, #31
 8000d42:	001e      	movs	r6, r3
 8000d44:	4240      	negs	r0, r0
 8000d46:	1b04      	subs	r4, r0, r4
 8000d48:	40e6      	lsrs	r6, r4
 8000d4a:	2d20      	cmp	r5, #32
 8000d4c:	d003      	beq.n	8000d56 <__aeabi_dmul+0x49e>
 8000d4e:	4c12      	ldr	r4, [pc, #72]	; (8000d98 <__aeabi_dmul+0x4e0>)
 8000d50:	4454      	add	r4, sl
 8000d52:	40a3      	lsls	r3, r4
 8000d54:	431a      	orrs	r2, r3
 8000d56:	1e50      	subs	r0, r2, #1
 8000d58:	4182      	sbcs	r2, r0
 8000d5a:	4332      	orrs	r2, r6
 8000d5c:	2607      	movs	r6, #7
 8000d5e:	2700      	movs	r7, #0
 8000d60:	4016      	ands	r6, r2
 8000d62:	d009      	beq.n	8000d78 <__aeabi_dmul+0x4c0>
 8000d64:	200f      	movs	r0, #15
 8000d66:	2300      	movs	r3, #0
 8000d68:	4010      	ands	r0, r2
 8000d6a:	0014      	movs	r4, r2
 8000d6c:	2804      	cmp	r0, #4
 8000d6e:	d1b9      	bne.n	8000ce4 <__aeabi_dmul+0x42c>
 8000d70:	0022      	movs	r2, r4
 8000d72:	075e      	lsls	r6, r3, #29
 8000d74:	025b      	lsls	r3, r3, #9
 8000d76:	0b1f      	lsrs	r7, r3, #12
 8000d78:	08d2      	lsrs	r2, r2, #3
 8000d7a:	4316      	orrs	r6, r2
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	e606      	b.n	800098e <__aeabi_dmul+0xd6>
 8000d80:	2780      	movs	r7, #128	; 0x80
 8000d82:	033f      	lsls	r7, r7, #12
 8000d84:	431f      	orrs	r7, r3
 8000d86:	033f      	lsls	r7, r7, #12
 8000d88:	0b3f      	lsrs	r7, r7, #12
 8000d8a:	0016      	movs	r6, r2
 8000d8c:	4b00      	ldr	r3, [pc, #0]	; (8000d90 <__aeabi_dmul+0x4d8>)
 8000d8e:	e5fe      	b.n	800098e <__aeabi_dmul+0xd6>
 8000d90:	000007ff 	.word	0x000007ff
 8000d94:	0000041e 	.word	0x0000041e
 8000d98:	0000043e 	.word	0x0000043e

08000d9c <__aeabi_f2d>:
 8000d9c:	0041      	lsls	r1, r0, #1
 8000d9e:	0e09      	lsrs	r1, r1, #24
 8000da0:	1c4b      	adds	r3, r1, #1
 8000da2:	b570      	push	{r4, r5, r6, lr}
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	0246      	lsls	r6, r0, #9
 8000da8:	0a75      	lsrs	r5, r6, #9
 8000daa:	0fc4      	lsrs	r4, r0, #31
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	dd14      	ble.n	8000dda <__aeabi_f2d+0x3e>
 8000db0:	23e0      	movs	r3, #224	; 0xe0
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	076d      	lsls	r5, r5, #29
 8000db6:	0b36      	lsrs	r6, r6, #12
 8000db8:	18cb      	adds	r3, r1, r3
 8000dba:	2100      	movs	r1, #0
 8000dbc:	0d0a      	lsrs	r2, r1, #20
 8000dbe:	0028      	movs	r0, r5
 8000dc0:	0512      	lsls	r2, r2, #20
 8000dc2:	4d1c      	ldr	r5, [pc, #112]	; (8000e34 <__aeabi_f2d+0x98>)
 8000dc4:	4332      	orrs	r2, r6
 8000dc6:	055b      	lsls	r3, r3, #21
 8000dc8:	402a      	ands	r2, r5
 8000dca:	085b      	lsrs	r3, r3, #1
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	07e4      	lsls	r4, r4, #31
 8000dd2:	085b      	lsrs	r3, r3, #1
 8000dd4:	4323      	orrs	r3, r4
 8000dd6:	0019      	movs	r1, r3
 8000dd8:	bd70      	pop	{r4, r5, r6, pc}
 8000dda:	2900      	cmp	r1, #0
 8000ddc:	d114      	bne.n	8000e08 <__aeabi_f2d+0x6c>
 8000dde:	2d00      	cmp	r5, #0
 8000de0:	d01e      	beq.n	8000e20 <__aeabi_f2d+0x84>
 8000de2:	0028      	movs	r0, r5
 8000de4:	f000 f8b0 	bl	8000f48 <__clzsi2>
 8000de8:	280a      	cmp	r0, #10
 8000dea:	dc1c      	bgt.n	8000e26 <__aeabi_f2d+0x8a>
 8000dec:	230b      	movs	r3, #11
 8000dee:	002a      	movs	r2, r5
 8000df0:	1a1b      	subs	r3, r3, r0
 8000df2:	40da      	lsrs	r2, r3
 8000df4:	0003      	movs	r3, r0
 8000df6:	3315      	adds	r3, #21
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <__aeabi_f2d+0x9c>)
 8000dfc:	0312      	lsls	r2, r2, #12
 8000dfe:	1a1b      	subs	r3, r3, r0
 8000e00:	055b      	lsls	r3, r3, #21
 8000e02:	0b16      	lsrs	r6, r2, #12
 8000e04:	0d5b      	lsrs	r3, r3, #21
 8000e06:	e7d8      	b.n	8000dba <__aeabi_f2d+0x1e>
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d006      	beq.n	8000e1a <__aeabi_f2d+0x7e>
 8000e0c:	0b32      	lsrs	r2, r6, #12
 8000e0e:	2680      	movs	r6, #128	; 0x80
 8000e10:	0336      	lsls	r6, r6, #12
 8000e12:	076d      	lsls	r5, r5, #29
 8000e14:	4316      	orrs	r6, r2
 8000e16:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <__aeabi_f2d+0xa0>)
 8000e18:	e7cf      	b.n	8000dba <__aeabi_f2d+0x1e>
 8000e1a:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <__aeabi_f2d+0xa0>)
 8000e1c:	2600      	movs	r6, #0
 8000e1e:	e7cc      	b.n	8000dba <__aeabi_f2d+0x1e>
 8000e20:	2300      	movs	r3, #0
 8000e22:	2600      	movs	r6, #0
 8000e24:	e7c9      	b.n	8000dba <__aeabi_f2d+0x1e>
 8000e26:	0003      	movs	r3, r0
 8000e28:	002a      	movs	r2, r5
 8000e2a:	3b0b      	subs	r3, #11
 8000e2c:	409a      	lsls	r2, r3
 8000e2e:	2500      	movs	r5, #0
 8000e30:	e7e3      	b.n	8000dfa <__aeabi_f2d+0x5e>
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	800fffff 	.word	0x800fffff
 8000e38:	00000389 	.word	0x00000389
 8000e3c:	000007ff 	.word	0x000007ff

08000e40 <__aeabi_d2f>:
 8000e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e42:	004c      	lsls	r4, r1, #1
 8000e44:	0d64      	lsrs	r4, r4, #21
 8000e46:	030b      	lsls	r3, r1, #12
 8000e48:	1c62      	adds	r2, r4, #1
 8000e4a:	0a5b      	lsrs	r3, r3, #9
 8000e4c:	0f46      	lsrs	r6, r0, #29
 8000e4e:	0552      	lsls	r2, r2, #21
 8000e50:	0fc9      	lsrs	r1, r1, #31
 8000e52:	431e      	orrs	r6, r3
 8000e54:	00c5      	lsls	r5, r0, #3
 8000e56:	0d52      	lsrs	r2, r2, #21
 8000e58:	2a01      	cmp	r2, #1
 8000e5a:	dd29      	ble.n	8000eb0 <__aeabi_d2f+0x70>
 8000e5c:	4b37      	ldr	r3, [pc, #220]	; (8000f3c <__aeabi_d2f+0xfc>)
 8000e5e:	18e7      	adds	r7, r4, r3
 8000e60:	2ffe      	cmp	r7, #254	; 0xfe
 8000e62:	dc1c      	bgt.n	8000e9e <__aeabi_d2f+0x5e>
 8000e64:	2f00      	cmp	r7, #0
 8000e66:	dd3b      	ble.n	8000ee0 <__aeabi_d2f+0xa0>
 8000e68:	0180      	lsls	r0, r0, #6
 8000e6a:	1e43      	subs	r3, r0, #1
 8000e6c:	4198      	sbcs	r0, r3
 8000e6e:	2207      	movs	r2, #7
 8000e70:	00f3      	lsls	r3, r6, #3
 8000e72:	0f6d      	lsrs	r5, r5, #29
 8000e74:	4303      	orrs	r3, r0
 8000e76:	432b      	orrs	r3, r5
 8000e78:	401a      	ands	r2, r3
 8000e7a:	2a00      	cmp	r2, #0
 8000e7c:	d004      	beq.n	8000e88 <__aeabi_d2f+0x48>
 8000e7e:	220f      	movs	r2, #15
 8000e80:	401a      	ands	r2, r3
 8000e82:	2a04      	cmp	r2, #4
 8000e84:	d000      	beq.n	8000e88 <__aeabi_d2f+0x48>
 8000e86:	3304      	adds	r3, #4
 8000e88:	2280      	movs	r2, #128	; 0x80
 8000e8a:	04d2      	lsls	r2, r2, #19
 8000e8c:	401a      	ands	r2, r3
 8000e8e:	d024      	beq.n	8000eda <__aeabi_d2f+0x9a>
 8000e90:	3701      	adds	r7, #1
 8000e92:	b2fa      	uxtb	r2, r7
 8000e94:	2fff      	cmp	r7, #255	; 0xff
 8000e96:	d002      	beq.n	8000e9e <__aeabi_d2f+0x5e>
 8000e98:	019b      	lsls	r3, r3, #6
 8000e9a:	0a58      	lsrs	r0, r3, #9
 8000e9c:	e001      	b.n	8000ea2 <__aeabi_d2f+0x62>
 8000e9e:	22ff      	movs	r2, #255	; 0xff
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	0240      	lsls	r0, r0, #9
 8000ea4:	05d2      	lsls	r2, r2, #23
 8000ea6:	0a40      	lsrs	r0, r0, #9
 8000ea8:	07c9      	lsls	r1, r1, #31
 8000eaa:	4310      	orrs	r0, r2
 8000eac:	4308      	orrs	r0, r1
 8000eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eb0:	4335      	orrs	r5, r6
 8000eb2:	2c00      	cmp	r4, #0
 8000eb4:	d104      	bne.n	8000ec0 <__aeabi_d2f+0x80>
 8000eb6:	2d00      	cmp	r5, #0
 8000eb8:	d10a      	bne.n	8000ed0 <__aeabi_d2f+0x90>
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	e7f0      	b.n	8000ea2 <__aeabi_d2f+0x62>
 8000ec0:	2d00      	cmp	r5, #0
 8000ec2:	d0ec      	beq.n	8000e9e <__aeabi_d2f+0x5e>
 8000ec4:	2080      	movs	r0, #128	; 0x80
 8000ec6:	03c0      	lsls	r0, r0, #15
 8000ec8:	4330      	orrs	r0, r6
 8000eca:	22ff      	movs	r2, #255	; 0xff
 8000ecc:	e7e9      	b.n	8000ea2 <__aeabi_d2f+0x62>
 8000ece:	2400      	movs	r4, #0
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	025b      	lsls	r3, r3, #9
 8000ed4:	0a58      	lsrs	r0, r3, #9
 8000ed6:	b2e2      	uxtb	r2, r4
 8000ed8:	e7e3      	b.n	8000ea2 <__aeabi_d2f+0x62>
 8000eda:	08db      	lsrs	r3, r3, #3
 8000edc:	003c      	movs	r4, r7
 8000ede:	e7f8      	b.n	8000ed2 <__aeabi_d2f+0x92>
 8000ee0:	003b      	movs	r3, r7
 8000ee2:	3317      	adds	r3, #23
 8000ee4:	dbf3      	blt.n	8000ece <__aeabi_d2f+0x8e>
 8000ee6:	2380      	movs	r3, #128	; 0x80
 8000ee8:	041b      	lsls	r3, r3, #16
 8000eea:	4333      	orrs	r3, r6
 8000eec:	261e      	movs	r6, #30
 8000eee:	1bf6      	subs	r6, r6, r7
 8000ef0:	2e1f      	cmp	r6, #31
 8000ef2:	dd14      	ble.n	8000f1e <__aeabi_d2f+0xde>
 8000ef4:	2202      	movs	r2, #2
 8000ef6:	4252      	negs	r2, r2
 8000ef8:	1bd7      	subs	r7, r2, r7
 8000efa:	001a      	movs	r2, r3
 8000efc:	40fa      	lsrs	r2, r7
 8000efe:	0017      	movs	r7, r2
 8000f00:	2e20      	cmp	r6, #32
 8000f02:	d004      	beq.n	8000f0e <__aeabi_d2f+0xce>
 8000f04:	4a0e      	ldr	r2, [pc, #56]	; (8000f40 <__aeabi_d2f+0x100>)
 8000f06:	4694      	mov	ip, r2
 8000f08:	4464      	add	r4, ip
 8000f0a:	40a3      	lsls	r3, r4
 8000f0c:	431d      	orrs	r5, r3
 8000f0e:	002b      	movs	r3, r5
 8000f10:	1e5d      	subs	r5, r3, #1
 8000f12:	41ab      	sbcs	r3, r5
 8000f14:	2207      	movs	r2, #7
 8000f16:	433b      	orrs	r3, r7
 8000f18:	401a      	ands	r2, r3
 8000f1a:	2700      	movs	r7, #0
 8000f1c:	e7ad      	b.n	8000e7a <__aeabi_d2f+0x3a>
 8000f1e:	4a09      	ldr	r2, [pc, #36]	; (8000f44 <__aeabi_d2f+0x104>)
 8000f20:	0028      	movs	r0, r5
 8000f22:	18a2      	adds	r2, r4, r2
 8000f24:	4095      	lsls	r5, r2
 8000f26:	4093      	lsls	r3, r2
 8000f28:	1e6c      	subs	r4, r5, #1
 8000f2a:	41a5      	sbcs	r5, r4
 8000f2c:	40f0      	lsrs	r0, r6
 8000f2e:	2207      	movs	r2, #7
 8000f30:	432b      	orrs	r3, r5
 8000f32:	4303      	orrs	r3, r0
 8000f34:	401a      	ands	r2, r3
 8000f36:	2700      	movs	r7, #0
 8000f38:	e79f      	b.n	8000e7a <__aeabi_d2f+0x3a>
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	fffffc80 	.word	0xfffffc80
 8000f40:	fffffca2 	.word	0xfffffca2
 8000f44:	fffffc82 	.word	0xfffffc82

08000f48 <__clzsi2>:
 8000f48:	211c      	movs	r1, #28
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	041b      	lsls	r3, r3, #16
 8000f4e:	4298      	cmp	r0, r3
 8000f50:	d301      	bcc.n	8000f56 <__clzsi2+0xe>
 8000f52:	0c00      	lsrs	r0, r0, #16
 8000f54:	3910      	subs	r1, #16
 8000f56:	0a1b      	lsrs	r3, r3, #8
 8000f58:	4298      	cmp	r0, r3
 8000f5a:	d301      	bcc.n	8000f60 <__clzsi2+0x18>
 8000f5c:	0a00      	lsrs	r0, r0, #8
 8000f5e:	3908      	subs	r1, #8
 8000f60:	091b      	lsrs	r3, r3, #4
 8000f62:	4298      	cmp	r0, r3
 8000f64:	d301      	bcc.n	8000f6a <__clzsi2+0x22>
 8000f66:	0900      	lsrs	r0, r0, #4
 8000f68:	3904      	subs	r1, #4
 8000f6a:	a202      	add	r2, pc, #8	; (adr r2, 8000f74 <__clzsi2+0x2c>)
 8000f6c:	5c10      	ldrb	r0, [r2, r0]
 8000f6e:	1840      	adds	r0, r0, r1
 8000f70:	4770      	bx	lr
 8000f72:	46c0      	nop			; (mov r8, r8)
 8000f74:	02020304 	.word	0x02020304
 8000f78:	01010101 	.word	0x01010101
	...

08000f84 <writeRegister>:
* @address: 8-bit address of register
* @value  : 8-bit value of corresponding register
* Since the register values to be written are 8-bit, there is no need to multiple writing
*/
void writeRegister(uint8_t address,uint8_t value)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	0002      	movs	r2, r0
 8000f8c:	1dfb      	adds	r3, r7, #7
 8000f8e:	701a      	strb	r2, [r3, #0]
 8000f90:	1dbb      	adds	r3, r7, #6
 8000f92:	1c0a      	adds	r2, r1, #0
 8000f94:	701a      	strb	r2, [r3, #0]
		if (address > 63)
 8000f96:	1dfb      	adds	r3, r7, #7
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	2b3f      	cmp	r3, #63	; 0x3f
 8000f9c:	d902      	bls.n	8000fa4 <writeRegister+0x20>
		address = 63;
 8000f9e:	1dfb      	adds	r3, r7, #7
 8000fa0:	223f      	movs	r2, #63	; 0x3f
 8000fa2:	701a      	strb	r2, [r3, #0]
	
	// Setting R/W = 0, i.e.: Write Mode
    address &= ~(0x80);
 8000fa4:	1dfb      	adds	r3, r7, #7
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	227f      	movs	r2, #127	; 0x7f
 8000faa:	4013      	ands	r3, r2
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	1dfb      	adds	r3, r7, #7
 8000fb0:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_RESET);
 8000fb2:	23a0      	movs	r3, #160	; 0xa0
 8000fb4:	05db      	lsls	r3, r3, #23
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2110      	movs	r1, #16
 8000fba:	0018      	movs	r0, r3
 8000fbc:	f001 f808 	bl	8001fd0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPIhandler,&address,1,100);
 8000fc0:	1df9      	adds	r1, r7, #7
 8000fc2:	480b      	ldr	r0, [pc, #44]	; (8000ff0 <writeRegister+0x6c>)
 8000fc4:	2364      	movs	r3, #100	; 0x64
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	f001 fda7 	bl	8002b1a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&SPIhandler,&value,1,100);
 8000fcc:	1db9      	adds	r1, r7, #6
 8000fce:	4808      	ldr	r0, [pc, #32]	; (8000ff0 <writeRegister+0x6c>)
 8000fd0:	2364      	movs	r3, #100	; 0x64
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	f001 fda1 	bl	8002b1a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 8000fd8:	23a0      	movs	r3, #160	; 0xa0
 8000fda:	05db      	lsls	r3, r3, #23
 8000fdc:	2201      	movs	r2, #1
 8000fde:	2110      	movs	r1, #16
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	f000 fff5 	bl	8001fd0 <HAL_GPIO_WritePin>
	

}
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	b002      	add	sp, #8
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	46c0      	nop			; (mov r8, r8)
 8000ff0:	2000005c 	.word	0x2000005c

08000ff4 <readRegister>:
* @retval value  : array of 8-bit values of corresponding register
* @num		: number of bytes to be written
*/

void readRegister(uint8_t address,uint8_t * value, uint8_t num)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6039      	str	r1, [r7, #0]
 8000ffc:	0011      	movs	r1, r2
 8000ffe:	1dfb      	adds	r3, r7, #7
 8001000:	1c02      	adds	r2, r0, #0
 8001002:	701a      	strb	r2, [r3, #0]
 8001004:	1dbb      	adds	r3, r7, #6
 8001006:	1c0a      	adds	r2, r1, #0
 8001008:	701a      	strb	r2, [r3, #0]
		if (address > 63)
 800100a:	1dfb      	adds	r3, r7, #7
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	2b3f      	cmp	r3, #63	; 0x3f
 8001010:	d902      	bls.n	8001018 <readRegister+0x24>
		address = 63;
 8001012:	1dfb      	adds	r3, r7, #7
 8001014:	223f      	movs	r2, #63	; 0x3f
 8001016:	701a      	strb	r2, [r3, #0]
		
		// Multiple Byte Read Settings
		if (num > 1)
 8001018:	1dbb      	adds	r3, r7, #6
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d907      	bls.n	8001030 <readRegister+0x3c>
		address |= 0x40;
 8001020:	1dfb      	adds	r3, r7, #7
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2240      	movs	r2, #64	; 0x40
 8001026:	4313      	orrs	r3, r2
 8001028:	b2da      	uxtb	r2, r3
 800102a:	1dfb      	adds	r3, r7, #7
 800102c:	701a      	strb	r2, [r3, #0]
 800102e:	e006      	b.n	800103e <readRegister+0x4a>
		else	
		address &= ~(0x40);
 8001030:	1dfb      	adds	r3, r7, #7
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2240      	movs	r2, #64	; 0x40
 8001036:	4393      	bics	r3, r2
 8001038:	b2da      	uxtb	r2, r3
 800103a:	1dfb      	adds	r3, r7, #7
 800103c:	701a      	strb	r2, [r3, #0]
		
		// Setting R/W = 1, i.e.: Read Mode
    address |= (0x80);		
 800103e:	1dfb      	adds	r3, r7, #7
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2280      	movs	r2, #128	; 0x80
 8001044:	4252      	negs	r2, r2
 8001046:	4313      	orrs	r3, r2
 8001048:	b2da      	uxtb	r2, r3
 800104a:	1dfb      	adds	r3, r7, #7
 800104c:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_RESET);
 800104e:	23a0      	movs	r3, #160	; 0xa0
 8001050:	05db      	lsls	r3, r3, #23
 8001052:	2200      	movs	r2, #0
 8001054:	2110      	movs	r1, #16
 8001056:	0018      	movs	r0, r3
 8001058:	f000 ffba 	bl	8001fd0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPIhandler,&address,1,100);
 800105c:	1df9      	adds	r1, r7, #7
 800105e:	480c      	ldr	r0, [pc, #48]	; (8001090 <readRegister+0x9c>)
 8001060:	2364      	movs	r3, #100	; 0x64
 8001062:	2201      	movs	r2, #1
 8001064:	f001 fd59 	bl	8002b1a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&SPIhandler,value,num,100);
 8001068:	1dbb      	adds	r3, r7, #6
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	b29a      	uxth	r2, r3
 800106e:	6839      	ldr	r1, [r7, #0]
 8001070:	4807      	ldr	r0, [pc, #28]	; (8001090 <readRegister+0x9c>)
 8001072:	2364      	movs	r3, #100	; 0x64
 8001074:	f001 fea0 	bl	8002db8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 8001078:	23a0      	movs	r3, #160	; 0xa0
 800107a:	05db      	lsls	r3, r3, #23
 800107c:	2201      	movs	r2, #1
 800107e:	2110      	movs	r1, #16
 8001080:	0018      	movs	r0, r3
 8001082:	f000 ffa5 	bl	8001fd0 <HAL_GPIO_WritePin>
	
	
}
 8001086:	46c0      	nop			; (mov r8, r8)
 8001088:	46bd      	mov	sp, r7
 800108a:	b002      	add	sp, #8
 800108c:	bd80      	pop	{r7, pc}
 800108e:	46c0      	nop			; (mov r8, r8)
 8001090:	2000005c 	.word	0x2000005c

08001094 <adxlBW>:
						10 		|  				100
						11 		|  				200
						12 		|  				400
			*/
void adxlBW(ADXL_InitTypeDef * adxl)
		{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
		uint8_t bwreg=0;
 800109c:	210f      	movs	r1, #15
 800109e:	187b      	adds	r3, r7, r1
 80010a0:	2200      	movs	r2, #0
 80010a2:	701a      	strb	r2, [r3, #0]
		writeRegister(BW_RATE,bwreg);
 80010a4:	187b      	adds	r3, r7, r1
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	0019      	movs	r1, r3
 80010aa:	202c      	movs	r0, #44	; 0x2c
 80010ac:	f7ff ff6a 	bl	8000f84 <writeRegister>
		if (adxl->LPMode == LPMODE_LOWPOWER) 
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	789b      	ldrb	r3, [r3, #2]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d125      	bne.n	8001104 <adxlBW+0x70>
						{
						// Low power mode
						bwreg |= (1 << 4);
 80010b8:	220f      	movs	r2, #15
 80010ba:	18bb      	adds	r3, r7, r2
 80010bc:	18ba      	adds	r2, r7, r2
 80010be:	7812      	ldrb	r2, [r2, #0]
 80010c0:	2110      	movs	r1, #16
 80010c2:	430a      	orrs	r2, r1
 80010c4:	701a      	strb	r2, [r3, #0]
						if ( ((adxl->Rate) <7) && ((adxl->Rate)>12) ) bwreg += 7;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	78db      	ldrb	r3, [r3, #3]
 80010ca:	2b06      	cmp	r3, #6
 80010cc:	d80a      	bhi.n	80010e4 <adxlBW+0x50>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	78db      	ldrb	r3, [r3, #3]
 80010d2:	2b0c      	cmp	r3, #12
 80010d4:	d906      	bls.n	80010e4 <adxlBW+0x50>
 80010d6:	220f      	movs	r2, #15
 80010d8:	18bb      	adds	r3, r7, r2
 80010da:	18ba      	adds	r2, r7, r2
 80010dc:	7812      	ldrb	r2, [r2, #0]
 80010de:	3207      	adds	r2, #7
 80010e0:	701a      	strb	r2, [r3, #0]
 80010e2:	e007      	b.n	80010f4 <adxlBW+0x60>
								else bwreg +=(adxl->Rate);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	78d9      	ldrb	r1, [r3, #3]
 80010e8:	220f      	movs	r2, #15
 80010ea:	18bb      	adds	r3, r7, r2
 80010ec:	18ba      	adds	r2, r7, r2
 80010ee:	7812      	ldrb	r2, [r2, #0]
 80010f0:	188a      	adds	r2, r1, r2
 80010f2:	701a      	strb	r2, [r3, #0]
						writeRegister(BW_RATE,bwreg);	
 80010f4:	230f      	movs	r3, #15
 80010f6:	18fb      	adds	r3, r7, r3
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	0019      	movs	r1, r3
 80010fc:	202c      	movs	r0, #44	; 0x2c
 80010fe:	f7ff ff41 	bl	8000f84 <writeRegister>
	
				if ( ((adxl->Rate) <6) && ((adxl->Rate)>15) ) bwreg += 6;
						else bwreg +=(adxl->Rate);
				writeRegister(BW_RATE,bwreg);	
				}
		}
 8001102:	e01d      	b.n	8001140 <adxlBW+0xac>
				if ( ((adxl->Rate) <6) && ((adxl->Rate)>15) ) bwreg += 6;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	78db      	ldrb	r3, [r3, #3]
 8001108:	2b05      	cmp	r3, #5
 800110a:	d80a      	bhi.n	8001122 <adxlBW+0x8e>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	78db      	ldrb	r3, [r3, #3]
 8001110:	2b0f      	cmp	r3, #15
 8001112:	d906      	bls.n	8001122 <adxlBW+0x8e>
 8001114:	220f      	movs	r2, #15
 8001116:	18bb      	adds	r3, r7, r2
 8001118:	18ba      	adds	r2, r7, r2
 800111a:	7812      	ldrb	r2, [r2, #0]
 800111c:	3206      	adds	r2, #6
 800111e:	701a      	strb	r2, [r3, #0]
 8001120:	e007      	b.n	8001132 <adxlBW+0x9e>
						else bwreg +=(adxl->Rate);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	78d9      	ldrb	r1, [r3, #3]
 8001126:	220f      	movs	r2, #15
 8001128:	18bb      	adds	r3, r7, r2
 800112a:	18ba      	adds	r2, r7, r2
 800112c:	7812      	ldrb	r2, [r2, #0]
 800112e:	188a      	adds	r2, r1, r2
 8001130:	701a      	strb	r2, [r3, #0]
				writeRegister(BW_RATE,bwreg);	
 8001132:	230f      	movs	r3, #15
 8001134:	18fb      	adds	r3, r7, r3
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	0019      	movs	r1, r3
 800113a:	202c      	movs	r0, #44	; 0x2c
 800113c:	f7ff ff22 	bl	8000f84 <writeRegister>
		}
 8001140:	46c0      	nop			; (mov r8, r8)
 8001142:	46bd      	mov	sp, r7
 8001144:	b004      	add	sp, #16
 8001146:	bd80      	pop	{r7, pc}

08001148 <adxlFormat>:
						3 		|  				+-16g
	 									
		*/

void adxlFormat(ADXL_InitTypeDef * adxl)
			{
 8001148:	b590      	push	{r4, r7, lr}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
			uint8_t formatreg=0;
 8001150:	240f      	movs	r4, #15
 8001152:	193b      	adds	r3, r7, r4
 8001154:	2200      	movs	r2, #0
 8001156:	701a      	strb	r2, [r3, #0]
			writeRegister(DATA_FORMAT,formatreg);
 8001158:	193b      	adds	r3, r7, r4
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	0019      	movs	r1, r3
 800115e:	2031      	movs	r0, #49	; 0x31
 8001160:	f7ff ff10 	bl	8000f84 <writeRegister>
			formatreg = (adxl->SPIMode << 6) | (adxl->IntMode << 5) | (adxl->Justify << 2) | (adxl->Resolution << 3);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	019b      	lsls	r3, r3, #6
 800116a:	b25a      	sxtb	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	785b      	ldrb	r3, [r3, #1]
 8001170:	015b      	lsls	r3, r3, #5
 8001172:	b25b      	sxtb	r3, r3
 8001174:	4313      	orrs	r3, r2
 8001176:	b25a      	sxtb	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	799b      	ldrb	r3, [r3, #6]
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	b25b      	sxtb	r3, r3
 8001180:	4313      	orrs	r3, r2
 8001182:	b25a      	sxtb	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	795b      	ldrb	r3, [r3, #5]
 8001188:	00db      	lsls	r3, r3, #3
 800118a:	b25b      	sxtb	r3, r3
 800118c:	4313      	orrs	r3, r2
 800118e:	b25a      	sxtb	r2, r3
 8001190:	193b      	adds	r3, r7, r4
 8001192:	701a      	strb	r2, [r3, #0]
			formatreg += (adxl -> Range);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	7919      	ldrb	r1, [r3, #4]
 8001198:	193b      	adds	r3, r7, r4
 800119a:	193a      	adds	r2, r7, r4
 800119c:	7812      	ldrb	r2, [r2, #0]
 800119e:	188a      	adds	r2, r1, r2
 80011a0:	701a      	strb	r2, [r3, #0]
			writeRegister(DATA_FORMAT,formatreg);
 80011a2:	193b      	adds	r3, r7, r4
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	0019      	movs	r1, r3
 80011a8:	2031      	movs	r0, #49	; 0x31
 80011aa:	f7ff feeb 	bl	8000f84 <writeRegister>
			}
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	46bd      	mov	sp, r7
 80011b2:	b005      	add	sp, #20
 80011b4:	bd90      	pop	{r4, r7, pc}
	...

080011b8 <ADXL_Init>:

// Public Functions

// Initializes the ADXL unit
adxlStatus ADXL_Init(ADXL_InitTypeDef * adxl, uint8_t * id)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
	delay_init(16);
 80011c2:	2010      	movs	r0, #16
 80011c4:	f000 f902 	bl	80013cc <delay_init>
	// CS is active low. Here we deselect the chip. In each function the CS signal is asserted individually
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 80011c8:	23a0      	movs	r3, #160	; 0xa0
 80011ca:	05db      	lsls	r3, r3, #23
 80011cc:	2201      	movs	r2, #1
 80011ce:	2110      	movs	r1, #16
 80011d0:	0018      	movs	r0, r3
 80011d2:	f000 fefd 	bl	8001fd0 <HAL_GPIO_WritePin>
	// Unknown delay should apply
	delay_us(10);
 80011d6:	200a      	movs	r0, #10
 80011d8:	f000 f91e 	bl	8001418 <delay_us>
	// The Device Address register is constant, i.e. = 0xE5
	readRegister(DEVID, id,1);
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	2201      	movs	r2, #1
 80011e0:	0019      	movs	r1, r3
 80011e2:	2000      	movs	r0, #0
 80011e4:	f7ff ff06 	bl	8000ff4 <readRegister>
	delay_us(10);
 80011e8:	200a      	movs	r0, #10
 80011ea:	f000 f915 	bl	8001418 <delay_us>

	// Init. of BW_RATE and DATAFORMAT registers
	adxlBW(adxl);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	0018      	movs	r0, r3
 80011f2:	f7ff ff4f 	bl	8001094 <adxlBW>
	adxlFormat(adxl);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	0018      	movs	r0, r3
 80011fa:	f7ff ffa5 	bl	8001148 <adxlFormat>
	
	// Settings gains 
	if (adxl->Resolution == RESOLUTION_10BIT)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	795b      	ldrb	r3, [r3, #5]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d13d      	bne.n	8001282 <ADXL_Init+0xca>
			{
			switch (adxl->Range) {
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	791b      	ldrb	r3, [r3, #4]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d014      	beq.n	8001238 <ADXL_Init+0x80>
 800120e:	dc02      	bgt.n	8001216 <ADXL_Init+0x5e>
 8001210:	2b00      	cmp	r3, #0
 8001212:	d005      	beq.n	8001220 <ADXL_Init+0x68>
 8001214:	e040      	b.n	8001298 <ADXL_Init+0xe0>
 8001216:	2b02      	cmp	r3, #2
 8001218:	d01a      	beq.n	8001250 <ADXL_Init+0x98>
 800121a:	2b03      	cmp	r3, #3
 800121c:	d024      	beq.n	8001268 <ADXL_Init+0xb0>
 800121e:	e03b      	b.n	8001298 <ADXL_Init+0xe0>
							case RANGE_2G:
								GAINX = GAINY = GAINZ = 1/255.0f;
 8001220:	4b3c      	ldr	r3, [pc, #240]	; (8001314 <ADXL_Init+0x15c>)
 8001222:	4a3d      	ldr	r2, [pc, #244]	; (8001318 <ADXL_Init+0x160>)
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	4b3b      	ldr	r3, [pc, #236]	; (8001314 <ADXL_Init+0x15c>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	4b3c      	ldr	r3, [pc, #240]	; (800131c <ADXL_Init+0x164>)
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	4b3b      	ldr	r3, [pc, #236]	; (800131c <ADXL_Init+0x164>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	4b3b      	ldr	r3, [pc, #236]	; (8001320 <ADXL_Init+0x168>)
 8001234:	601a      	str	r2, [r3, #0]
								break;
 8001236:	e02f      	b.n	8001298 <ADXL_Init+0xe0>
							case RANGE_4G:
								GAINX = GAINY = GAINZ = 1/127.0f;
 8001238:	4b36      	ldr	r3, [pc, #216]	; (8001314 <ADXL_Init+0x15c>)
 800123a:	4a3a      	ldr	r2, [pc, #232]	; (8001324 <ADXL_Init+0x16c>)
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	4b35      	ldr	r3, [pc, #212]	; (8001314 <ADXL_Init+0x15c>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	4b36      	ldr	r3, [pc, #216]	; (800131c <ADXL_Init+0x164>)
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	4b35      	ldr	r3, [pc, #212]	; (800131c <ADXL_Init+0x164>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	4b35      	ldr	r3, [pc, #212]	; (8001320 <ADXL_Init+0x168>)
 800124c:	601a      	str	r2, [r3, #0]
								break;
 800124e:	e023      	b.n	8001298 <ADXL_Init+0xe0>
							case RANGE_8G:
								GAINX = GAINY = GAINZ = 1/63.0f;
 8001250:	4b30      	ldr	r3, [pc, #192]	; (8001314 <ADXL_Init+0x15c>)
 8001252:	4a35      	ldr	r2, [pc, #212]	; (8001328 <ADXL_Init+0x170>)
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	4b2f      	ldr	r3, [pc, #188]	; (8001314 <ADXL_Init+0x15c>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	4b30      	ldr	r3, [pc, #192]	; (800131c <ADXL_Init+0x164>)
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	4b2f      	ldr	r3, [pc, #188]	; (800131c <ADXL_Init+0x164>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	4b2f      	ldr	r3, [pc, #188]	; (8001320 <ADXL_Init+0x168>)
 8001264:	601a      	str	r2, [r3, #0]
								break;
 8001266:	e017      	b.n	8001298 <ADXL_Init+0xe0>
							case RANGE_16G:
								GAINX = GAINY = GAINZ = 1/31.0f;
 8001268:	4b2a      	ldr	r3, [pc, #168]	; (8001314 <ADXL_Init+0x15c>)
 800126a:	4a30      	ldr	r2, [pc, #192]	; (800132c <ADXL_Init+0x174>)
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	4b29      	ldr	r3, [pc, #164]	; (8001314 <ADXL_Init+0x15c>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	4b2a      	ldr	r3, [pc, #168]	; (800131c <ADXL_Init+0x164>)
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	4b29      	ldr	r3, [pc, #164]	; (800131c <ADXL_Init+0x164>)
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	4b29      	ldr	r3, [pc, #164]	; (8001320 <ADXL_Init+0x168>)
 800127c:	601a      	str	r2, [r3, #0]
								break;
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	e00a      	b.n	8001298 <ADXL_Init+0xe0>
								}
			} else 
			{
			GAINX = GAINY = GAINZ = 1/255.0f;
 8001282:	4b24      	ldr	r3, [pc, #144]	; (8001314 <ADXL_Init+0x15c>)
 8001284:	4a24      	ldr	r2, [pc, #144]	; (8001318 <ADXL_Init+0x160>)
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	4b22      	ldr	r3, [pc, #136]	; (8001314 <ADXL_Init+0x15c>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4b23      	ldr	r3, [pc, #140]	; (800131c <ADXL_Init+0x164>)
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	4b22      	ldr	r3, [pc, #136]	; (800131c <ADXL_Init+0x164>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4b22      	ldr	r3, [pc, #136]	; (8001320 <ADXL_Init+0x168>)
 8001296:	601a      	str	r2, [r3, #0]
			}
	// Setting AutoSleep and Link bits
			uint8_t reg;
			readRegister(POWER_CTL,&reg,1);
 8001298:	230f      	movs	r3, #15
 800129a:	18fb      	adds	r3, r7, r3
 800129c:	2201      	movs	r2, #1
 800129e:	0019      	movs	r1, r3
 80012a0:	202d      	movs	r0, #45	; 0x2d
 80012a2:	f7ff fea7 	bl	8000ff4 <readRegister>
			if ( (adxl->AutoSleep) == AUTOSLEEPON) reg |= (1 << 4); else reg &= ~(1 << 4);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	79db      	ldrb	r3, [r3, #7]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d108      	bne.n	80012c0 <ADXL_Init+0x108>
 80012ae:	210f      	movs	r1, #15
 80012b0:	187b      	adds	r3, r7, r1
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2210      	movs	r2, #16
 80012b6:	4313      	orrs	r3, r2
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	187b      	adds	r3, r7, r1
 80012bc:	701a      	strb	r2, [r3, #0]
 80012be:	e007      	b.n	80012d0 <ADXL_Init+0x118>
 80012c0:	210f      	movs	r1, #15
 80012c2:	187b      	adds	r3, r7, r1
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2210      	movs	r2, #16
 80012c8:	4393      	bics	r3, r2
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	187b      	adds	r3, r7, r1
 80012ce:	701a      	strb	r2, [r3, #0]
			if ( (adxl->LinkMode) == LINKMODEON) reg |= (1 << 5); else reg &= ~(1 << 5);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	7a1b      	ldrb	r3, [r3, #8]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d108      	bne.n	80012ea <ADXL_Init+0x132>
 80012d8:	210f      	movs	r1, #15
 80012da:	187b      	adds	r3, r7, r1
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2220      	movs	r2, #32
 80012e0:	4313      	orrs	r3, r2
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	187b      	adds	r3, r7, r1
 80012e6:	701a      	strb	r2, [r3, #0]
 80012e8:	e007      	b.n	80012fa <ADXL_Init+0x142>
 80012ea:	210f      	movs	r1, #15
 80012ec:	187b      	adds	r3, r7, r1
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2220      	movs	r2, #32
 80012f2:	4393      	bics	r3, r2
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	187b      	adds	r3, r7, r1
 80012f8:	701a      	strb	r2, [r3, #0]
			writeRegister(POWER_CTL,reg);
 80012fa:	230f      	movs	r3, #15
 80012fc:	18fb      	adds	r3, r7, r3
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	0019      	movs	r1, r3
 8001302:	202d      	movs	r0, #45	; 0x2d
 8001304:	f7ff fe3e 	bl	8000f84 <writeRegister>
			

			//writeRegister(INT_ENABLE, 0x80);

	return ADXL_OK;
 8001308:	2300      	movs	r3, #0
	
}
 800130a:	0018      	movs	r0, r3
 800130c:	46bd      	mov	sp, r7
 800130e:	b004      	add	sp, #16
 8001310:	bd80      	pop	{r7, pc}
 8001312:	46c0      	nop			; (mov r8, r8)
 8001314:	20000028 	.word	0x20000028
 8001318:	3b808081 	.word	0x3b808081
 800131c:	20000024 	.word	0x20000024
 8001320:	20000020 	.word	0x20000020
 8001324:	3c010204 	.word	0x3c010204
 8001328:	3c820821 	.word	0x3c820821
 800132c:	3d042108 	.word	0x3d042108

08001330 <ADXL_Measure>:
/** Starts Measure Mode
* @param: s = ON or OFF				

*/
void ADXL_Measure(Switch s)
		{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	0002      	movs	r2, r0
 8001338:	1dfb      	adds	r3, r7, #7
 800133a:	701a      	strb	r2, [r3, #0]
			uint8_t reg;
			readRegister(POWER_CTL,&reg,1);
 800133c:	230f      	movs	r3, #15
 800133e:	18fb      	adds	r3, r7, r3
 8001340:	2201      	movs	r2, #1
 8001342:	0019      	movs	r1, r3
 8001344:	202d      	movs	r0, #45	; 0x2d
 8001346:	f7ff fe55 	bl	8000ff4 <readRegister>
			switch (s) {
 800134a:	1dfb      	adds	r3, r7, #7
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d002      	beq.n	8001358 <ADXL_Measure+0x28>
 8001352:	2b01      	cmp	r3, #1
 8001354:	d016      	beq.n	8001384 <ADXL_Measure+0x54>
				case OFF:
				reg &= ~(1<<3);
				writeRegister(POWER_CTL,reg);
				break;				
				}
		}
 8001356:	e024      	b.n	80013a2 <ADXL_Measure+0x72>
				reg &= ~(1<<2);
 8001358:	210f      	movs	r1, #15
 800135a:	187b      	adds	r3, r7, r1
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2204      	movs	r2, #4
 8001360:	4393      	bics	r3, r2
 8001362:	b2da      	uxtb	r2, r3
 8001364:	187b      	adds	r3, r7, r1
 8001366:	701a      	strb	r2, [r3, #0]
				reg |= (1<<3);
 8001368:	187b      	adds	r3, r7, r1
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2208      	movs	r2, #8
 800136e:	4313      	orrs	r3, r2
 8001370:	b2da      	uxtb	r2, r3
 8001372:	187b      	adds	r3, r7, r1
 8001374:	701a      	strb	r2, [r3, #0]
				writeRegister(POWER_CTL,reg);
 8001376:	187b      	adds	r3, r7, r1
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	0019      	movs	r1, r3
 800137c:	202d      	movs	r0, #45	; 0x2d
 800137e:	f7ff fe01 	bl	8000f84 <writeRegister>
				break;
 8001382:	e00e      	b.n	80013a2 <ADXL_Measure+0x72>
				reg &= ~(1<<3);
 8001384:	210f      	movs	r1, #15
 8001386:	187b      	adds	r3, r7, r1
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2208      	movs	r2, #8
 800138c:	4393      	bics	r3, r2
 800138e:	b2da      	uxtb	r2, r3
 8001390:	187b      	adds	r3, r7, r1
 8001392:	701a      	strb	r2, [r3, #0]
				writeRegister(POWER_CTL,reg);
 8001394:	187b      	adds	r3, r7, r1
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	0019      	movs	r1, r3
 800139a:	202d      	movs	r0, #45	; 0x2d
 800139c:	f7ff fdf2 	bl	8000f84 <writeRegister>
				break;				
 80013a0:	46c0      	nop			; (mov r8, r8)
		}
 80013a2:	46c0      	nop			; (mov r8, r8)
 80013a4:	46bd      	mov	sp, r7
 80013a6:	b004      	add	sp, #16
 80013a8:	bd80      	pop	{r7, pc}

080013aa <ADXL_IntProto>:
* Put this function wherever you want to implement interrupt routines, e.g. EXTI_Callback
*/

void ADXL_IntProto(void)
	
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b082      	sub	sp, #8
 80013ae:	af00      	add	r7, sp, #0
			uint8_t reg=0;
 80013b0:	1dfb      	adds	r3, r7, #7
 80013b2:	2200      	movs	r2, #0
 80013b4:	701a      	strb	r2, [r3, #0]
			readRegister(INT_SOURCE,&reg,1);
 80013b6:	1dfb      	adds	r3, r7, #7
 80013b8:	2201      	movs	r2, #1
 80013ba:	0019      	movs	r1, r3
 80013bc:	2030      	movs	r0, #48	; 0x30
 80013be:	f7ff fe19 	bl	8000ff4 <readRegister>
	
}
 80013c2:	46c0      	nop			; (mov r8, r8)
 80013c4:	46bd      	mov	sp, r7
 80013c6:	b002      	add	sp, #8
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <delay_init>:
static uint16_t fac_ms=0;//ms延時倍乘數
//初始化延遲函式
//SYSTICK的時鐘固定為HCLK時鐘的1/8
//SYSCLK:系統時鐘
void delay_init(uint8_t SYSCLK)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	0002      	movs	r2, r0
 80013d4:	1dfb      	adds	r3, r7, #7
 80013d6:	701a      	strb	r2, [r3, #0]
	SysTick->CTRL&=0xfffffffb;//bit2清空,選擇外部時鐘  HCLK/8
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <delay_init+0x40>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	4b0b      	ldr	r3, [pc, #44]	; (800140c <delay_init+0x40>)
 80013de:	2104      	movs	r1, #4
 80013e0:	438a      	bics	r2, r1
 80013e2:	601a      	str	r2, [r3, #0]
	fac_us=SYSCLK/8;
 80013e4:	1dfb      	adds	r3, r7, #7
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	08db      	lsrs	r3, r3, #3
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	4b08      	ldr	r3, [pc, #32]	; (8001410 <delay_init+0x44>)
 80013ee:	701a      	strb	r2, [r3, #0]
	fac_ms=(uint16_t)fac_us*1000;
 80013f0:	4b07      	ldr	r3, [pc, #28]	; (8001410 <delay_init+0x44>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	22fa      	movs	r2, #250	; 0xfa
 80013f8:	0092      	lsls	r2, r2, #2
 80013fa:	4353      	muls	r3, r2
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	4b05      	ldr	r3, [pc, #20]	; (8001414 <delay_init+0x48>)
 8001400:	801a      	strh	r2, [r3, #0]
}
 8001402:	46c0      	nop			; (mov r8, r8)
 8001404:	46bd      	mov	sp, r7
 8001406:	b002      	add	sp, #8
 8001408:	bd80      	pop	{r7, pc}
 800140a:	46c0      	nop			; (mov r8, r8)
 800140c:	e000e010 	.word	0xe000e010
 8001410:	2000002c 	.word	0x2000002c
 8001414:	2000002e 	.word	0x2000002e

08001418 <delay_us>:


//延時nus
//nus為要延時的us數.
void delay_us(uint32_t nus)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	uint32_t temp;
	SysTick->LOAD=nus*fac_us; //時間載入
 8001420:	4b12      	ldr	r3, [pc, #72]	; (800146c <delay_us+0x54>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	0019      	movs	r1, r3
 8001426:	4b12      	ldr	r3, [pc, #72]	; (8001470 <delay_us+0x58>)
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	434a      	muls	r2, r1
 800142c:	605a      	str	r2, [r3, #4]
	SysTick->VAL=0x00;        //清空計數器
 800142e:	4b10      	ldr	r3, [pc, #64]	; (8001470 <delay_us+0x58>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk;      //開始倒數
 8001434:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <delay_us+0x58>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	4b0d      	ldr	r3, [pc, #52]	; (8001470 <delay_us+0x58>)
 800143a:	2101      	movs	r1, #1
 800143c:	430a      	orrs	r2, r1
 800143e:	601a      	str	r2, [r3, #0]
	do
	{
		temp=SysTick->CTRL;
 8001440:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <delay_us+0x58>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	60fb      	str	r3, [r7, #12]
	}
	while(temp&0x01&&!(temp&(1<<16)));//等待時間到達
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2201      	movs	r2, #1
 800144a:	4013      	ands	r3, r2
 800144c:	d004      	beq.n	8001458 <delay_us+0x40>
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	2380      	movs	r3, #128	; 0x80
 8001452:	025b      	lsls	r3, r3, #9
 8001454:	4013      	ands	r3, r2
 8001456:	d0f3      	beq.n	8001440 <delay_us+0x28>
	SysTick->CTRL=0x00;       //關閉計數器
 8001458:	4b05      	ldr	r3, [pc, #20]	; (8001470 <delay_us+0x58>)
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
	SysTick->VAL =0X00;       //清空計數器
 800145e:	4b04      	ldr	r3, [pc, #16]	; (8001470 <delay_us+0x58>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
}
 8001464:	46c0      	nop			; (mov r8, r8)
 8001466:	46bd      	mov	sp, r7
 8001468:	b004      	add	sp, #16
 800146a:	bd80      	pop	{r7, pc}
 800146c:	2000002c 	.word	0x2000002c
 8001470:	e000e010 	.word	0xe000e010

08001474 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001474:	b590      	push	{r4, r7, lr}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800147a:	f000 fb17 	bl	8001aac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800147e:	f000 f905 	bl	800168c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001482:	f000 f997 	bl	80017b4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001486:	f000 f95d 	bl	8001744 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  delay_init(32);
 800148a:	2020      	movs	r0, #32
 800148c:	f7ff ff9e 	bl	80013cc <delay_init>


  ADXL_InitTypeDef adxl_config;
  adxl_config.Range = RANGE_16G;
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	2203      	movs	r2, #3
 8001494:	711a      	strb	r2, [r3, #4]
  adxl_config.Resolution = RESOLUTION_FULL;
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	2201      	movs	r2, #1
 800149a:	715a      	strb	r2, [r3, #5]
  adxl_config.AutoSleep = AUTOSLEEPOFF;
 800149c:	1d3b      	adds	r3, r7, #4
 800149e:	2200      	movs	r2, #0
 80014a0:	71da      	strb	r2, [r3, #7]
  adxl_config.LPMode = LPMODE_LOWPOWER;
 80014a2:	1d3b      	adds	r3, r7, #4
 80014a4:	2201      	movs	r2, #1
 80014a6:	709a      	strb	r2, [r3, #2]
  adxl_config.Rate = BWRATE_100;
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	220a      	movs	r2, #10
 80014ac:	70da      	strb	r2, [r3, #3]
  adxl_config.SPIMode = SPIMODE_4WIRE;
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	2200      	movs	r2, #0
 80014b2:	701a      	strb	r2, [r3, #0]
  adxl_config.IntMode = INT_ACTIVEHIGH;
 80014b4:	1d3b      	adds	r3, r7, #4
 80014b6:	2200      	movs	r2, #0
 80014b8:	705a      	strb	r2, [r3, #1]


  adxlStatus InitStatus = ADXL_Init(&adxl_config, &ADXLid);
 80014ba:	230f      	movs	r3, #15
 80014bc:	18fc      	adds	r4, r7, r3
 80014be:	4a62      	ldr	r2, [pc, #392]	; (8001648 <main+0x1d4>)
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	0011      	movs	r1, r2
 80014c4:	0018      	movs	r0, r3
 80014c6:	f7ff fe77 	bl	80011b8 <ADXL_Init>
 80014ca:	0003      	movs	r3, r0
 80014cc:	7023      	strb	r3, [r4, #0]
    if(ADXLid == 0xE5)InitStatus = ADXL_OK;
 80014ce:	4b5e      	ldr	r3, [pc, #376]	; (8001648 <main+0x1d4>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2be5      	cmp	r3, #229	; 0xe5
 80014d4:	d103      	bne.n	80014de <main+0x6a>
 80014d6:	230f      	movs	r3, #15
 80014d8:	18fb      	adds	r3, r7, r3
 80014da:	2200      	movs	r2, #0
 80014dc:	701a      	strb	r2, [r3, #0]
    if(InitStatus == ADXL_OK)
 80014de:	230f      	movs	r3, #15
 80014e0:	18fb      	adds	r3, r7, r3
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d100      	bne.n	80014ea <main+0x76>
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80014e8:	46c0      	nop			; (mov r8, r8)
    {
  	  __NOP();
    }

    ADXL_Measure(ON);
 80014ea:	2000      	movs	r0, #0
 80014ec:	f7ff ff20 	bl	8001330 <ADXL_Measure>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    ADXL_IntProto();
 80014f0:	f7ff ff5b 	bl	80013aa <ADXL_IntProto>
  	readRegister(DATA0,data,6);
 80014f4:	4b55      	ldr	r3, [pc, #340]	; (800164c <main+0x1d8>)
 80014f6:	2206      	movs	r2, #6
 80014f8:	0019      	movs	r1, r3
 80014fa:	2032      	movs	r0, #50	; 0x32
 80014fc:	f7ff fd7a 	bl	8000ff4 <readRegister>
  	Xdata0 = data[0];
 8001500:	4b52      	ldr	r3, [pc, #328]	; (800164c <main+0x1d8>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	b29a      	uxth	r2, r3
 8001506:	4b52      	ldr	r3, [pc, #328]	; (8001650 <main+0x1dc>)
 8001508:	801a      	strh	r2, [r3, #0]
  	Xdata1 = data[1];
 800150a:	4b50      	ldr	r3, [pc, #320]	; (800164c <main+0x1d8>)
 800150c:	785b      	ldrb	r3, [r3, #1]
 800150e:	b29a      	uxth	r2, r3
 8001510:	4b50      	ldr	r3, [pc, #320]	; (8001654 <main+0x1e0>)
 8001512:	801a      	strh	r2, [r3, #0]
  	Ydata0 = data[2];
 8001514:	4b4d      	ldr	r3, [pc, #308]	; (800164c <main+0x1d8>)
 8001516:	789b      	ldrb	r3, [r3, #2]
 8001518:	b29a      	uxth	r2, r3
 800151a:	4b4f      	ldr	r3, [pc, #316]	; (8001658 <main+0x1e4>)
 800151c:	801a      	strh	r2, [r3, #0]
  	Ydata1 = data[3];
 800151e:	4b4b      	ldr	r3, [pc, #300]	; (800164c <main+0x1d8>)
 8001520:	78db      	ldrb	r3, [r3, #3]
 8001522:	b29a      	uxth	r2, r3
 8001524:	4b4d      	ldr	r3, [pc, #308]	; (800165c <main+0x1e8>)
 8001526:	801a      	strh	r2, [r3, #0]
  	Zdata0 = data[4];
 8001528:	4b48      	ldr	r3, [pc, #288]	; (800164c <main+0x1d8>)
 800152a:	791b      	ldrb	r3, [r3, #4]
 800152c:	b29a      	uxth	r2, r3
 800152e:	4b4c      	ldr	r3, [pc, #304]	; (8001660 <main+0x1ec>)
 8001530:	801a      	strh	r2, [r3, #0]
  	Zdata1 = data[5];
 8001532:	4b46      	ldr	r3, [pc, #280]	; (800164c <main+0x1d8>)
 8001534:	795b      	ldrb	r3, [r3, #5]
 8001536:	b29a      	uxth	r2, r3
 8001538:	4b4a      	ldr	r3, [pc, #296]	; (8001664 <main+0x1f0>)
 800153a:	801a      	strh	r2, [r3, #0]
  	accX = ((uint8_t)Xdata1<<8)|(uint8_t)Xdata0;
 800153c:	4b45      	ldr	r3, [pc, #276]	; (8001654 <main+0x1e0>)
 800153e:	881b      	ldrh	r3, [r3, #0]
 8001540:	b2db      	uxtb	r3, r3
 8001542:	021b      	lsls	r3, r3, #8
 8001544:	b21a      	sxth	r2, r3
 8001546:	4b42      	ldr	r3, [pc, #264]	; (8001650 <main+0x1dc>)
 8001548:	881b      	ldrh	r3, [r3, #0]
 800154a:	b2db      	uxtb	r3, r3
 800154c:	b21b      	sxth	r3, r3
 800154e:	4313      	orrs	r3, r2
 8001550:	b21a      	sxth	r2, r3
 8001552:	4b45      	ldr	r3, [pc, #276]	; (8001668 <main+0x1f4>)
 8001554:	801a      	strh	r2, [r3, #0]
  	accY = ((uint8_t)Ydata1<<8)|(uint8_t)Ydata0;
 8001556:	4b41      	ldr	r3, [pc, #260]	; (800165c <main+0x1e8>)
 8001558:	881b      	ldrh	r3, [r3, #0]
 800155a:	b2db      	uxtb	r3, r3
 800155c:	021b      	lsls	r3, r3, #8
 800155e:	b21a      	sxth	r2, r3
 8001560:	4b3d      	ldr	r3, [pc, #244]	; (8001658 <main+0x1e4>)
 8001562:	881b      	ldrh	r3, [r3, #0]
 8001564:	b2db      	uxtb	r3, r3
 8001566:	b21b      	sxth	r3, r3
 8001568:	4313      	orrs	r3, r2
 800156a:	b21a      	sxth	r2, r3
 800156c:	4b3f      	ldr	r3, [pc, #252]	; (800166c <main+0x1f8>)
 800156e:	801a      	strh	r2, [r3, #0]
  	accZ = ((uint8_t)Zdata1<<8)|(uint8_t)Zdata0;
 8001570:	4b3c      	ldr	r3, [pc, #240]	; (8001664 <main+0x1f0>)
 8001572:	881b      	ldrh	r3, [r3, #0]
 8001574:	b2db      	uxtb	r3, r3
 8001576:	021b      	lsls	r3, r3, #8
 8001578:	b21a      	sxth	r2, r3
 800157a:	4b39      	ldr	r3, [pc, #228]	; (8001660 <main+0x1ec>)
 800157c:	881b      	ldrh	r3, [r3, #0]
 800157e:	b2db      	uxtb	r3, r3
 8001580:	b21b      	sxth	r3, r3
 8001582:	4313      	orrs	r3, r2
 8001584:	b21a      	sxth	r2, r3
 8001586:	4b3a      	ldr	r3, [pc, #232]	; (8001670 <main+0x1fc>)
 8001588:	801a      	strh	r2, [r3, #0]

  	//3.9 is scale of LSB(one bit) mg, 1000 is scale to g
  	accXfloat = (float)accX  * 3.9 / 1000;
 800158a:	4b37      	ldr	r3, [pc, #220]	; (8001668 <main+0x1f4>)
 800158c:	2200      	movs	r2, #0
 800158e:	5e9b      	ldrsh	r3, [r3, r2]
 8001590:	0018      	movs	r0, r3
 8001592:	f7fe fe45 	bl	8000220 <__aeabi_i2f>
 8001596:	1c03      	adds	r3, r0, #0
 8001598:	1c18      	adds	r0, r3, #0
 800159a:	f7ff fbff 	bl	8000d9c <__aeabi_f2d>
 800159e:	4a35      	ldr	r2, [pc, #212]	; (8001674 <main+0x200>)
 80015a0:	4b35      	ldr	r3, [pc, #212]	; (8001678 <main+0x204>)
 80015a2:	f7ff f989 	bl	80008b8 <__aeabi_dmul>
 80015a6:	0003      	movs	r3, r0
 80015a8:	000c      	movs	r4, r1
 80015aa:	0018      	movs	r0, r3
 80015ac:	0021      	movs	r1, r4
 80015ae:	2200      	movs	r2, #0
 80015b0:	4b32      	ldr	r3, [pc, #200]	; (800167c <main+0x208>)
 80015b2:	f7fe fe7f 	bl	80002b4 <__aeabi_ddiv>
 80015b6:	0003      	movs	r3, r0
 80015b8:	000c      	movs	r4, r1
 80015ba:	0018      	movs	r0, r3
 80015bc:	0021      	movs	r1, r4
 80015be:	f7ff fc3f 	bl	8000e40 <__aeabi_d2f>
 80015c2:	1c02      	adds	r2, r0, #0
 80015c4:	4b2e      	ldr	r3, [pc, #184]	; (8001680 <main+0x20c>)
 80015c6:	601a      	str	r2, [r3, #0]
  	accYfloat = (float)accY  * 3.9 / 1000;
 80015c8:	4b28      	ldr	r3, [pc, #160]	; (800166c <main+0x1f8>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	5e9b      	ldrsh	r3, [r3, r2]
 80015ce:	0018      	movs	r0, r3
 80015d0:	f7fe fe26 	bl	8000220 <__aeabi_i2f>
 80015d4:	1c03      	adds	r3, r0, #0
 80015d6:	1c18      	adds	r0, r3, #0
 80015d8:	f7ff fbe0 	bl	8000d9c <__aeabi_f2d>
 80015dc:	4a25      	ldr	r2, [pc, #148]	; (8001674 <main+0x200>)
 80015de:	4b26      	ldr	r3, [pc, #152]	; (8001678 <main+0x204>)
 80015e0:	f7ff f96a 	bl	80008b8 <__aeabi_dmul>
 80015e4:	0003      	movs	r3, r0
 80015e6:	000c      	movs	r4, r1
 80015e8:	0018      	movs	r0, r3
 80015ea:	0021      	movs	r1, r4
 80015ec:	2200      	movs	r2, #0
 80015ee:	4b23      	ldr	r3, [pc, #140]	; (800167c <main+0x208>)
 80015f0:	f7fe fe60 	bl	80002b4 <__aeabi_ddiv>
 80015f4:	0003      	movs	r3, r0
 80015f6:	000c      	movs	r4, r1
 80015f8:	0018      	movs	r0, r3
 80015fa:	0021      	movs	r1, r4
 80015fc:	f7ff fc20 	bl	8000e40 <__aeabi_d2f>
 8001600:	1c02      	adds	r2, r0, #0
 8001602:	4b20      	ldr	r3, [pc, #128]	; (8001684 <main+0x210>)
 8001604:	601a      	str	r2, [r3, #0]
  	accZfloat = (float)accZ  * 3.9 / 1000;
 8001606:	4b1a      	ldr	r3, [pc, #104]	; (8001670 <main+0x1fc>)
 8001608:	2200      	movs	r2, #0
 800160a:	5e9b      	ldrsh	r3, [r3, r2]
 800160c:	0018      	movs	r0, r3
 800160e:	f7fe fe07 	bl	8000220 <__aeabi_i2f>
 8001612:	1c03      	adds	r3, r0, #0
 8001614:	1c18      	adds	r0, r3, #0
 8001616:	f7ff fbc1 	bl	8000d9c <__aeabi_f2d>
 800161a:	4a16      	ldr	r2, [pc, #88]	; (8001674 <main+0x200>)
 800161c:	4b16      	ldr	r3, [pc, #88]	; (8001678 <main+0x204>)
 800161e:	f7ff f94b 	bl	80008b8 <__aeabi_dmul>
 8001622:	0003      	movs	r3, r0
 8001624:	000c      	movs	r4, r1
 8001626:	0018      	movs	r0, r3
 8001628:	0021      	movs	r1, r4
 800162a:	2200      	movs	r2, #0
 800162c:	4b13      	ldr	r3, [pc, #76]	; (800167c <main+0x208>)
 800162e:	f7fe fe41 	bl	80002b4 <__aeabi_ddiv>
 8001632:	0003      	movs	r3, r0
 8001634:	000c      	movs	r4, r1
 8001636:	0018      	movs	r0, r3
 8001638:	0021      	movs	r1, r4
 800163a:	f7ff fc01 	bl	8000e40 <__aeabi_d2f>
 800163e:	1c02      	adds	r2, r0, #0
 8001640:	4b11      	ldr	r3, [pc, #68]	; (8001688 <main+0x214>)
 8001642:	601a      	str	r2, [r3, #0]
    ADXL_IntProto();
 8001644:	e754      	b.n	80014f0 <main+0x7c>
 8001646:	46c0      	nop			; (mov r8, r8)
 8001648:	20000030 	.word	0x20000030
 800164c:	20000054 	.word	0x20000054
 8001650:	20000036 	.word	0x20000036
 8001654:	20000038 	.word	0x20000038
 8001658:	2000003a 	.word	0x2000003a
 800165c:	2000003c 	.word	0x2000003c
 8001660:	20000032 	.word	0x20000032
 8001664:	20000034 	.word	0x20000034
 8001668:	2000003e 	.word	0x2000003e
 800166c:	20000044 	.word	0x20000044
 8001670:	2000004c 	.word	0x2000004c
 8001674:	33333333 	.word	0x33333333
 8001678:	400f3333 	.word	0x400f3333
 800167c:	408f4000 	.word	0x408f4000
 8001680:	20000040 	.word	0x20000040
 8001684:	20000048 	.word	0x20000048
 8001688:	20000050 	.word	0x20000050

0800168c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800168c:	b590      	push	{r4, r7, lr}
 800168e:	b093      	sub	sp, #76	; 0x4c
 8001690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001692:	2414      	movs	r4, #20
 8001694:	193b      	adds	r3, r7, r4
 8001696:	0018      	movs	r0, r3
 8001698:	2334      	movs	r3, #52	; 0x34
 800169a:	001a      	movs	r2, r3
 800169c:	2100      	movs	r1, #0
 800169e:	f001 ffa1 	bl	80035e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016a2:	003b      	movs	r3, r7
 80016a4:	0018      	movs	r0, r3
 80016a6:	2314      	movs	r3, #20
 80016a8:	001a      	movs	r2, r3
 80016aa:	2100      	movs	r1, #0
 80016ac:	f001 ff9a 	bl	80035e4 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016b0:	4b22      	ldr	r3, [pc, #136]	; (800173c <SystemClock_Config+0xb0>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a22      	ldr	r2, [pc, #136]	; (8001740 <SystemClock_Config+0xb4>)
 80016b6:	401a      	ands	r2, r3
 80016b8:	4b20      	ldr	r3, [pc, #128]	; (800173c <SystemClock_Config+0xb0>)
 80016ba:	2180      	movs	r1, #128	; 0x80
 80016bc:	0109      	lsls	r1, r1, #4
 80016be:	430a      	orrs	r2, r1
 80016c0:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016c2:	0021      	movs	r1, r4
 80016c4:	187b      	adds	r3, r7, r1
 80016c6:	2202      	movs	r2, #2
 80016c8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016ca:	187b      	adds	r3, r7, r1
 80016cc:	2201      	movs	r2, #1
 80016ce:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016d0:	187b      	adds	r3, r7, r1
 80016d2:	2210      	movs	r2, #16
 80016d4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016d6:	187b      	adds	r3, r7, r1
 80016d8:	2202      	movs	r2, #2
 80016da:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016dc:	187b      	adds	r3, r7, r1
 80016de:	2200      	movs	r2, #0
 80016e0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80016e2:	187b      	adds	r3, r7, r1
 80016e4:	2280      	movs	r2, #128	; 0x80
 80016e6:	02d2      	lsls	r2, r2, #11
 80016e8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80016ea:	187b      	adds	r3, r7, r1
 80016ec:	2280      	movs	r2, #128	; 0x80
 80016ee:	03d2      	lsls	r2, r2, #15
 80016f0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016f2:	187b      	adds	r3, r7, r1
 80016f4:	0018      	movs	r0, r3
 80016f6:	f000 fc89 	bl	800200c <HAL_RCC_OscConfig>
 80016fa:	1e03      	subs	r3, r0, #0
 80016fc:	d001      	beq.n	8001702 <SystemClock_Config+0x76>
  {
    Error_Handler();
 80016fe:	f000 f8b9 	bl	8001874 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001702:	003b      	movs	r3, r7
 8001704:	220f      	movs	r2, #15
 8001706:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001708:	003b      	movs	r3, r7
 800170a:	2203      	movs	r2, #3
 800170c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800170e:	003b      	movs	r3, r7
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001714:	003b      	movs	r3, r7
 8001716:	2200      	movs	r2, #0
 8001718:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800171a:	003b      	movs	r3, r7
 800171c:	2200      	movs	r2, #0
 800171e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001720:	003b      	movs	r3, r7
 8001722:	2101      	movs	r1, #1
 8001724:	0018      	movs	r0, r3
 8001726:	f000 ffeb 	bl	8002700 <HAL_RCC_ClockConfig>
 800172a:	1e03      	subs	r3, r0, #0
 800172c:	d001      	beq.n	8001732 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800172e:	f000 f8a1 	bl	8001874 <Error_Handler>
  }
}
 8001732:	46c0      	nop			; (mov r8, r8)
 8001734:	46bd      	mov	sp, r7
 8001736:	b013      	add	sp, #76	; 0x4c
 8001738:	bd90      	pop	{r4, r7, pc}
 800173a:	46c0      	nop			; (mov r8, r8)
 800173c:	40007000 	.word	0x40007000
 8001740:	ffffe7ff 	.word	0xffffe7ff

08001744 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001748:	4b18      	ldr	r3, [pc, #96]	; (80017ac <MX_SPI1_Init+0x68>)
 800174a:	4a19      	ldr	r2, [pc, #100]	; (80017b0 <MX_SPI1_Init+0x6c>)
 800174c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800174e:	4b17      	ldr	r3, [pc, #92]	; (80017ac <MX_SPI1_Init+0x68>)
 8001750:	2282      	movs	r2, #130	; 0x82
 8001752:	0052      	lsls	r2, r2, #1
 8001754:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001756:	4b15      	ldr	r3, [pc, #84]	; (80017ac <MX_SPI1_Init+0x68>)
 8001758:	2200      	movs	r2, #0
 800175a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800175c:	4b13      	ldr	r3, [pc, #76]	; (80017ac <MX_SPI1_Init+0x68>)
 800175e:	2200      	movs	r2, #0
 8001760:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001762:	4b12      	ldr	r3, [pc, #72]	; (80017ac <MX_SPI1_Init+0x68>)
 8001764:	2202      	movs	r2, #2
 8001766:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001768:	4b10      	ldr	r3, [pc, #64]	; (80017ac <MX_SPI1_Init+0x68>)
 800176a:	2201      	movs	r2, #1
 800176c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800176e:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <MX_SPI1_Init+0x68>)
 8001770:	2280      	movs	r2, #128	; 0x80
 8001772:	0092      	lsls	r2, r2, #2
 8001774:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001776:	4b0d      	ldr	r3, [pc, #52]	; (80017ac <MX_SPI1_Init+0x68>)
 8001778:	2218      	movs	r2, #24
 800177a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800177c:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <MX_SPI1_Init+0x68>)
 800177e:	2200      	movs	r2, #0
 8001780:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001782:	4b0a      	ldr	r3, [pc, #40]	; (80017ac <MX_SPI1_Init+0x68>)
 8001784:	2200      	movs	r2, #0
 8001786:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001788:	4b08      	ldr	r3, [pc, #32]	; (80017ac <MX_SPI1_Init+0x68>)
 800178a:	2200      	movs	r2, #0
 800178c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800178e:	4b07      	ldr	r3, [pc, #28]	; (80017ac <MX_SPI1_Init+0x68>)
 8001790:	2207      	movs	r2, #7
 8001792:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001794:	4b05      	ldr	r3, [pc, #20]	; (80017ac <MX_SPI1_Init+0x68>)
 8001796:	0018      	movs	r0, r3
 8001798:	f001 f960 	bl	8002a5c <HAL_SPI_Init>
 800179c:	1e03      	subs	r3, r0, #0
 800179e:	d001      	beq.n	80017a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80017a0:	f000 f868 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017a4:	46c0      	nop			; (mov r8, r8)
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	46c0      	nop			; (mov r8, r8)
 80017ac:	2000005c 	.word	0x2000005c
 80017b0:	40013000 	.word	0x40013000

080017b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017b4:	b590      	push	{r4, r7, lr}
 80017b6:	b089      	sub	sp, #36	; 0x24
 80017b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ba:	240c      	movs	r4, #12
 80017bc:	193b      	adds	r3, r7, r4
 80017be:	0018      	movs	r0, r3
 80017c0:	2314      	movs	r3, #20
 80017c2:	001a      	movs	r2, r3
 80017c4:	2100      	movs	r1, #0
 80017c6:	f001 ff0d 	bl	80035e4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ca:	4b28      	ldr	r3, [pc, #160]	; (800186c <MX_GPIO_Init+0xb8>)
 80017cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ce:	4b27      	ldr	r3, [pc, #156]	; (800186c <MX_GPIO_Init+0xb8>)
 80017d0:	2101      	movs	r1, #1
 80017d2:	430a      	orrs	r2, r1
 80017d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80017d6:	4b25      	ldr	r3, [pc, #148]	; (800186c <MX_GPIO_Init+0xb8>)
 80017d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017da:	2201      	movs	r2, #1
 80017dc:	4013      	ands	r3, r2
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e2:	4b22      	ldr	r3, [pc, #136]	; (800186c <MX_GPIO_Init+0xb8>)
 80017e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017e6:	4b21      	ldr	r3, [pc, #132]	; (800186c <MX_GPIO_Init+0xb8>)
 80017e8:	2104      	movs	r1, #4
 80017ea:	430a      	orrs	r2, r1
 80017ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80017ee:	4b1f      	ldr	r3, [pc, #124]	; (800186c <MX_GPIO_Init+0xb8>)
 80017f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f2:	2204      	movs	r2, #4
 80017f4:	4013      	ands	r3, r2
 80017f6:	607b      	str	r3, [r7, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fa:	4b1c      	ldr	r3, [pc, #112]	; (800186c <MX_GPIO_Init+0xb8>)
 80017fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017fe:	4b1b      	ldr	r3, [pc, #108]	; (800186c <MX_GPIO_Init+0xb8>)
 8001800:	2102      	movs	r1, #2
 8001802:	430a      	orrs	r2, r1
 8001804:	62da      	str	r2, [r3, #44]	; 0x2c
 8001806:	4b19      	ldr	r3, [pc, #100]	; (800186c <MX_GPIO_Init+0xb8>)
 8001808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180a:	2202      	movs	r2, #2
 800180c:	4013      	ands	r3, r2
 800180e:	603b      	str	r3, [r7, #0]
 8001810:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001812:	23a0      	movs	r3, #160	; 0xa0
 8001814:	05db      	lsls	r3, r3, #23
 8001816:	2200      	movs	r2, #0
 8001818:	2130      	movs	r1, #48	; 0x30
 800181a:	0018      	movs	r0, r3
 800181c:	f000 fbd8 	bl	8001fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001820:	193b      	adds	r3, r7, r4
 8001822:	2230      	movs	r2, #48	; 0x30
 8001824:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001826:	193b      	adds	r3, r7, r4
 8001828:	2201      	movs	r2, #1
 800182a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	193b      	adds	r3, r7, r4
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	193b      	adds	r3, r7, r4
 8001834:	2200      	movs	r2, #0
 8001836:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001838:	193a      	adds	r2, r7, r4
 800183a:	23a0      	movs	r3, #160	; 0xa0
 800183c:	05db      	lsls	r3, r3, #23
 800183e:	0011      	movs	r1, r2
 8001840:	0018      	movs	r0, r3
 8001842:	f000 fa47 	bl	8001cd4 <HAL_GPIO_Init>


  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001846:	193b      	adds	r3, r7, r4
 8001848:	2280      	movs	r2, #128	; 0x80
 800184a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800184c:	193b      	adds	r3, r7, r4
 800184e:	2203      	movs	r2, #3
 8001850:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	193b      	adds	r3, r7, r4
 8001854:	2200      	movs	r2, #0
 8001856:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001858:	193b      	adds	r3, r7, r4
 800185a:	4a05      	ldr	r2, [pc, #20]	; (8001870 <MX_GPIO_Init+0xbc>)
 800185c:	0019      	movs	r1, r3
 800185e:	0010      	movs	r0, r2
 8001860:	f000 fa38 	bl	8001cd4 <HAL_GPIO_Init>

}
 8001864:	46c0      	nop			; (mov r8, r8)
 8001866:	46bd      	mov	sp, r7
 8001868:	b009      	add	sp, #36	; 0x24
 800186a:	bd90      	pop	{r4, r7, pc}
 800186c:	40021000 	.word	0x40021000
 8001870:	50000800 	.word	0x50000800

08001874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001878:	46c0      	nop			; (mov r8, r8)
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
	...

08001880 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001884:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <HAL_MspInit+0x24>)
 8001886:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001888:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <HAL_MspInit+0x24>)
 800188a:	2101      	movs	r1, #1
 800188c:	430a      	orrs	r2, r1
 800188e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001890:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <HAL_MspInit+0x24>)
 8001892:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001894:	4b03      	ldr	r3, [pc, #12]	; (80018a4 <HAL_MspInit+0x24>)
 8001896:	2180      	movs	r1, #128	; 0x80
 8001898:	0549      	lsls	r1, r1, #21
 800189a:	430a      	orrs	r2, r1
 800189c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800189e:	46c0      	nop			; (mov r8, r8)
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40021000 	.word	0x40021000

080018a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018a8:	b590      	push	{r4, r7, lr}
 80018aa:	b08b      	sub	sp, #44	; 0x2c
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b0:	2314      	movs	r3, #20
 80018b2:	18fb      	adds	r3, r7, r3
 80018b4:	0018      	movs	r0, r3
 80018b6:	2314      	movs	r3, #20
 80018b8:	001a      	movs	r2, r3
 80018ba:	2100      	movs	r1, #0
 80018bc:	f001 fe92 	bl	80035e4 <memset>
  if(hspi->Instance==SPI1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a29      	ldr	r2, [pc, #164]	; (800196c <HAL_SPI_MspInit+0xc4>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d14b      	bne.n	8001962 <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018ca:	4b29      	ldr	r3, [pc, #164]	; (8001970 <HAL_SPI_MspInit+0xc8>)
 80018cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018ce:	4b28      	ldr	r3, [pc, #160]	; (8001970 <HAL_SPI_MspInit+0xc8>)
 80018d0:	2180      	movs	r1, #128	; 0x80
 80018d2:	0149      	lsls	r1, r1, #5
 80018d4:	430a      	orrs	r2, r1
 80018d6:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d8:	4b25      	ldr	r3, [pc, #148]	; (8001970 <HAL_SPI_MspInit+0xc8>)
 80018da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018dc:	4b24      	ldr	r3, [pc, #144]	; (8001970 <HAL_SPI_MspInit+0xc8>)
 80018de:	2101      	movs	r1, #1
 80018e0:	430a      	orrs	r2, r1
 80018e2:	62da      	str	r2, [r3, #44]	; 0x2c
 80018e4:	4b22      	ldr	r3, [pc, #136]	; (8001970 <HAL_SPI_MspInit+0xc8>)
 80018e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e8:	2201      	movs	r2, #1
 80018ea:	4013      	ands	r3, r2
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f0:	4b1f      	ldr	r3, [pc, #124]	; (8001970 <HAL_SPI_MspInit+0xc8>)
 80018f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018f4:	4b1e      	ldr	r3, [pc, #120]	; (8001970 <HAL_SPI_MspInit+0xc8>)
 80018f6:	2102      	movs	r1, #2
 80018f8:	430a      	orrs	r2, r1
 80018fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80018fc:	4b1c      	ldr	r3, [pc, #112]	; (8001970 <HAL_SPI_MspInit+0xc8>)
 80018fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001900:	2202      	movs	r2, #2
 8001902:	4013      	ands	r3, r2
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001908:	2414      	movs	r4, #20
 800190a:	193b      	adds	r3, r7, r4
 800190c:	22c0      	movs	r2, #192	; 0xc0
 800190e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001910:	193b      	adds	r3, r7, r4
 8001912:	2202      	movs	r2, #2
 8001914:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001916:	193b      	adds	r3, r7, r4
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191c:	193b      	adds	r3, r7, r4
 800191e:	2203      	movs	r2, #3
 8001920:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001922:	193b      	adds	r3, r7, r4
 8001924:	2200      	movs	r2, #0
 8001926:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001928:	193a      	adds	r2, r7, r4
 800192a:	23a0      	movs	r3, #160	; 0xa0
 800192c:	05db      	lsls	r3, r3, #23
 800192e:	0011      	movs	r1, r2
 8001930:	0018      	movs	r0, r3
 8001932:	f000 f9cf 	bl	8001cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001936:	0021      	movs	r1, r4
 8001938:	187b      	adds	r3, r7, r1
 800193a:	2208      	movs	r2, #8
 800193c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193e:	187b      	adds	r3, r7, r1
 8001940:	2202      	movs	r2, #2
 8001942:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	187b      	adds	r3, r7, r1
 8001946:	2200      	movs	r2, #0
 8001948:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194a:	187b      	adds	r3, r7, r1
 800194c:	2203      	movs	r2, #3
 800194e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001950:	187b      	adds	r3, r7, r1
 8001952:	2200      	movs	r2, #0
 8001954:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001956:	187b      	adds	r3, r7, r1
 8001958:	4a06      	ldr	r2, [pc, #24]	; (8001974 <HAL_SPI_MspInit+0xcc>)
 800195a:	0019      	movs	r1, r3
 800195c:	0010      	movs	r0, r2
 800195e:	f000 f9b9 	bl	8001cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001962:	46c0      	nop			; (mov r8, r8)
 8001964:	46bd      	mov	sp, r7
 8001966:	b00b      	add	sp, #44	; 0x2c
 8001968:	bd90      	pop	{r4, r7, pc}
 800196a:	46c0      	nop			; (mov r8, r8)
 800196c:	40013000 	.word	0x40013000
 8001970:	40021000 	.word	0x40021000
 8001974:	50000400 	.word	0x50000400

08001978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800197c:	46c0      	nop			; (mov r8, r8)
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001986:	e7fe      	b.n	8001986 <HardFault_Handler+0x4>

08001988 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800198c:	46c0      	nop			; (mov r8, r8)
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001996:	46c0      	nop			; (mov r8, r8)
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019a0:	f000 f8ce 	bl	8001b40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019a4:	46c0      	nop			; (mov r8, r8)
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
	...

080019ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 80019b0:	4b17      	ldr	r3, [pc, #92]	; (8001a10 <SystemInit+0x64>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	4b16      	ldr	r3, [pc, #88]	; (8001a10 <SystemInit+0x64>)
 80019b6:	2180      	movs	r1, #128	; 0x80
 80019b8:	0049      	lsls	r1, r1, #1
 80019ba:	430a      	orrs	r2, r1
 80019bc:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80019be:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <SystemInit+0x64>)
 80019c0:	68da      	ldr	r2, [r3, #12]
 80019c2:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <SystemInit+0x64>)
 80019c4:	4913      	ldr	r1, [pc, #76]	; (8001a14 <SystemInit+0x68>)
 80019c6:	400a      	ands	r2, r1
 80019c8:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80019ca:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <SystemInit+0x64>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <SystemInit+0x64>)
 80019d0:	4911      	ldr	r1, [pc, #68]	; (8001a18 <SystemInit+0x6c>)
 80019d2:	400a      	ands	r2, r1
 80019d4:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80019d6:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <SystemInit+0x64>)
 80019d8:	689a      	ldr	r2, [r3, #8]
 80019da:	4b0d      	ldr	r3, [pc, #52]	; (8001a10 <SystemInit+0x64>)
 80019dc:	2101      	movs	r1, #1
 80019de:	438a      	bics	r2, r1
 80019e0:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80019e2:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <SystemInit+0x64>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <SystemInit+0x64>)
 80019e8:	490c      	ldr	r1, [pc, #48]	; (8001a1c <SystemInit+0x70>)
 80019ea:	400a      	ands	r2, r1
 80019ec:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80019ee:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <SystemInit+0x64>)
 80019f0:	68da      	ldr	r2, [r3, #12]
 80019f2:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <SystemInit+0x64>)
 80019f4:	490a      	ldr	r1, [pc, #40]	; (8001a20 <SystemInit+0x74>)
 80019f6:	400a      	ands	r2, r1
 80019f8:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80019fa:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <SystemInit+0x64>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a00:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <SystemInit+0x78>)
 8001a02:	2280      	movs	r2, #128	; 0x80
 8001a04:	0512      	lsls	r2, r2, #20
 8001a06:	609a      	str	r2, [r3, #8]
#endif
}
 8001a08:	46c0      	nop			; (mov r8, r8)
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	46c0      	nop			; (mov r8, r8)
 8001a10:	40021000 	.word	0x40021000
 8001a14:	88ff400c 	.word	0x88ff400c
 8001a18:	fef6fff6 	.word	0xfef6fff6
 8001a1c:	fffbffff 	.word	0xfffbffff
 8001a20:	ff02ffff 	.word	0xff02ffff
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001a28:	4813      	ldr	r0, [pc, #76]	; (8001a78 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001a2a:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8001a2c:	4813      	ldr	r0, [pc, #76]	; (8001a7c <LoopForever+0x6>)
    LDR R1, [R0]
 8001a2e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001a30:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001a32:	4a13      	ldr	r2, [pc, #76]	; (8001a80 <LoopForever+0xa>)
    CMP R1, R2
 8001a34:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001a36:	d105      	bne.n	8001a44 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8001a38:	4812      	ldr	r0, [pc, #72]	; (8001a84 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001a3a:	4913      	ldr	r1, [pc, #76]	; (8001a88 <LoopForever+0x12>)
    STR R1, [R0]
 8001a3c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001a3e:	4813      	ldr	r0, [pc, #76]	; (8001a8c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001a40:	4913      	ldr	r1, [pc, #76]	; (8001a90 <LoopForever+0x1a>)
    STR R1, [R0]
 8001a42:	6001      	str	r1, [r0, #0]

08001a44 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001a44:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a46:	e003      	b.n	8001a50 <LoopCopyDataInit>

08001a48 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a48:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <LoopForever+0x1e>)
  ldr  r3, [r3, r1]
 8001a4a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a4c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a4e:	3104      	adds	r1, #4

08001a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a50:	4811      	ldr	r0, [pc, #68]	; (8001a98 <LoopForever+0x22>)
  ldr  r3, =_edata
 8001a52:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <LoopForever+0x26>)
  adds  r2, r0, r1
 8001a54:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a56:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a58:	d3f6      	bcc.n	8001a48 <CopyDataInit>
  ldr  r2, =_sbss
 8001a5a:	4a11      	ldr	r2, [pc, #68]	; (8001aa0 <LoopForever+0x2a>)
  b  LoopFillZerobss
 8001a5c:	e002      	b.n	8001a64 <LoopFillZerobss>

08001a5e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001a5e:	2300      	movs	r3, #0
  str  r3, [r2]
 8001a60:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a62:	3204      	adds	r2, #4

08001a64 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8001a64:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <LoopForever+0x2e>)
  cmp  r2, r3
 8001a66:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a68:	d3f9      	bcc.n	8001a5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001a6a:	f7ff ff9f 	bl	80019ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a6e:	f001 fd95 	bl	800359c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a72:	f7ff fcff 	bl	8001474 <main>

08001a76 <LoopForever>:

LoopForever:
    b LoopForever
 8001a76:	e7fe      	b.n	8001a76 <LoopForever>
   ldr   r0, =_estack
 8001a78:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 8001a7c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001a80:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8001a84:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8001a88:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001a8c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001a90:	00000000 	.word	0x00000000
  ldr  r3, =_sidata
 8001a94:	080036b0 	.word	0x080036b0
  ldr  r0, =_sdata
 8001a98:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a9c:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8001aa0:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8001aa4:	200000b8 	.word	0x200000b8

08001aa8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001aa8:	e7fe      	b.n	8001aa8 <ADC1_IRQHandler>
	...

08001aac <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ab2:	1dfb      	adds	r3, r7, #7
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001ab8:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <HAL_Init+0x3c>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <HAL_Init+0x3c>)
 8001abe:	2140      	movs	r1, #64	; 0x40
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	f000 f811 	bl	8001aec <HAL_InitTick>
 8001aca:	1e03      	subs	r3, r0, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001ace:	1dfb      	adds	r3, r7, #7
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	701a      	strb	r2, [r3, #0]
 8001ad4:	e001      	b.n	8001ada <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ad6:	f7ff fed3 	bl	8001880 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ada:	1dfb      	adds	r3, r7, #7
 8001adc:	781b      	ldrb	r3, [r3, #0]
}
 8001ade:	0018      	movs	r0, r3
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	b002      	add	sp, #8
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	46c0      	nop			; (mov r8, r8)
 8001ae8:	40022000 	.word	0x40022000

08001aec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001af4:	230f      	movs	r3, #15
 8001af6:	18fb      	adds	r3, r7, r3
 8001af8:	2200      	movs	r2, #0
 8001afa:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8001afc:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <HAL_InitTick+0x50>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	23fa      	movs	r3, #250	; 0xfa
 8001b02:	0099      	lsls	r1, r3, #2
 8001b04:	0010      	movs	r0, r2
 8001b06:	f7fe faff 	bl	8000108 <__udivsi3>
 8001b0a:	0003      	movs	r3, r0
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	f000 f8d4 	bl	8001cba <HAL_SYSTICK_Config>
 8001b12:	1e03      	subs	r3, r0, #0
 8001b14:	d004      	beq.n	8001b20 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8001b16:	230f      	movs	r3, #15
 8001b18:	18fb      	adds	r3, r7, r3
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	701a      	strb	r2, [r3, #0]
 8001b1e:	e006      	b.n	8001b2e <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8001b20:	6879      	ldr	r1, [r7, #4]
 8001b22:	2301      	movs	r3, #1
 8001b24:	425b      	negs	r3, r3
 8001b26:	2200      	movs	r2, #0
 8001b28:	0018      	movs	r0, r3
 8001b2a:	f000 f8b1 	bl	8001c90 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8001b2e:	230f      	movs	r3, #15
 8001b30:	18fb      	adds	r3, r7, r3
 8001b32:	781b      	ldrb	r3, [r3, #0]
}
 8001b34:	0018      	movs	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	b004      	add	sp, #16
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20000000 	.word	0x20000000

08001b40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  uwTick++;
 8001b44:	4b03      	ldr	r3, [pc, #12]	; (8001b54 <HAL_IncTick+0x14>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	1c5a      	adds	r2, r3, #1
 8001b4a:	4b02      	ldr	r3, [pc, #8]	; (8001b54 <HAL_IncTick+0x14>)
 8001b4c:	601a      	str	r2, [r3, #0]
}
 8001b4e:	46c0      	nop			; (mov r8, r8)
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	200000b4 	.word	0x200000b4

08001b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b5c:	4b02      	ldr	r3, [pc, #8]	; (8001b68 <HAL_GetTick+0x10>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
}
 8001b60:	0018      	movs	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	46c0      	nop			; (mov r8, r8)
 8001b68:	200000b4 	.word	0x200000b4

08001b6c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b6c:	b590      	push	{r4, r7, lr}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	0002      	movs	r2, r0
 8001b74:	6039      	str	r1, [r7, #0]
 8001b76:	1dfb      	adds	r3, r7, #7
 8001b78:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8001b7a:	1dfb      	adds	r3, r7, #7
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b7f      	cmp	r3, #127	; 0x7f
 8001b80:	d932      	bls.n	8001be8 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b82:	4a2f      	ldr	r2, [pc, #188]	; (8001c40 <NVIC_SetPriority+0xd4>)
 8001b84:	1dfb      	adds	r3, r7, #7
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	0019      	movs	r1, r3
 8001b8a:	230f      	movs	r3, #15
 8001b8c:	400b      	ands	r3, r1
 8001b8e:	3b08      	subs	r3, #8
 8001b90:	089b      	lsrs	r3, r3, #2
 8001b92:	3306      	adds	r3, #6
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	18d3      	adds	r3, r2, r3
 8001b98:	3304      	adds	r3, #4
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	1dfa      	adds	r2, r7, #7
 8001b9e:	7812      	ldrb	r2, [r2, #0]
 8001ba0:	0011      	movs	r1, r2
 8001ba2:	2203      	movs	r2, #3
 8001ba4:	400a      	ands	r2, r1
 8001ba6:	00d2      	lsls	r2, r2, #3
 8001ba8:	21ff      	movs	r1, #255	; 0xff
 8001baa:	4091      	lsls	r1, r2
 8001bac:	000a      	movs	r2, r1
 8001bae:	43d2      	mvns	r2, r2
 8001bb0:	401a      	ands	r2, r3
 8001bb2:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	019b      	lsls	r3, r3, #6
 8001bb8:	22ff      	movs	r2, #255	; 0xff
 8001bba:	401a      	ands	r2, r3
 8001bbc:	1dfb      	adds	r3, r7, #7
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	4003      	ands	r3, r0
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bca:	481d      	ldr	r0, [pc, #116]	; (8001c40 <NVIC_SetPriority+0xd4>)
 8001bcc:	1dfb      	adds	r3, r7, #7
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	001c      	movs	r4, r3
 8001bd2:	230f      	movs	r3, #15
 8001bd4:	4023      	ands	r3, r4
 8001bd6:	3b08      	subs	r3, #8
 8001bd8:	089b      	lsrs	r3, r3, #2
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	3306      	adds	r3, #6
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	18c3      	adds	r3, r0, r3
 8001be2:	3304      	adds	r3, #4
 8001be4:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001be6:	e027      	b.n	8001c38 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001be8:	4a16      	ldr	r2, [pc, #88]	; (8001c44 <NVIC_SetPriority+0xd8>)
 8001bea:	1dfb      	adds	r3, r7, #7
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	b25b      	sxtb	r3, r3
 8001bf0:	089b      	lsrs	r3, r3, #2
 8001bf2:	33c0      	adds	r3, #192	; 0xc0
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	589b      	ldr	r3, [r3, r2]
 8001bf8:	1dfa      	adds	r2, r7, #7
 8001bfa:	7812      	ldrb	r2, [r2, #0]
 8001bfc:	0011      	movs	r1, r2
 8001bfe:	2203      	movs	r2, #3
 8001c00:	400a      	ands	r2, r1
 8001c02:	00d2      	lsls	r2, r2, #3
 8001c04:	21ff      	movs	r1, #255	; 0xff
 8001c06:	4091      	lsls	r1, r2
 8001c08:	000a      	movs	r2, r1
 8001c0a:	43d2      	mvns	r2, r2
 8001c0c:	401a      	ands	r2, r3
 8001c0e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	019b      	lsls	r3, r3, #6
 8001c14:	22ff      	movs	r2, #255	; 0xff
 8001c16:	401a      	ands	r2, r3
 8001c18:	1dfb      	adds	r3, r7, #7
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	2303      	movs	r3, #3
 8001c20:	4003      	ands	r3, r0
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c26:	4807      	ldr	r0, [pc, #28]	; (8001c44 <NVIC_SetPriority+0xd8>)
 8001c28:	1dfb      	adds	r3, r7, #7
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	b25b      	sxtb	r3, r3
 8001c2e:	089b      	lsrs	r3, r3, #2
 8001c30:	430a      	orrs	r2, r1
 8001c32:	33c0      	adds	r3, #192	; 0xc0
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	501a      	str	r2, [r3, r0]
}
 8001c38:	46c0      	nop			; (mov r8, r8)
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	b003      	add	sp, #12
 8001c3e:	bd90      	pop	{r4, r7, pc}
 8001c40:	e000ed00 	.word	0xe000ed00
 8001c44:	e000e100 	.word	0xe000e100

08001c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	4a0c      	ldr	r2, [pc, #48]	; (8001c88 <SysTick_Config+0x40>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d901      	bls.n	8001c5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e010      	b.n	8001c80 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c5e:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <SysTick_Config+0x44>)
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	3a01      	subs	r2, #1
 8001c64:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c66:	2301      	movs	r3, #1
 8001c68:	425b      	negs	r3, r3
 8001c6a:	2103      	movs	r1, #3
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	f7ff ff7d 	bl	8001b6c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c72:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <SysTick_Config+0x44>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c78:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <SysTick_Config+0x44>)
 8001c7a:	2207      	movs	r2, #7
 8001c7c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	0018      	movs	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	b002      	add	sp, #8
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	00ffffff 	.word	0x00ffffff
 8001c8c:	e000e010 	.word	0xe000e010

08001c90 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60b9      	str	r1, [r7, #8]
 8001c98:	607a      	str	r2, [r7, #4]
 8001c9a:	210f      	movs	r1, #15
 8001c9c:	187b      	adds	r3, r7, r1
 8001c9e:	1c02      	adds	r2, r0, #0
 8001ca0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001ca2:	68ba      	ldr	r2, [r7, #8]
 8001ca4:	187b      	adds	r3, r7, r1
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	b25b      	sxtb	r3, r3
 8001caa:	0011      	movs	r1, r2
 8001cac:	0018      	movs	r0, r3
 8001cae:	f7ff ff5d 	bl	8001b6c <NVIC_SetPriority>
}
 8001cb2:	46c0      	nop			; (mov r8, r8)
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	b004      	add	sp, #16
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b082      	sub	sp, #8
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	f7ff ffbf 	bl	8001c48 <SysTick_Config>
 8001cca:	0003      	movs	r3, r0
}
 8001ccc:	0018      	movs	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	b002      	add	sp, #8
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001cea:	e155      	b.n	8001f98 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	697a      	ldr	r2, [r7, #20]
 8001cf4:	4091      	lsls	r1, r2
 8001cf6:	000a      	movs	r2, r1
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d100      	bne.n	8001d04 <HAL_GPIO_Init+0x30>
 8001d02:	e146      	b.n	8001f92 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d003      	beq.n	8001d14 <HAL_GPIO_Init+0x40>
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b12      	cmp	r3, #18
 8001d12:	d123      	bne.n	8001d5c <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	08da      	lsrs	r2, r3, #3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3208      	adds	r2, #8
 8001d1c:	0092      	lsls	r2, r2, #2
 8001d1e:	58d3      	ldr	r3, [r2, r3]
 8001d20:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	2207      	movs	r2, #7
 8001d26:	4013      	ands	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	220f      	movs	r2, #15
 8001d2c:	409a      	lsls	r2, r3
 8001d2e:	0013      	movs	r3, r2
 8001d30:	43da      	mvns	r2, r3
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	4013      	ands	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	691a      	ldr	r2, [r3, #16]
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	2107      	movs	r1, #7
 8001d40:	400b      	ands	r3, r1
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	409a      	lsls	r2, r3
 8001d46:	0013      	movs	r3, r2
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	08da      	lsrs	r2, r3, #3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	3208      	adds	r2, #8
 8001d56:	0092      	lsls	r2, r2, #2
 8001d58:	6939      	ldr	r1, [r7, #16]
 8001d5a:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d00b      	beq.n	8001d7c <HAL_GPIO_Init+0xa8>
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d007      	beq.n	8001d7c <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d70:	2b11      	cmp	r3, #17
 8001d72:	d003      	beq.n	8001d7c <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b12      	cmp	r3, #18
 8001d7a:	d130      	bne.n	8001dde <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	2203      	movs	r2, #3
 8001d88:	409a      	lsls	r2, r3
 8001d8a:	0013      	movs	r3, r2
 8001d8c:	43da      	mvns	r2, r3
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	4013      	ands	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	68da      	ldr	r2, [r3, #12]
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	409a      	lsls	r2, r3
 8001d9e:	0013      	movs	r3, r2
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001db2:	2201      	movs	r2, #1
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	409a      	lsls	r2, r3
 8001db8:	0013      	movs	r3, r2
 8001dba:	43da      	mvns	r2, r3
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	091b      	lsrs	r3, r3, #4
 8001dc8:	2201      	movs	r2, #1
 8001dca:	401a      	ands	r2, r3
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	409a      	lsls	r2, r3
 8001dd0:	0013      	movs	r3, r2
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	2203      	movs	r2, #3
 8001dea:	409a      	lsls	r2, r3
 8001dec:	0013      	movs	r3, r2
 8001dee:	43da      	mvns	r2, r3
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	4013      	ands	r3, r2
 8001df4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2203      	movs	r2, #3
 8001dfc:	401a      	ands	r2, r3
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	409a      	lsls	r2, r3
 8001e04:	0013      	movs	r3, r2
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	2203      	movs	r2, #3
 8001e1e:	409a      	lsls	r2, r3
 8001e20:	0013      	movs	r3, r2
 8001e22:	43da      	mvns	r2, r3
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	4013      	ands	r3, r2
 8001e28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	689a      	ldr	r2, [r3, #8]
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	409a      	lsls	r2, r3
 8001e34:	0013      	movs	r3, r2
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	2380      	movs	r3, #128	; 0x80
 8001e48:	055b      	lsls	r3, r3, #21
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	d100      	bne.n	8001e50 <HAL_GPIO_Init+0x17c>
 8001e4e:	e0a0      	b.n	8001f92 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e50:	4b57      	ldr	r3, [pc, #348]	; (8001fb0 <HAL_GPIO_Init+0x2dc>)
 8001e52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e54:	4b56      	ldr	r3, [pc, #344]	; (8001fb0 <HAL_GPIO_Init+0x2dc>)
 8001e56:	2101      	movs	r1, #1
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8001e5c:	4a55      	ldr	r2, [pc, #340]	; (8001fb4 <HAL_GPIO_Init+0x2e0>)
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	089b      	lsrs	r3, r3, #2
 8001e62:	3302      	adds	r3, #2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	589b      	ldr	r3, [r3, r2]
 8001e68:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	2203      	movs	r2, #3
 8001e6e:	4013      	ands	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	220f      	movs	r2, #15
 8001e74:	409a      	lsls	r2, r3
 8001e76:	0013      	movs	r3, r2
 8001e78:	43da      	mvns	r2, r3
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	23a0      	movs	r3, #160	; 0xa0
 8001e84:	05db      	lsls	r3, r3, #23
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d01f      	beq.n	8001eca <HAL_GPIO_Init+0x1f6>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a4a      	ldr	r2, [pc, #296]	; (8001fb8 <HAL_GPIO_Init+0x2e4>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d019      	beq.n	8001ec6 <HAL_GPIO_Init+0x1f2>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a49      	ldr	r2, [pc, #292]	; (8001fbc <HAL_GPIO_Init+0x2e8>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d013      	beq.n	8001ec2 <HAL_GPIO_Init+0x1ee>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a48      	ldr	r2, [pc, #288]	; (8001fc0 <HAL_GPIO_Init+0x2ec>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d00d      	beq.n	8001ebe <HAL_GPIO_Init+0x1ea>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a47      	ldr	r2, [pc, #284]	; (8001fc4 <HAL_GPIO_Init+0x2f0>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d007      	beq.n	8001eba <HAL_GPIO_Init+0x1e6>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a46      	ldr	r2, [pc, #280]	; (8001fc8 <HAL_GPIO_Init+0x2f4>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d101      	bne.n	8001eb6 <HAL_GPIO_Init+0x1e2>
 8001eb2:	2305      	movs	r3, #5
 8001eb4:	e00a      	b.n	8001ecc <HAL_GPIO_Init+0x1f8>
 8001eb6:	2306      	movs	r3, #6
 8001eb8:	e008      	b.n	8001ecc <HAL_GPIO_Init+0x1f8>
 8001eba:	2304      	movs	r3, #4
 8001ebc:	e006      	b.n	8001ecc <HAL_GPIO_Init+0x1f8>
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e004      	b.n	8001ecc <HAL_GPIO_Init+0x1f8>
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	e002      	b.n	8001ecc <HAL_GPIO_Init+0x1f8>
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e000      	b.n	8001ecc <HAL_GPIO_Init+0x1f8>
 8001eca:	2300      	movs	r3, #0
 8001ecc:	697a      	ldr	r2, [r7, #20]
 8001ece:	2103      	movs	r1, #3
 8001ed0:	400a      	ands	r2, r1
 8001ed2:	0092      	lsls	r2, r2, #2
 8001ed4:	4093      	lsls	r3, r2
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001edc:	4935      	ldr	r1, [pc, #212]	; (8001fb4 <HAL_GPIO_Init+0x2e0>)
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	089b      	lsrs	r3, r3, #2
 8001ee2:	3302      	adds	r3, #2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eea:	4b38      	ldr	r3, [pc, #224]	; (8001fcc <HAL_GPIO_Init+0x2f8>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	43da      	mvns	r2, r3
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	2380      	movs	r3, #128	; 0x80
 8001f00:	025b      	lsls	r3, r3, #9
 8001f02:	4013      	ands	r3, r2
 8001f04:	d003      	beq.n	8001f0e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f0e:	4b2f      	ldr	r3, [pc, #188]	; (8001fcc <HAL_GPIO_Init+0x2f8>)
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001f14:	4b2d      	ldr	r3, [pc, #180]	; (8001fcc <HAL_GPIO_Init+0x2f8>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	43da      	mvns	r2, r3
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	4013      	ands	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	2380      	movs	r3, #128	; 0x80
 8001f2a:	029b      	lsls	r3, r3, #10
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	d003      	beq.n	8001f38 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f38:	4b24      	ldr	r3, [pc, #144]	; (8001fcc <HAL_GPIO_Init+0x2f8>)
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f3e:	4b23      	ldr	r3, [pc, #140]	; (8001fcc <HAL_GPIO_Init+0x2f8>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	43da      	mvns	r2, r3
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685a      	ldr	r2, [r3, #4]
 8001f52:	2380      	movs	r3, #128	; 0x80
 8001f54:	035b      	lsls	r3, r3, #13
 8001f56:	4013      	ands	r3, r2
 8001f58:	d003      	beq.n	8001f62 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f62:	4b1a      	ldr	r3, [pc, #104]	; (8001fcc <HAL_GPIO_Init+0x2f8>)
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001f68:	4b18      	ldr	r3, [pc, #96]	; (8001fcc <HAL_GPIO_Init+0x2f8>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	43da      	mvns	r2, r3
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	4013      	ands	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	2380      	movs	r3, #128	; 0x80
 8001f7e:	039b      	lsls	r3, r3, #14
 8001f80:	4013      	ands	r3, r2
 8001f82:	d003      	beq.n	8001f8c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f8c:	4b0f      	ldr	r3, [pc, #60]	; (8001fcc <HAL_GPIO_Init+0x2f8>)
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	3301      	adds	r3, #1
 8001f96:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	40da      	lsrs	r2, r3
 8001fa0:	1e13      	subs	r3, r2, #0
 8001fa2:	d000      	beq.n	8001fa6 <HAL_GPIO_Init+0x2d2>
 8001fa4:	e6a2      	b.n	8001cec <HAL_GPIO_Init+0x18>
  }
}
 8001fa6:	46c0      	nop			; (mov r8, r8)
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	b006      	add	sp, #24
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	40010000 	.word	0x40010000
 8001fb8:	50000400 	.word	0x50000400
 8001fbc:	50000800 	.word	0x50000800
 8001fc0:	50000c00 	.word	0x50000c00
 8001fc4:	50001000 	.word	0x50001000
 8001fc8:	50001c00 	.word	0x50001c00
 8001fcc:	40010400 	.word	0x40010400

08001fd0 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	0008      	movs	r0, r1
 8001fda:	0011      	movs	r1, r2
 8001fdc:	1cbb      	adds	r3, r7, #2
 8001fde:	1c02      	adds	r2, r0, #0
 8001fe0:	801a      	strh	r2, [r3, #0]
 8001fe2:	1c7b      	adds	r3, r7, #1
 8001fe4:	1c0a      	adds	r2, r1, #0
 8001fe6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8001fe8:	1c7b      	adds	r3, r7, #1
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d004      	beq.n	8001ffa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ff0:	1cbb      	adds	r3, r7, #2
 8001ff2:	881a      	ldrh	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001ff8:	e003      	b.n	8002002 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001ffa:	1cbb      	adds	r3, r7, #2
 8001ffc:	881a      	ldrh	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002002:	46c0      	nop			; (mov r8, r8)
 8002004:	46bd      	mov	sp, r7
 8002006:	b002      	add	sp, #8
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800200c:	b5b0      	push	{r4, r5, r7, lr}
 800200e:	b08a      	sub	sp, #40	; 0x28
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d102      	bne.n	8002020 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	f000 fb6a 	bl	80026f4 <HAL_RCC_OscConfig+0x6e8>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002020:	4bc7      	ldr	r3, [pc, #796]	; (8002340 <HAL_RCC_OscConfig+0x334>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	220c      	movs	r2, #12
 8002026:	4013      	ands	r3, r2
 8002028:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800202a:	4bc5      	ldr	r3, [pc, #788]	; (8002340 <HAL_RCC_OscConfig+0x334>)
 800202c:	68da      	ldr	r2, [r3, #12]
 800202e:	2380      	movs	r3, #128	; 0x80
 8002030:	025b      	lsls	r3, r3, #9
 8002032:	4013      	ands	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2201      	movs	r2, #1
 800203c:	4013      	ands	r3, r2
 800203e:	d100      	bne.n	8002042 <HAL_RCC_OscConfig+0x36>
 8002040:	e07d      	b.n	800213e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	2b08      	cmp	r3, #8
 8002046:	d007      	beq.n	8002058 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	2b0c      	cmp	r3, #12
 800204c:	d112      	bne.n	8002074 <HAL_RCC_OscConfig+0x68>
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	2380      	movs	r3, #128	; 0x80
 8002052:	025b      	lsls	r3, r3, #9
 8002054:	429a      	cmp	r2, r3
 8002056:	d10d      	bne.n	8002074 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002058:	4bb9      	ldr	r3, [pc, #740]	; (8002340 <HAL_RCC_OscConfig+0x334>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	2380      	movs	r3, #128	; 0x80
 800205e:	029b      	lsls	r3, r3, #10
 8002060:	4013      	ands	r3, r2
 8002062:	d100      	bne.n	8002066 <HAL_RCC_OscConfig+0x5a>
 8002064:	e06a      	b.n	800213c <HAL_RCC_OscConfig+0x130>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d166      	bne.n	800213c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	f000 fb40 	bl	80026f4 <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685a      	ldr	r2, [r3, #4]
 8002078:	2380      	movs	r3, #128	; 0x80
 800207a:	025b      	lsls	r3, r3, #9
 800207c:	429a      	cmp	r2, r3
 800207e:	d107      	bne.n	8002090 <HAL_RCC_OscConfig+0x84>
 8002080:	4baf      	ldr	r3, [pc, #700]	; (8002340 <HAL_RCC_OscConfig+0x334>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	4bae      	ldr	r3, [pc, #696]	; (8002340 <HAL_RCC_OscConfig+0x334>)
 8002086:	2180      	movs	r1, #128	; 0x80
 8002088:	0249      	lsls	r1, r1, #9
 800208a:	430a      	orrs	r2, r1
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	e027      	b.n	80020e0 <HAL_RCC_OscConfig+0xd4>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	23a0      	movs	r3, #160	; 0xa0
 8002096:	02db      	lsls	r3, r3, #11
 8002098:	429a      	cmp	r2, r3
 800209a:	d10e      	bne.n	80020ba <HAL_RCC_OscConfig+0xae>
 800209c:	4ba8      	ldr	r3, [pc, #672]	; (8002340 <HAL_RCC_OscConfig+0x334>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4ba7      	ldr	r3, [pc, #668]	; (8002340 <HAL_RCC_OscConfig+0x334>)
 80020a2:	2180      	movs	r1, #128	; 0x80
 80020a4:	02c9      	lsls	r1, r1, #11
 80020a6:	430a      	orrs	r2, r1
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	4ba5      	ldr	r3, [pc, #660]	; (8002340 <HAL_RCC_OscConfig+0x334>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	4ba4      	ldr	r3, [pc, #656]	; (8002340 <HAL_RCC_OscConfig+0x334>)
 80020b0:	2180      	movs	r1, #128	; 0x80
 80020b2:	0249      	lsls	r1, r1, #9
 80020b4:	430a      	orrs	r2, r1
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	e012      	b.n	80020e0 <HAL_RCC_OscConfig+0xd4>
 80020ba:	4ba1      	ldr	r3, [pc, #644]	; (8002340 <HAL_RCC_OscConfig+0x334>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	4ba0      	ldr	r3, [pc, #640]	; (8002340 <HAL_RCC_OscConfig+0x334>)
 80020c0:	49a0      	ldr	r1, [pc, #640]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 80020c2:	400a      	ands	r2, r1
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	4b9e      	ldr	r3, [pc, #632]	; (8002340 <HAL_RCC_OscConfig+0x334>)
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	2380      	movs	r3, #128	; 0x80
 80020cc:	025b      	lsls	r3, r3, #9
 80020ce:	4013      	ands	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	4b9a      	ldr	r3, [pc, #616]	; (8002340 <HAL_RCC_OscConfig+0x334>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	4b99      	ldr	r3, [pc, #612]	; (8002340 <HAL_RCC_OscConfig+0x334>)
 80020da:	499b      	ldr	r1, [pc, #620]	; (8002348 <HAL_RCC_OscConfig+0x33c>)
 80020dc:	400a      	ands	r2, r1
 80020de:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d014      	beq.n	8002112 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e8:	f7ff fd36 	bl	8001b58 <HAL_GetTick>
 80020ec:	0003      	movs	r3, r0
 80020ee:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020f2:	f7ff fd31 	bl	8001b58 <HAL_GetTick>
 80020f6:	0002      	movs	r2, r0
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b64      	cmp	r3, #100	; 0x64
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e2f7      	b.n	80026f4 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002104:	4b8e      	ldr	r3, [pc, #568]	; (8002340 <HAL_RCC_OscConfig+0x334>)
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	2380      	movs	r3, #128	; 0x80
 800210a:	029b      	lsls	r3, r3, #10
 800210c:	4013      	ands	r3, r2
 800210e:	d0f0      	beq.n	80020f2 <HAL_RCC_OscConfig+0xe6>
 8002110:	e015      	b.n	800213e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002112:	f7ff fd21 	bl	8001b58 <HAL_GetTick>
 8002116:	0003      	movs	r3, r0
 8002118:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800211c:	f7ff fd1c 	bl	8001b58 <HAL_GetTick>
 8002120:	0002      	movs	r2, r0
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b64      	cmp	r3, #100	; 0x64
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e2e2      	b.n	80026f4 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800212e:	4b84      	ldr	r3, [pc, #528]	; (8002340 <HAL_RCC_OscConfig+0x334>)
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	2380      	movs	r3, #128	; 0x80
 8002134:	029b      	lsls	r3, r3, #10
 8002136:	4013      	ands	r3, r2
 8002138:	d1f0      	bne.n	800211c <HAL_RCC_OscConfig+0x110>
 800213a:	e000      	b.n	800213e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800213c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2202      	movs	r2, #2
 8002144:	4013      	ands	r3, r2
 8002146:	d100      	bne.n	800214a <HAL_RCC_OscConfig+0x13e>
 8002148:	e098      	b.n	800227c <HAL_RCC_OscConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002152:	2220      	movs	r2, #32
 8002154:	4013      	ands	r3, r2
 8002156:	d009      	beq.n	800216c <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002158:	4b79      	ldr	r3, [pc, #484]	; (8002340 <HAL_RCC_OscConfig+0x334>)
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	4b78      	ldr	r3, [pc, #480]	; (8002340 <HAL_RCC_OscConfig+0x334>)
 800215e:	2120      	movs	r1, #32
 8002160:	430a      	orrs	r2, r1
 8002162:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002166:	2220      	movs	r2, #32
 8002168:	4393      	bics	r3, r2
 800216a:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	2b04      	cmp	r3, #4
 8002170:	d005      	beq.n	800217e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	2b0c      	cmp	r3, #12
 8002176:	d13d      	bne.n	80021f4 <HAL_RCC_OscConfig+0x1e8>
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d13a      	bne.n	80021f4 <HAL_RCC_OscConfig+0x1e8>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800217e:	4b70      	ldr	r3, [pc, #448]	; (8002340 <HAL_RCC_OscConfig+0x334>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2204      	movs	r2, #4
 8002184:	4013      	ands	r3, r2
 8002186:	d004      	beq.n	8002192 <HAL_RCC_OscConfig+0x186>
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e2b0      	b.n	80026f4 <HAL_RCC_OscConfig+0x6e8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002192:	4b6b      	ldr	r3, [pc, #428]	; (8002340 <HAL_RCC_OscConfig+0x334>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	4a6d      	ldr	r2, [pc, #436]	; (800234c <HAL_RCC_OscConfig+0x340>)
 8002198:	4013      	ands	r3, r2
 800219a:	0019      	movs	r1, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	021a      	lsls	r2, r3, #8
 80021a2:	4b67      	ldr	r3, [pc, #412]	; (8002340 <HAL_RCC_OscConfig+0x334>)
 80021a4:	430a      	orrs	r2, r1
 80021a6:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80021a8:	4b65      	ldr	r3, [pc, #404]	; (8002340 <HAL_RCC_OscConfig+0x334>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2209      	movs	r2, #9
 80021ae:	4393      	bics	r3, r2
 80021b0:	0019      	movs	r1, r3
 80021b2:	4b63      	ldr	r3, [pc, #396]	; (8002340 <HAL_RCC_OscConfig+0x334>)
 80021b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021b6:	430a      	orrs	r2, r1
 80021b8:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021ba:	f000 fbcb 	bl	8002954 <HAL_RCC_GetSysClockFreq>
 80021be:	0001      	movs	r1, r0
 80021c0:	4b5f      	ldr	r3, [pc, #380]	; (8002340 <HAL_RCC_OscConfig+0x334>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	091b      	lsrs	r3, r3, #4
 80021c6:	220f      	movs	r2, #15
 80021c8:	4013      	ands	r3, r2
 80021ca:	4a61      	ldr	r2, [pc, #388]	; (8002350 <HAL_RCC_OscConfig+0x344>)
 80021cc:	5cd3      	ldrb	r3, [r2, r3]
 80021ce:	000a      	movs	r2, r1
 80021d0:	40da      	lsrs	r2, r3
 80021d2:	4b60      	ldr	r3, [pc, #384]	; (8002354 <HAL_RCC_OscConfig+0x348>)
 80021d4:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 80021d6:	2513      	movs	r5, #19
 80021d8:	197c      	adds	r4, r7, r5
 80021da:	2000      	movs	r0, #0
 80021dc:	f7ff fc86 	bl	8001aec <HAL_InitTick>
 80021e0:	0003      	movs	r3, r0
 80021e2:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80021e4:	197b      	adds	r3, r7, r5
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d047      	beq.n	800227c <HAL_RCC_OscConfig+0x270>
      {
        return status;
 80021ec:	2313      	movs	r3, #19
 80021ee:	18fb      	adds	r3, r7, r3
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	e27f      	b.n	80026f4 <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d027      	beq.n	800224a <HAL_RCC_OscConfig+0x23e>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80021fa:	4b51      	ldr	r3, [pc, #324]	; (8002340 <HAL_RCC_OscConfig+0x334>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2209      	movs	r2, #9
 8002200:	4393      	bics	r3, r2
 8002202:	0019      	movs	r1, r3
 8002204:	4b4e      	ldr	r3, [pc, #312]	; (8002340 <HAL_RCC_OscConfig+0x334>)
 8002206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002208:	430a      	orrs	r2, r1
 800220a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220c:	f7ff fca4 	bl	8001b58 <HAL_GetTick>
 8002210:	0003      	movs	r3, r0
 8002212:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002214:	e008      	b.n	8002228 <HAL_RCC_OscConfig+0x21c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002216:	f7ff fc9f 	bl	8001b58 <HAL_GetTick>
 800221a:	0002      	movs	r2, r0
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x21c>
          {
            return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e265      	b.n	80026f4 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002228:	4b45      	ldr	r3, [pc, #276]	; (8002340 <HAL_RCC_OscConfig+0x334>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2204      	movs	r2, #4
 800222e:	4013      	ands	r3, r2
 8002230:	d0f1      	beq.n	8002216 <HAL_RCC_OscConfig+0x20a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002232:	4b43      	ldr	r3, [pc, #268]	; (8002340 <HAL_RCC_OscConfig+0x334>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	4a45      	ldr	r2, [pc, #276]	; (800234c <HAL_RCC_OscConfig+0x340>)
 8002238:	4013      	ands	r3, r2
 800223a:	0019      	movs	r1, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	021a      	lsls	r2, r3, #8
 8002242:	4b3f      	ldr	r3, [pc, #252]	; (8002340 <HAL_RCC_OscConfig+0x334>)
 8002244:	430a      	orrs	r2, r1
 8002246:	605a      	str	r2, [r3, #4]
 8002248:	e018      	b.n	800227c <HAL_RCC_OscConfig+0x270>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800224a:	4b3d      	ldr	r3, [pc, #244]	; (8002340 <HAL_RCC_OscConfig+0x334>)
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	4b3c      	ldr	r3, [pc, #240]	; (8002340 <HAL_RCC_OscConfig+0x334>)
 8002250:	2101      	movs	r1, #1
 8002252:	438a      	bics	r2, r1
 8002254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002256:	f7ff fc7f 	bl	8001b58 <HAL_GetTick>
 800225a:	0003      	movs	r3, r0
 800225c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x266>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002260:	f7ff fc7a 	bl	8001b58 <HAL_GetTick>
 8002264:	0002      	movs	r2, r0
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x266>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e240      	b.n	80026f4 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002272:	4b33      	ldr	r3, [pc, #204]	; (8002340 <HAL_RCC_OscConfig+0x334>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2204      	movs	r2, #4
 8002278:	4013      	ands	r3, r2
 800227a:	d1f1      	bne.n	8002260 <HAL_RCC_OscConfig+0x254>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2210      	movs	r2, #16
 8002282:	4013      	ands	r3, r2
 8002284:	d100      	bne.n	8002288 <HAL_RCC_OscConfig+0x27c>
 8002286:	e09e      	b.n	80023c6 <HAL_RCC_OscConfig+0x3ba>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d13f      	bne.n	800230e <HAL_RCC_OscConfig+0x302>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800228e:	4b2c      	ldr	r3, [pc, #176]	; (8002340 <HAL_RCC_OscConfig+0x334>)
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	2380      	movs	r3, #128	; 0x80
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4013      	ands	r3, r2
 8002298:	d005      	beq.n	80022a6 <HAL_RCC_OscConfig+0x29a>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_RCC_OscConfig+0x29a>
      {
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e226      	b.n	80026f4 <HAL_RCC_OscConfig+0x6e8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022a6:	4b26      	ldr	r3, [pc, #152]	; (8002340 <HAL_RCC_OscConfig+0x334>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	4a2b      	ldr	r2, [pc, #172]	; (8002358 <HAL_RCC_OscConfig+0x34c>)
 80022ac:	4013      	ands	r3, r2
 80022ae:	0019      	movs	r1, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a1a      	ldr	r2, [r3, #32]
 80022b4:	4b22      	ldr	r3, [pc, #136]	; (8002340 <HAL_RCC_OscConfig+0x334>)
 80022b6:	430a      	orrs	r2, r1
 80022b8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022ba:	4b21      	ldr	r3, [pc, #132]	; (8002340 <HAL_RCC_OscConfig+0x334>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	021b      	lsls	r3, r3, #8
 80022c0:	0a19      	lsrs	r1, r3, #8
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69db      	ldr	r3, [r3, #28]
 80022c6:	061a      	lsls	r2, r3, #24
 80022c8:	4b1d      	ldr	r3, [pc, #116]	; (8002340 <HAL_RCC_OscConfig+0x334>)
 80022ca:	430a      	orrs	r2, r1
 80022cc:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	0b5b      	lsrs	r3, r3, #13
 80022d4:	3301      	adds	r3, #1
 80022d6:	2280      	movs	r2, #128	; 0x80
 80022d8:	0212      	lsls	r2, r2, #8
 80022da:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80022dc:	4b18      	ldr	r3, [pc, #96]	; (8002340 <HAL_RCC_OscConfig+0x334>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	091b      	lsrs	r3, r3, #4
 80022e2:	210f      	movs	r1, #15
 80022e4:	400b      	ands	r3, r1
 80022e6:	491a      	ldr	r1, [pc, #104]	; (8002350 <HAL_RCC_OscConfig+0x344>)
 80022e8:	5ccb      	ldrb	r3, [r1, r3]
 80022ea:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80022ec:	4b19      	ldr	r3, [pc, #100]	; (8002354 <HAL_RCC_OscConfig+0x348>)
 80022ee:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80022f0:	2513      	movs	r5, #19
 80022f2:	197c      	adds	r4, r7, r5
 80022f4:	2000      	movs	r0, #0
 80022f6:	f7ff fbf9 	bl	8001aec <HAL_InitTick>
 80022fa:	0003      	movs	r3, r0
 80022fc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80022fe:	197b      	adds	r3, r7, r5
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d05f      	beq.n	80023c6 <HAL_RCC_OscConfig+0x3ba>
        {
          return status;
 8002306:	2313      	movs	r3, #19
 8002308:	18fb      	adds	r3, r7, r3
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	e1f2      	b.n	80026f4 <HAL_RCC_OscConfig+0x6e8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d03d      	beq.n	8002392 <HAL_RCC_OscConfig+0x386>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002316:	4b0a      	ldr	r3, [pc, #40]	; (8002340 <HAL_RCC_OscConfig+0x334>)
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	4b09      	ldr	r3, [pc, #36]	; (8002340 <HAL_RCC_OscConfig+0x334>)
 800231c:	2180      	movs	r1, #128	; 0x80
 800231e:	0049      	lsls	r1, r1, #1
 8002320:	430a      	orrs	r2, r1
 8002322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002324:	f7ff fc18 	bl	8001b58 <HAL_GetTick>
 8002328:	0003      	movs	r3, r0
 800232a:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800232c:	e016      	b.n	800235c <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800232e:	f7ff fc13 	bl	8001b58 <HAL_GetTick>
 8002332:	0002      	movs	r2, r0
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d90f      	bls.n	800235c <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e1d9      	b.n	80026f4 <HAL_RCC_OscConfig+0x6e8>
 8002340:	40021000 	.word	0x40021000
 8002344:	fffeffff 	.word	0xfffeffff
 8002348:	fffbffff 	.word	0xfffbffff
 800234c:	ffffe0ff 	.word	0xffffe0ff
 8002350:	0800368c 	.word	0x0800368c
 8002354:	20000000 	.word	0x20000000
 8002358:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800235c:	4bca      	ldr	r3, [pc, #808]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	2380      	movs	r3, #128	; 0x80
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4013      	ands	r3, r2
 8002366:	d0e2      	beq.n	800232e <HAL_RCC_OscConfig+0x322>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002368:	4bc7      	ldr	r3, [pc, #796]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	4ac7      	ldr	r2, [pc, #796]	; (800268c <HAL_RCC_OscConfig+0x680>)
 800236e:	4013      	ands	r3, r2
 8002370:	0019      	movs	r1, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a1a      	ldr	r2, [r3, #32]
 8002376:	4bc4      	ldr	r3, [pc, #784]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002378:	430a      	orrs	r2, r1
 800237a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800237c:	4bc2      	ldr	r3, [pc, #776]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	021b      	lsls	r3, r3, #8
 8002382:	0a19      	lsrs	r1, r3, #8
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	69db      	ldr	r3, [r3, #28]
 8002388:	061a      	lsls	r2, r3, #24
 800238a:	4bbf      	ldr	r3, [pc, #764]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 800238c:	430a      	orrs	r2, r1
 800238e:	605a      	str	r2, [r3, #4]
 8002390:	e019      	b.n	80023c6 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002392:	4bbd      	ldr	r3, [pc, #756]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	4bbc      	ldr	r3, [pc, #752]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002398:	49bd      	ldr	r1, [pc, #756]	; (8002690 <HAL_RCC_OscConfig+0x684>)
 800239a:	400a      	ands	r2, r1
 800239c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239e:	f7ff fbdb 	bl	8001b58 <HAL_GetTick>
 80023a2:	0003      	movs	r3, r0
 80023a4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023a8:	f7ff fbd6 	bl	8001b58 <HAL_GetTick>
 80023ac:	0002      	movs	r2, r0
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e19c      	b.n	80026f4 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80023ba:	4bb3      	ldr	r3, [pc, #716]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	2380      	movs	r3, #128	; 0x80
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4013      	ands	r3, r2
 80023c4:	d1f0      	bne.n	80023a8 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2208      	movs	r2, #8
 80023cc:	4013      	ands	r3, r2
 80023ce:	d036      	beq.n	800243e <HAL_RCC_OscConfig+0x432>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d019      	beq.n	800240c <HAL_RCC_OscConfig+0x400>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023d8:	4bab      	ldr	r3, [pc, #684]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 80023da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023dc:	4baa      	ldr	r3, [pc, #680]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 80023de:	2101      	movs	r1, #1
 80023e0:	430a      	orrs	r2, r1
 80023e2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e4:	f7ff fbb8 	bl	8001b58 <HAL_GetTick>
 80023e8:	0003      	movs	r3, r0
 80023ea:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80023ec:	e008      	b.n	8002400 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023ee:	f7ff fbb3 	bl	8001b58 <HAL_GetTick>
 80023f2:	0002      	movs	r2, r0
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e179      	b.n	80026f4 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002400:	4ba1      	ldr	r3, [pc, #644]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002402:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002404:	2202      	movs	r2, #2
 8002406:	4013      	ands	r3, r2
 8002408:	d0f1      	beq.n	80023ee <HAL_RCC_OscConfig+0x3e2>
 800240a:	e018      	b.n	800243e <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800240c:	4b9e      	ldr	r3, [pc, #632]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 800240e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002410:	4b9d      	ldr	r3, [pc, #628]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002412:	2101      	movs	r1, #1
 8002414:	438a      	bics	r2, r1
 8002416:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002418:	f7ff fb9e 	bl	8001b58 <HAL_GetTick>
 800241c:	0003      	movs	r3, r0
 800241e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002422:	f7ff fb99 	bl	8001b58 <HAL_GetTick>
 8002426:	0002      	movs	r2, r0
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e15f      	b.n	80026f4 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002434:	4b94      	ldr	r3, [pc, #592]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002438:	2202      	movs	r2, #2
 800243a:	4013      	ands	r3, r2
 800243c:	d1f1      	bne.n	8002422 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2204      	movs	r2, #4
 8002444:	4013      	ands	r3, r2
 8002446:	d100      	bne.n	800244a <HAL_RCC_OscConfig+0x43e>
 8002448:	e0af      	b.n	80025aa <HAL_RCC_OscConfig+0x59e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800244a:	2323      	movs	r3, #35	; 0x23
 800244c:	18fb      	adds	r3, r7, r3
 800244e:	2200      	movs	r2, #0
 8002450:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002452:	4b8d      	ldr	r3, [pc, #564]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002454:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002456:	2380      	movs	r3, #128	; 0x80
 8002458:	055b      	lsls	r3, r3, #21
 800245a:	4013      	ands	r3, r2
 800245c:	d10a      	bne.n	8002474 <HAL_RCC_OscConfig+0x468>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800245e:	4b8a      	ldr	r3, [pc, #552]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002460:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002462:	4b89      	ldr	r3, [pc, #548]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002464:	2180      	movs	r1, #128	; 0x80
 8002466:	0549      	lsls	r1, r1, #21
 8002468:	430a      	orrs	r2, r1
 800246a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800246c:	2323      	movs	r3, #35	; 0x23
 800246e:	18fb      	adds	r3, r7, r3
 8002470:	2201      	movs	r2, #1
 8002472:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002474:	4b87      	ldr	r3, [pc, #540]	; (8002694 <HAL_RCC_OscConfig+0x688>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	2380      	movs	r3, #128	; 0x80
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	4013      	ands	r3, r2
 800247e:	d11a      	bne.n	80024b6 <HAL_RCC_OscConfig+0x4aa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002480:	4b84      	ldr	r3, [pc, #528]	; (8002694 <HAL_RCC_OscConfig+0x688>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	4b83      	ldr	r3, [pc, #524]	; (8002694 <HAL_RCC_OscConfig+0x688>)
 8002486:	2180      	movs	r1, #128	; 0x80
 8002488:	0049      	lsls	r1, r1, #1
 800248a:	430a      	orrs	r2, r1
 800248c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800248e:	f7ff fb63 	bl	8001b58 <HAL_GetTick>
 8002492:	0003      	movs	r3, r0
 8002494:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002498:	f7ff fb5e 	bl	8001b58 <HAL_GetTick>
 800249c:	0002      	movs	r2, r0
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b64      	cmp	r3, #100	; 0x64
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e124      	b.n	80026f4 <HAL_RCC_OscConfig+0x6e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024aa:	4b7a      	ldr	r3, [pc, #488]	; (8002694 <HAL_RCC_OscConfig+0x688>)
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	2380      	movs	r3, #128	; 0x80
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	4013      	ands	r3, r2
 80024b4:	d0f0      	beq.n	8002498 <HAL_RCC_OscConfig+0x48c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689a      	ldr	r2, [r3, #8]
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	429a      	cmp	r2, r3
 80024c0:	d107      	bne.n	80024d2 <HAL_RCC_OscConfig+0x4c6>
 80024c2:	4b71      	ldr	r3, [pc, #452]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 80024c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024c6:	4b70      	ldr	r3, [pc, #448]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 80024c8:	2180      	movs	r1, #128	; 0x80
 80024ca:	0049      	lsls	r1, r1, #1
 80024cc:	430a      	orrs	r2, r1
 80024ce:	651a      	str	r2, [r3, #80]	; 0x50
 80024d0:	e031      	b.n	8002536 <HAL_RCC_OscConfig+0x52a>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d10c      	bne.n	80024f4 <HAL_RCC_OscConfig+0x4e8>
 80024da:	4b6b      	ldr	r3, [pc, #428]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 80024dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024de:	4b6a      	ldr	r3, [pc, #424]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 80024e0:	496b      	ldr	r1, [pc, #428]	; (8002690 <HAL_RCC_OscConfig+0x684>)
 80024e2:	400a      	ands	r2, r1
 80024e4:	651a      	str	r2, [r3, #80]	; 0x50
 80024e6:	4b68      	ldr	r3, [pc, #416]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 80024e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024ea:	4b67      	ldr	r3, [pc, #412]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 80024ec:	496a      	ldr	r1, [pc, #424]	; (8002698 <HAL_RCC_OscConfig+0x68c>)
 80024ee:	400a      	ands	r2, r1
 80024f0:	651a      	str	r2, [r3, #80]	; 0x50
 80024f2:	e020      	b.n	8002536 <HAL_RCC_OscConfig+0x52a>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	23a0      	movs	r3, #160	; 0xa0
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d10e      	bne.n	800251e <HAL_RCC_OscConfig+0x512>
 8002500:	4b61      	ldr	r3, [pc, #388]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002502:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002504:	4b60      	ldr	r3, [pc, #384]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002506:	2180      	movs	r1, #128	; 0x80
 8002508:	00c9      	lsls	r1, r1, #3
 800250a:	430a      	orrs	r2, r1
 800250c:	651a      	str	r2, [r3, #80]	; 0x50
 800250e:	4b5e      	ldr	r3, [pc, #376]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002510:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002512:	4b5d      	ldr	r3, [pc, #372]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002514:	2180      	movs	r1, #128	; 0x80
 8002516:	0049      	lsls	r1, r1, #1
 8002518:	430a      	orrs	r2, r1
 800251a:	651a      	str	r2, [r3, #80]	; 0x50
 800251c:	e00b      	b.n	8002536 <HAL_RCC_OscConfig+0x52a>
 800251e:	4b5a      	ldr	r3, [pc, #360]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002520:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002522:	4b59      	ldr	r3, [pc, #356]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002524:	495a      	ldr	r1, [pc, #360]	; (8002690 <HAL_RCC_OscConfig+0x684>)
 8002526:	400a      	ands	r2, r1
 8002528:	651a      	str	r2, [r3, #80]	; 0x50
 800252a:	4b57      	ldr	r3, [pc, #348]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 800252c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800252e:	4b56      	ldr	r3, [pc, #344]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002530:	4959      	ldr	r1, [pc, #356]	; (8002698 <HAL_RCC_OscConfig+0x68c>)
 8002532:	400a      	ands	r2, r1
 8002534:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d015      	beq.n	800256a <HAL_RCC_OscConfig+0x55e>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800253e:	f7ff fb0b 	bl	8001b58 <HAL_GetTick>
 8002542:	0003      	movs	r3, r0
 8002544:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002546:	e009      	b.n	800255c <HAL_RCC_OscConfig+0x550>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002548:	f7ff fb06 	bl	8001b58 <HAL_GetTick>
 800254c:	0002      	movs	r2, r0
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	4a52      	ldr	r2, [pc, #328]	; (800269c <HAL_RCC_OscConfig+0x690>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x550>
        {
          return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e0cb      	b.n	80026f4 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800255c:	4b4a      	ldr	r3, [pc, #296]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 800255e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002560:	2380      	movs	r3, #128	; 0x80
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4013      	ands	r3, r2
 8002566:	d0ef      	beq.n	8002548 <HAL_RCC_OscConfig+0x53c>
 8002568:	e014      	b.n	8002594 <HAL_RCC_OscConfig+0x588>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800256a:	f7ff faf5 	bl	8001b58 <HAL_GetTick>
 800256e:	0003      	movs	r3, r0
 8002570:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002572:	e009      	b.n	8002588 <HAL_RCC_OscConfig+0x57c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002574:	f7ff faf0 	bl	8001b58 <HAL_GetTick>
 8002578:	0002      	movs	r2, r0
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	4a47      	ldr	r2, [pc, #284]	; (800269c <HAL_RCC_OscConfig+0x690>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x57c>
        {
          return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e0b5      	b.n	80026f4 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002588:	4b3f      	ldr	r3, [pc, #252]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 800258a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800258c:	2380      	movs	r3, #128	; 0x80
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4013      	ands	r3, r2
 8002592:	d1ef      	bne.n	8002574 <HAL_RCC_OscConfig+0x568>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002594:	2323      	movs	r3, #35	; 0x23
 8002596:	18fb      	adds	r3, r7, r3
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d105      	bne.n	80025aa <HAL_RCC_OscConfig+0x59e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800259e:	4b3a      	ldr	r3, [pc, #232]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 80025a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025a2:	4b39      	ldr	r3, [pc, #228]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 80025a4:	493e      	ldr	r1, [pc, #248]	; (80026a0 <HAL_RCC_OscConfig+0x694>)
 80025a6:	400a      	ands	r2, r1
 80025a8:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d100      	bne.n	80025b4 <HAL_RCC_OscConfig+0x5a8>
 80025b2:	e09e      	b.n	80026f2 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	2b0c      	cmp	r3, #12
 80025b8:	d100      	bne.n	80025bc <HAL_RCC_OscConfig+0x5b0>
 80025ba:	e077      	b.n	80026ac <HAL_RCC_OscConfig+0x6a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d145      	bne.n	8002650 <HAL_RCC_OscConfig+0x644>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c4:	4b30      	ldr	r3, [pc, #192]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	4b2f      	ldr	r3, [pc, #188]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 80025ca:	4936      	ldr	r1, [pc, #216]	; (80026a4 <HAL_RCC_OscConfig+0x698>)
 80025cc:	400a      	ands	r2, r1
 80025ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d0:	f7ff fac2 	bl	8001b58 <HAL_GetTick>
 80025d4:	0003      	movs	r3, r0
 80025d6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80025d8:	e008      	b.n	80025ec <HAL_RCC_OscConfig+0x5e0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025da:	f7ff fabd 	bl	8001b58 <HAL_GetTick>
 80025de:	0002      	movs	r2, r0
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e083      	b.n	80026f4 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80025ec:	4b26      	ldr	r3, [pc, #152]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	2380      	movs	r3, #128	; 0x80
 80025f2:	049b      	lsls	r3, r3, #18
 80025f4:	4013      	ands	r3, r2
 80025f6:	d1f0      	bne.n	80025da <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025f8:	4b23      	ldr	r3, [pc, #140]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	4a2a      	ldr	r2, [pc, #168]	; (80026a8 <HAL_RCC_OscConfig+0x69c>)
 80025fe:	4013      	ands	r3, r2
 8002600:	0019      	movs	r1, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002610:	431a      	orrs	r2, r3
 8002612:	4b1d      	ldr	r3, [pc, #116]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002614:	430a      	orrs	r2, r1
 8002616:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002618:	4b1b      	ldr	r3, [pc, #108]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	4b1a      	ldr	r3, [pc, #104]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 800261e:	2180      	movs	r1, #128	; 0x80
 8002620:	0449      	lsls	r1, r1, #17
 8002622:	430a      	orrs	r2, r1
 8002624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002626:	f7ff fa97 	bl	8001b58 <HAL_GetTick>
 800262a:	0003      	movs	r3, r0
 800262c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002630:	f7ff fa92 	bl	8001b58 <HAL_GetTick>
 8002634:	0002      	movs	r2, r0
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e058      	b.n	80026f4 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002642:	4b11      	ldr	r3, [pc, #68]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	2380      	movs	r3, #128	; 0x80
 8002648:	049b      	lsls	r3, r3, #18
 800264a:	4013      	ands	r3, r2
 800264c:	d0f0      	beq.n	8002630 <HAL_RCC_OscConfig+0x624>
 800264e:	e050      	b.n	80026f2 <HAL_RCC_OscConfig+0x6e6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002650:	4b0d      	ldr	r3, [pc, #52]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	4b0c      	ldr	r3, [pc, #48]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002656:	4913      	ldr	r1, [pc, #76]	; (80026a4 <HAL_RCC_OscConfig+0x698>)
 8002658:	400a      	ands	r2, r1
 800265a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265c:	f7ff fa7c 	bl	8001b58 <HAL_GetTick>
 8002660:	0003      	movs	r3, r0
 8002662:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002664:	e008      	b.n	8002678 <HAL_RCC_OscConfig+0x66c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002666:	f7ff fa77 	bl	8001b58 <HAL_GetTick>
 800266a:	0002      	movs	r2, r0
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x66c>
          {
            return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e03d      	b.n	80026f4 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002678:	4b03      	ldr	r3, [pc, #12]	; (8002688 <HAL_RCC_OscConfig+0x67c>)
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	2380      	movs	r3, #128	; 0x80
 800267e:	049b      	lsls	r3, r3, #18
 8002680:	4013      	ands	r3, r2
 8002682:	d1f0      	bne.n	8002666 <HAL_RCC_OscConfig+0x65a>
 8002684:	e035      	b.n	80026f2 <HAL_RCC_OscConfig+0x6e6>
 8002686:	46c0      	nop			; (mov r8, r8)
 8002688:	40021000 	.word	0x40021000
 800268c:	ffff1fff 	.word	0xffff1fff
 8002690:	fffffeff 	.word	0xfffffeff
 8002694:	40007000 	.word	0x40007000
 8002698:	fffffbff 	.word	0xfffffbff
 800269c:	00001388 	.word	0x00001388
 80026a0:	efffffff 	.word	0xefffffff
 80026a4:	feffffff 	.word	0xfeffffff
 80026a8:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d101      	bne.n	80026b8 <HAL_RCC_OscConfig+0x6ac>
      {
        return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e01d      	b.n	80026f4 <HAL_RCC_OscConfig+0x6e8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026b8:	4b10      	ldr	r3, [pc, #64]	; (80026fc <HAL_RCC_OscConfig+0x6f0>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	2380      	movs	r3, #128	; 0x80
 80026c2:	025b      	lsls	r3, r3, #9
 80026c4:	401a      	ands	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d10f      	bne.n	80026ee <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	23f0      	movs	r3, #240	; 0xf0
 80026d2:	039b      	lsls	r3, r3, #14
 80026d4:	401a      	ands	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026da:	429a      	cmp	r2, r3
 80026dc:	d107      	bne.n	80026ee <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	23c0      	movs	r3, #192	; 0xc0
 80026e2:	041b      	lsls	r3, r3, #16
 80026e4:	401a      	ands	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d001      	beq.n	80026f2 <HAL_RCC_OscConfig+0x6e6>
        {
          return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e000      	b.n	80026f4 <HAL_RCC_OscConfig+0x6e8>
        }
      }
    }
  }

  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	0018      	movs	r0, r3
 80026f6:	46bd      	mov	sp, r7
 80026f8:	b00a      	add	sp, #40	; 0x28
 80026fa:	bdb0      	pop	{r4, r5, r7, pc}
 80026fc:	40021000 	.word	0x40021000

08002700 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002700:	b5b0      	push	{r4, r5, r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d101      	bne.n	8002714 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e10d      	b.n	8002930 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002714:	4b88      	ldr	r3, [pc, #544]	; (8002938 <HAL_RCC_ClockConfig+0x238>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2201      	movs	r2, #1
 800271a:	4013      	ands	r3, r2
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	429a      	cmp	r2, r3
 8002720:	d911      	bls.n	8002746 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002722:	4b85      	ldr	r3, [pc, #532]	; (8002938 <HAL_RCC_ClockConfig+0x238>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2201      	movs	r2, #1
 8002728:	4393      	bics	r3, r2
 800272a:	0019      	movs	r1, r3
 800272c:	4b82      	ldr	r3, [pc, #520]	; (8002938 <HAL_RCC_ClockConfig+0x238>)
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	430a      	orrs	r2, r1
 8002732:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002734:	4b80      	ldr	r3, [pc, #512]	; (8002938 <HAL_RCC_ClockConfig+0x238>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2201      	movs	r2, #1
 800273a:	4013      	ands	r3, r2
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	429a      	cmp	r2, r3
 8002740:	d001      	beq.n	8002746 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e0f4      	b.n	8002930 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2202      	movs	r2, #2
 800274c:	4013      	ands	r3, r2
 800274e:	d009      	beq.n	8002764 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002750:	4b7a      	ldr	r3, [pc, #488]	; (800293c <HAL_RCC_ClockConfig+0x23c>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	22f0      	movs	r2, #240	; 0xf0
 8002756:	4393      	bics	r3, r2
 8002758:	0019      	movs	r1, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689a      	ldr	r2, [r3, #8]
 800275e:	4b77      	ldr	r3, [pc, #476]	; (800293c <HAL_RCC_ClockConfig+0x23c>)
 8002760:	430a      	orrs	r2, r1
 8002762:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2201      	movs	r2, #1
 800276a:	4013      	ands	r3, r2
 800276c:	d100      	bne.n	8002770 <HAL_RCC_ClockConfig+0x70>
 800276e:	e089      	b.n	8002884 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	2b02      	cmp	r3, #2
 8002776:	d107      	bne.n	8002788 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002778:	4b70      	ldr	r3, [pc, #448]	; (800293c <HAL_RCC_ClockConfig+0x23c>)
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	2380      	movs	r3, #128	; 0x80
 800277e:	029b      	lsls	r3, r3, #10
 8002780:	4013      	ands	r3, r2
 8002782:	d120      	bne.n	80027c6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e0d3      	b.n	8002930 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	2b03      	cmp	r3, #3
 800278e:	d107      	bne.n	80027a0 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002790:	4b6a      	ldr	r3, [pc, #424]	; (800293c <HAL_RCC_ClockConfig+0x23c>)
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	2380      	movs	r3, #128	; 0x80
 8002796:	049b      	lsls	r3, r3, #18
 8002798:	4013      	ands	r3, r2
 800279a:	d114      	bne.n	80027c6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e0c7      	b.n	8002930 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d106      	bne.n	80027b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027a8:	4b64      	ldr	r3, [pc, #400]	; (800293c <HAL_RCC_ClockConfig+0x23c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2204      	movs	r2, #4
 80027ae:	4013      	ands	r3, r2
 80027b0:	d109      	bne.n	80027c6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e0bc      	b.n	8002930 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80027b6:	4b61      	ldr	r3, [pc, #388]	; (800293c <HAL_RCC_ClockConfig+0x23c>)
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	2380      	movs	r3, #128	; 0x80
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4013      	ands	r3, r2
 80027c0:	d101      	bne.n	80027c6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e0b4      	b.n	8002930 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027c6:	4b5d      	ldr	r3, [pc, #372]	; (800293c <HAL_RCC_ClockConfig+0x23c>)
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	2203      	movs	r2, #3
 80027cc:	4393      	bics	r3, r2
 80027ce:	0019      	movs	r1, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	4b59      	ldr	r3, [pc, #356]	; (800293c <HAL_RCC_ClockConfig+0x23c>)
 80027d6:	430a      	orrs	r2, r1
 80027d8:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027da:	f7ff f9bd 	bl	8001b58 <HAL_GetTick>
 80027de:	0003      	movs	r3, r0
 80027e0:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d111      	bne.n	800280e <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80027ea:	e009      	b.n	8002800 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027ec:	f7ff f9b4 	bl	8001b58 <HAL_GetTick>
 80027f0:	0002      	movs	r2, r0
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	4a52      	ldr	r2, [pc, #328]	; (8002940 <HAL_RCC_ClockConfig+0x240>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e097      	b.n	8002930 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002800:	4b4e      	ldr	r3, [pc, #312]	; (800293c <HAL_RCC_ClockConfig+0x23c>)
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	220c      	movs	r2, #12
 8002806:	4013      	ands	r3, r2
 8002808:	2b08      	cmp	r3, #8
 800280a:	d1ef      	bne.n	80027ec <HAL_RCC_ClockConfig+0xec>
 800280c:	e03a      	b.n	8002884 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b03      	cmp	r3, #3
 8002814:	d111      	bne.n	800283a <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002816:	e009      	b.n	800282c <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002818:	f7ff f99e 	bl	8001b58 <HAL_GetTick>
 800281c:	0002      	movs	r2, r0
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	4a47      	ldr	r2, [pc, #284]	; (8002940 <HAL_RCC_ClockConfig+0x240>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d901      	bls.n	800282c <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e081      	b.n	8002930 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800282c:	4b43      	ldr	r3, [pc, #268]	; (800293c <HAL_RCC_ClockConfig+0x23c>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	220c      	movs	r2, #12
 8002832:	4013      	ands	r3, r2
 8002834:	2b0c      	cmp	r3, #12
 8002836:	d1ef      	bne.n	8002818 <HAL_RCC_ClockConfig+0x118>
 8002838:	e024      	b.n	8002884 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d11b      	bne.n	800287a <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002842:	e009      	b.n	8002858 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002844:	f7ff f988 	bl	8001b58 <HAL_GetTick>
 8002848:	0002      	movs	r2, r0
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	4a3c      	ldr	r2, [pc, #240]	; (8002940 <HAL_RCC_ClockConfig+0x240>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e06b      	b.n	8002930 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002858:	4b38      	ldr	r3, [pc, #224]	; (800293c <HAL_RCC_ClockConfig+0x23c>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	220c      	movs	r2, #12
 800285e:	4013      	ands	r3, r2
 8002860:	2b04      	cmp	r3, #4
 8002862:	d1ef      	bne.n	8002844 <HAL_RCC_ClockConfig+0x144>
 8002864:	e00e      	b.n	8002884 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002866:	f7ff f977 	bl	8001b58 <HAL_GetTick>
 800286a:	0002      	movs	r2, r0
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	4a33      	ldr	r2, [pc, #204]	; (8002940 <HAL_RCC_ClockConfig+0x240>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d901      	bls.n	800287a <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e05a      	b.n	8002930 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800287a:	4b30      	ldr	r3, [pc, #192]	; (800293c <HAL_RCC_ClockConfig+0x23c>)
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	220c      	movs	r2, #12
 8002880:	4013      	ands	r3, r2
 8002882:	d1f0      	bne.n	8002866 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002884:	4b2c      	ldr	r3, [pc, #176]	; (8002938 <HAL_RCC_ClockConfig+0x238>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2201      	movs	r2, #1
 800288a:	4013      	ands	r3, r2
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	429a      	cmp	r2, r3
 8002890:	d211      	bcs.n	80028b6 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002892:	4b29      	ldr	r3, [pc, #164]	; (8002938 <HAL_RCC_ClockConfig+0x238>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2201      	movs	r2, #1
 8002898:	4393      	bics	r3, r2
 800289a:	0019      	movs	r1, r3
 800289c:	4b26      	ldr	r3, [pc, #152]	; (8002938 <HAL_RCC_ClockConfig+0x238>)
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	430a      	orrs	r2, r1
 80028a2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a4:	4b24      	ldr	r3, [pc, #144]	; (8002938 <HAL_RCC_ClockConfig+0x238>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2201      	movs	r2, #1
 80028aa:	4013      	ands	r3, r2
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d001      	beq.n	80028b6 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e03c      	b.n	8002930 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2204      	movs	r2, #4
 80028bc:	4013      	ands	r3, r2
 80028be:	d009      	beq.n	80028d4 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028c0:	4b1e      	ldr	r3, [pc, #120]	; (800293c <HAL_RCC_ClockConfig+0x23c>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	4a1f      	ldr	r2, [pc, #124]	; (8002944 <HAL_RCC_ClockConfig+0x244>)
 80028c6:	4013      	ands	r3, r2
 80028c8:	0019      	movs	r1, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68da      	ldr	r2, [r3, #12]
 80028ce:	4b1b      	ldr	r3, [pc, #108]	; (800293c <HAL_RCC_ClockConfig+0x23c>)
 80028d0:	430a      	orrs	r2, r1
 80028d2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2208      	movs	r2, #8
 80028da:	4013      	ands	r3, r2
 80028dc:	d00a      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028de:	4b17      	ldr	r3, [pc, #92]	; (800293c <HAL_RCC_ClockConfig+0x23c>)
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	4a19      	ldr	r2, [pc, #100]	; (8002948 <HAL_RCC_ClockConfig+0x248>)
 80028e4:	4013      	ands	r3, r2
 80028e6:	0019      	movs	r1, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	00da      	lsls	r2, r3, #3
 80028ee:	4b13      	ldr	r3, [pc, #76]	; (800293c <HAL_RCC_ClockConfig+0x23c>)
 80028f0:	430a      	orrs	r2, r1
 80028f2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028f4:	f000 f82e 	bl	8002954 <HAL_RCC_GetSysClockFreq>
 80028f8:	0001      	movs	r1, r0
 80028fa:	4b10      	ldr	r3, [pc, #64]	; (800293c <HAL_RCC_ClockConfig+0x23c>)
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	091b      	lsrs	r3, r3, #4
 8002900:	220f      	movs	r2, #15
 8002902:	4013      	ands	r3, r2
 8002904:	4a11      	ldr	r2, [pc, #68]	; (800294c <HAL_RCC_ClockConfig+0x24c>)
 8002906:	5cd3      	ldrb	r3, [r2, r3]
 8002908:	000a      	movs	r2, r1
 800290a:	40da      	lsrs	r2, r3
 800290c:	4b10      	ldr	r3, [pc, #64]	; (8002950 <HAL_RCC_ClockConfig+0x250>)
 800290e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8002910:	250b      	movs	r5, #11
 8002912:	197c      	adds	r4, r7, r5
 8002914:	2000      	movs	r0, #0
 8002916:	f7ff f8e9 	bl	8001aec <HAL_InitTick>
 800291a:	0003      	movs	r3, r0
 800291c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800291e:	197b      	adds	r3, r7, r5
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8002926:	230b      	movs	r3, #11
 8002928:	18fb      	adds	r3, r7, r3
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	e000      	b.n	8002930 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	0018      	movs	r0, r3
 8002932:	46bd      	mov	sp, r7
 8002934:	b004      	add	sp, #16
 8002936:	bdb0      	pop	{r4, r5, r7, pc}
 8002938:	40022000 	.word	0x40022000
 800293c:	40021000 	.word	0x40021000
 8002940:	00001388 	.word	0x00001388
 8002944:	fffff8ff 	.word	0xfffff8ff
 8002948:	ffffc7ff 	.word	0xffffc7ff
 800294c:	0800368c 	.word	0x0800368c
 8002950:	20000000 	.word	0x20000000

08002954 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800295a:	4b3b      	ldr	r3, [pc, #236]	; (8002a48 <HAL_RCC_GetSysClockFreq+0xf4>)
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	220c      	movs	r2, #12
 8002964:	4013      	ands	r3, r2
 8002966:	2b08      	cmp	r3, #8
 8002968:	d00e      	beq.n	8002988 <HAL_RCC_GetSysClockFreq+0x34>
 800296a:	2b0c      	cmp	r3, #12
 800296c:	d00f      	beq.n	800298e <HAL_RCC_GetSysClockFreq+0x3a>
 800296e:	2b04      	cmp	r3, #4
 8002970:	d157      	bne.n	8002a22 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002972:	4b35      	ldr	r3, [pc, #212]	; (8002a48 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2210      	movs	r2, #16
 8002978:	4013      	ands	r3, r2
 800297a:	d002      	beq.n	8002982 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800297c:	4b33      	ldr	r3, [pc, #204]	; (8002a4c <HAL_RCC_GetSysClockFreq+0xf8>)
 800297e:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002980:	e05d      	b.n	8002a3e <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8002982:	4b33      	ldr	r3, [pc, #204]	; (8002a50 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002984:	613b      	str	r3, [r7, #16]
      break;
 8002986:	e05a      	b.n	8002a3e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002988:	4b32      	ldr	r3, [pc, #200]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x100>)
 800298a:	613b      	str	r3, [r7, #16]
      break;
 800298c:	e057      	b.n	8002a3e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	0c9b      	lsrs	r3, r3, #18
 8002992:	220f      	movs	r2, #15
 8002994:	4013      	ands	r3, r2
 8002996:	4a30      	ldr	r2, [pc, #192]	; (8002a58 <HAL_RCC_GetSysClockFreq+0x104>)
 8002998:	5cd3      	ldrb	r3, [r2, r3]
 800299a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	0d9b      	lsrs	r3, r3, #22
 80029a0:	2203      	movs	r2, #3
 80029a2:	4013      	ands	r3, r2
 80029a4:	3301      	adds	r3, #1
 80029a6:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029a8:	4b27      	ldr	r3, [pc, #156]	; (8002a48 <HAL_RCC_GetSysClockFreq+0xf4>)
 80029aa:	68da      	ldr	r2, [r3, #12]
 80029ac:	2380      	movs	r3, #128	; 0x80
 80029ae:	025b      	lsls	r3, r3, #9
 80029b0:	4013      	ands	r3, r2
 80029b2:	d00f      	beq.n	80029d4 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80029b4:	68b9      	ldr	r1, [r7, #8]
 80029b6:	000a      	movs	r2, r1
 80029b8:	0152      	lsls	r2, r2, #5
 80029ba:	1a52      	subs	r2, r2, r1
 80029bc:	0193      	lsls	r3, r2, #6
 80029be:	1a9b      	subs	r3, r3, r2
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	185b      	adds	r3, r3, r1
 80029c4:	025b      	lsls	r3, r3, #9
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	0018      	movs	r0, r3
 80029ca:	f7fd fb9d 	bl	8000108 <__udivsi3>
 80029ce:	0003      	movs	r3, r0
 80029d0:	617b      	str	r3, [r7, #20]
 80029d2:	e023      	b.n	8002a1c <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80029d4:	4b1c      	ldr	r3, [pc, #112]	; (8002a48 <HAL_RCC_GetSysClockFreq+0xf4>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2210      	movs	r2, #16
 80029da:	4013      	ands	r3, r2
 80029dc:	d00f      	beq.n	80029fe <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80029de:	68b9      	ldr	r1, [r7, #8]
 80029e0:	000a      	movs	r2, r1
 80029e2:	0152      	lsls	r2, r2, #5
 80029e4:	1a52      	subs	r2, r2, r1
 80029e6:	0193      	lsls	r3, r2, #6
 80029e8:	1a9b      	subs	r3, r3, r2
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	185b      	adds	r3, r3, r1
 80029ee:	021b      	lsls	r3, r3, #8
 80029f0:	6879      	ldr	r1, [r7, #4]
 80029f2:	0018      	movs	r0, r3
 80029f4:	f7fd fb88 	bl	8000108 <__udivsi3>
 80029f8:	0003      	movs	r3, r0
 80029fa:	617b      	str	r3, [r7, #20]
 80029fc:	e00e      	b.n	8002a1c <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 80029fe:	68b9      	ldr	r1, [r7, #8]
 8002a00:	000a      	movs	r2, r1
 8002a02:	0152      	lsls	r2, r2, #5
 8002a04:	1a52      	subs	r2, r2, r1
 8002a06:	0193      	lsls	r3, r2, #6
 8002a08:	1a9b      	subs	r3, r3, r2
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	185b      	adds	r3, r3, r1
 8002a0e:	029b      	lsls	r3, r3, #10
 8002a10:	6879      	ldr	r1, [r7, #4]
 8002a12:	0018      	movs	r0, r3
 8002a14:	f7fd fb78 	bl	8000108 <__udivsi3>
 8002a18:	0003      	movs	r3, r0
 8002a1a:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	613b      	str	r3, [r7, #16]
      break;
 8002a20:	e00d      	b.n	8002a3e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002a22:	4b09      	ldr	r3, [pc, #36]	; (8002a48 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	0b5b      	lsrs	r3, r3, #13
 8002a28:	2207      	movs	r2, #7
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	3301      	adds	r3, #1
 8002a32:	2280      	movs	r2, #128	; 0x80
 8002a34:	0212      	lsls	r2, r2, #8
 8002a36:	409a      	lsls	r2, r3
 8002a38:	0013      	movs	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
      break;
 8002a3c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002a3e:	693b      	ldr	r3, [r7, #16]
}
 8002a40:	0018      	movs	r0, r3
 8002a42:	46bd      	mov	sp, r7
 8002a44:	b006      	add	sp, #24
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	003d0900 	.word	0x003d0900
 8002a50:	00f42400 	.word	0x00f42400
 8002a54:	007a1200 	.word	0x007a1200
 8002a58:	0800369c 	.word	0x0800369c

08002a5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e051      	b.n	8002b12 <HAL_SPI_Init+0xb6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2251      	movs	r2, #81	; 0x51
 8002a78:	5c9b      	ldrb	r3, [r3, r2]
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d107      	bne.n	8002a90 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2250      	movs	r2, #80	; 0x50
 8002a84:	2100      	movs	r1, #0
 8002a86:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	f7fe ff0c 	bl	80018a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2251      	movs	r2, #81	; 0x51
 8002a94:	2102      	movs	r1, #2
 8002a96:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2140      	movs	r1, #64	; 0x40
 8002aa4:	438a      	bics	r2, r1
 8002aa6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685a      	ldr	r2, [r3, #4]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	431a      	orrs	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6999      	ldr	r1, [r3, #24]
 8002ac8:	2380      	movs	r3, #128	; 0x80
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	400b      	ands	r3, r1
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	431a      	orrs	r2, r3
 8002adc:	0011      	movs	r1, r2
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	0c1b      	lsrs	r3, r3, #16
 8002af0:	2204      	movs	r2, #4
 8002af2:	4013      	ands	r3, r2
 8002af4:	0019      	movs	r1, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	430a      	orrs	r2, r1
 8002b00:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2251      	movs	r2, #81	; 0x51
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	0018      	movs	r0, r3
 8002b14:	46bd      	mov	sp, r7
 8002b16:	b002      	add	sp, #8
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b088      	sub	sp, #32
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	60f8      	str	r0, [r7, #12]
 8002b22:	60b9      	str	r1, [r7, #8]
 8002b24:	603b      	str	r3, [r7, #0]
 8002b26:	1dbb      	adds	r3, r7, #6
 8002b28:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b2a:	231f      	movs	r3, #31
 8002b2c:	18fb      	adds	r3, r7, r3
 8002b2e:	2200      	movs	r2, #0
 8002b30:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2250      	movs	r2, #80	; 0x50
 8002b36:	5c9b      	ldrb	r3, [r3, r2]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d101      	bne.n	8002b40 <HAL_SPI_Transmit+0x26>
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	e136      	b.n	8002dae <HAL_SPI_Transmit+0x294>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2250      	movs	r2, #80	; 0x50
 8002b44:	2101      	movs	r1, #1
 8002b46:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b48:	f7ff f806 	bl	8001b58 <HAL_GetTick>
 8002b4c:	0003      	movs	r3, r0
 8002b4e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002b50:	2316      	movs	r3, #22
 8002b52:	18fb      	adds	r3, r7, r3
 8002b54:	1dba      	adds	r2, r7, #6
 8002b56:	8812      	ldrh	r2, [r2, #0]
 8002b58:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2251      	movs	r2, #81	; 0x51
 8002b5e:	5c9b      	ldrb	r3, [r3, r2]
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d004      	beq.n	8002b70 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002b66:	231f      	movs	r3, #31
 8002b68:	18fb      	adds	r3, r7, r3
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	701a      	strb	r2, [r3, #0]
    goto error;
 8002b6e:	e113      	b.n	8002d98 <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <HAL_SPI_Transmit+0x64>
 8002b76:	1dbb      	adds	r3, r7, #6
 8002b78:	881b      	ldrh	r3, [r3, #0]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d104      	bne.n	8002b88 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002b7e:	231f      	movs	r3, #31
 8002b80:	18fb      	adds	r3, r7, r3
 8002b82:	2201      	movs	r2, #1
 8002b84:	701a      	strb	r2, [r3, #0]
    goto error;
 8002b86:	e107      	b.n	8002d98 <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2251      	movs	r2, #81	; 0x51
 8002b8c:	2103      	movs	r1, #3
 8002b8e:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	1dba      	adds	r2, r7, #6
 8002ba0:	8812      	ldrh	r2, [r2, #0]
 8002ba2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	1dba      	adds	r2, r7, #6
 8002ba8:	8812      	ldrh	r2, [r2, #0]
 8002baa:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	2380      	movs	r3, #128	; 0x80
 8002bd0:	021b      	lsls	r3, r3, #8
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d108      	bne.n	8002be8 <HAL_SPI_Transmit+0xce>
  {
    SPI_1LINE_TX(hspi);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2180      	movs	r1, #128	; 0x80
 8002be2:	01c9      	lsls	r1, r1, #7
 8002be4:	430a      	orrs	r2, r1
 8002be6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2240      	movs	r2, #64	; 0x40
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	2b40      	cmp	r3, #64	; 0x40
 8002bf4:	d007      	beq.n	8002c06 <HAL_SPI_Transmit+0xec>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2140      	movs	r1, #64	; 0x40
 8002c02:	430a      	orrs	r2, r1
 8002c04:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	68da      	ldr	r2, [r3, #12]
 8002c0a:	2380      	movs	r3, #128	; 0x80
 8002c0c:	011b      	lsls	r3, r3, #4
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d14e      	bne.n	8002cb0 <HAL_SPI_Transmit+0x196>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d004      	beq.n	8002c24 <HAL_SPI_Transmit+0x10a>
 8002c1a:	2316      	movs	r3, #22
 8002c1c:	18fb      	adds	r3, r7, r3
 8002c1e:	881b      	ldrh	r3, [r3, #0]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d13f      	bne.n	8002ca4 <HAL_SPI_Transmit+0x18a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c28:	881a      	ldrh	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c34:	1c9a      	adds	r2, r3, #2
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	3b01      	subs	r3, #1
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002c48:	e02c      	b.n	8002ca4 <HAL_SPI_Transmit+0x18a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	2202      	movs	r2, #2
 8002c52:	4013      	ands	r3, r2
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d112      	bne.n	8002c7e <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5c:	881a      	ldrh	r2, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c68:	1c9a      	adds	r2, r3, #2
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	3b01      	subs	r3, #1
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	86da      	strh	r2, [r3, #54]	; 0x36
 8002c7c:	e012      	b.n	8002ca4 <HAL_SPI_Transmit+0x18a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c7e:	f7fe ff6b 	bl	8001b58 <HAL_GetTick>
 8002c82:	0002      	movs	r2, r0
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d802      	bhi.n	8002c94 <HAL_SPI_Transmit+0x17a>
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	3301      	adds	r3, #1
 8002c92:	d102      	bne.n	8002c9a <HAL_SPI_Transmit+0x180>
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d104      	bne.n	8002ca4 <HAL_SPI_Transmit+0x18a>
        {
          errorcode = HAL_TIMEOUT;
 8002c9a:	231f      	movs	r3, #31
 8002c9c:	18fb      	adds	r3, r7, r3
 8002c9e:	2203      	movs	r2, #3
 8002ca0:	701a      	strb	r2, [r3, #0]
          goto error;
 8002ca2:	e079      	b.n	8002d98 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1cd      	bne.n	8002c4a <HAL_SPI_Transmit+0x130>
 8002cae:	e04f      	b.n	8002d50 <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d004      	beq.n	8002cc2 <HAL_SPI_Transmit+0x1a8>
 8002cb8:	2316      	movs	r3, #22
 8002cba:	18fb      	adds	r3, r7, r3
 8002cbc:	881b      	ldrh	r3, [r3, #0]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d141      	bne.n	8002d46 <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	330c      	adds	r3, #12
 8002ccc:	7812      	ldrb	r2, [r2, #0]
 8002cce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd4:	1c5a      	adds	r2, r3, #1
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002ce8:	e02d      	b.n	8002d46 <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	2202      	movs	r2, #2
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d113      	bne.n	8002d20 <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	330c      	adds	r3, #12
 8002d02:	7812      	ldrb	r2, [r2, #0]
 8002d04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	1c5a      	adds	r2, r3, #1
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	3b01      	subs	r3, #1
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d1e:	e012      	b.n	8002d46 <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d20:	f7fe ff1a 	bl	8001b58 <HAL_GetTick>
 8002d24:	0002      	movs	r2, r0
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d802      	bhi.n	8002d36 <HAL_SPI_Transmit+0x21c>
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	3301      	adds	r3, #1
 8002d34:	d102      	bne.n	8002d3c <HAL_SPI_Transmit+0x222>
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d104      	bne.n	8002d46 <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 8002d3c:	231f      	movs	r3, #31
 8002d3e:	18fb      	adds	r3, r7, r3
 8002d40:	2203      	movs	r2, #3
 8002d42:	701a      	strb	r2, [r3, #0]
          goto error;
 8002d44:	e028      	b.n	8002d98 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1cc      	bne.n	8002cea <HAL_SPI_Transmit+0x1d0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	6839      	ldr	r1, [r7, #0]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	0018      	movs	r0, r3
 8002d58:	f000 fbe2 	bl	8003520 <SPI_EndRxTxTransaction>
 8002d5c:	1e03      	subs	r3, r0, #0
 8002d5e:	d002      	beq.n	8002d66 <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2220      	movs	r2, #32
 8002d64:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10a      	bne.n	8002d84 <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d6e:	2300      	movs	r3, #0
 8002d70:	613b      	str	r3, [r7, #16]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	613b      	str	r3, [r7, #16]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	613b      	str	r3, [r7, #16]
 8002d82:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d004      	beq.n	8002d96 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8002d8c:	231f      	movs	r3, #31
 8002d8e:	18fb      	adds	r3, r7, r3
 8002d90:	2201      	movs	r2, #1
 8002d92:	701a      	strb	r2, [r3, #0]
 8002d94:	e000      	b.n	8002d98 <HAL_SPI_Transmit+0x27e>
  }

error:
 8002d96:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2251      	movs	r2, #81	; 0x51
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2250      	movs	r2, #80	; 0x50
 8002da4:	2100      	movs	r1, #0
 8002da6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002da8:	231f      	movs	r3, #31
 8002daa:	18fb      	adds	r3, r7, r3
 8002dac:	781b      	ldrb	r3, [r3, #0]
}
 8002dae:	0018      	movs	r0, r3
 8002db0:	46bd      	mov	sp, r7
 8002db2:	b008      	add	sp, #32
 8002db4:	bd80      	pop	{r7, pc}
	...

08002db8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002db8:	b590      	push	{r4, r7, lr}
 8002dba:	b089      	sub	sp, #36	; 0x24
 8002dbc:	af02      	add	r7, sp, #8
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	603b      	str	r3, [r7, #0]
 8002dc4:	1dbb      	adds	r3, r7, #6
 8002dc6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002dc8:	2317      	movs	r3, #23
 8002dca:	18fb      	adds	r3, r7, r3
 8002dcc:	2200      	movs	r2, #0
 8002dce:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	2382      	movs	r3, #130	; 0x82
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d113      	bne.n	8002e04 <HAL_SPI_Receive+0x4c>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10f      	bne.n	8002e04 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2251      	movs	r2, #81	; 0x51
 8002de8:	2104      	movs	r1, #4
 8002dea:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002dec:	1dbb      	adds	r3, r7, #6
 8002dee:	881c      	ldrh	r4, [r3, #0]
 8002df0:	68ba      	ldr	r2, [r7, #8]
 8002df2:	68b9      	ldr	r1, [r7, #8]
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	0023      	movs	r3, r4
 8002dfc:	f000 f8fa 	bl	8002ff4 <HAL_SPI_TransmitReceive>
 8002e00:	0003      	movs	r3, r0
 8002e02:	e0f1      	b.n	8002fe8 <HAL_SPI_Receive+0x230>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2250      	movs	r2, #80	; 0x50
 8002e08:	5c9b      	ldrb	r3, [r3, r2]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d101      	bne.n	8002e12 <HAL_SPI_Receive+0x5a>
 8002e0e:	2302      	movs	r3, #2
 8002e10:	e0ea      	b.n	8002fe8 <HAL_SPI_Receive+0x230>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2250      	movs	r2, #80	; 0x50
 8002e16:	2101      	movs	r1, #1
 8002e18:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e1a:	f7fe fe9d 	bl	8001b58 <HAL_GetTick>
 8002e1e:	0003      	movs	r3, r0
 8002e20:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2251      	movs	r2, #81	; 0x51
 8002e26:	5c9b      	ldrb	r3, [r3, r2]
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d004      	beq.n	8002e38 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8002e2e:	2317      	movs	r3, #23
 8002e30:	18fb      	adds	r3, r7, r3
 8002e32:	2202      	movs	r2, #2
 8002e34:	701a      	strb	r2, [r3, #0]
    goto error;
 8002e36:	e0cc      	b.n	8002fd2 <HAL_SPI_Receive+0x21a>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <HAL_SPI_Receive+0x8e>
 8002e3e:	1dbb      	adds	r3, r7, #6
 8002e40:	881b      	ldrh	r3, [r3, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d104      	bne.n	8002e50 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8002e46:	2317      	movs	r3, #23
 8002e48:	18fb      	adds	r3, r7, r3
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	701a      	strb	r2, [r3, #0]
    goto error;
 8002e4e:	e0c0      	b.n	8002fd2 <HAL_SPI_Receive+0x21a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2251      	movs	r2, #81	; 0x51
 8002e54:	2104      	movs	r1, #4
 8002e56:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	68ba      	ldr	r2, [r7, #8]
 8002e62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	1dba      	adds	r2, r7, #6
 8002e68:	8812      	ldrh	r2, [r2, #0]
 8002e6a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	1dba      	adds	r2, r7, #6
 8002e70:	8812      	ldrh	r2, [r2, #0]
 8002e72:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	689a      	ldr	r2, [r3, #8]
 8002e96:	2380      	movs	r3, #128	; 0x80
 8002e98:	021b      	lsls	r3, r3, #8
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d107      	bne.n	8002eae <HAL_SPI_Receive+0xf6>
  {
    SPI_1LINE_RX(hspi);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4951      	ldr	r1, [pc, #324]	; (8002ff0 <HAL_SPI_Receive+0x238>)
 8002eaa:	400a      	ands	r2, r1
 8002eac:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2240      	movs	r2, #64	; 0x40
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	2b40      	cmp	r3, #64	; 0x40
 8002eba:	d007      	beq.n	8002ecc <HAL_SPI_Receive+0x114>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2140      	movs	r1, #64	; 0x40
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d164      	bne.n	8002f9e <HAL_SPI_Receive+0x1e6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002ed4:	e02f      	b.n	8002f36 <HAL_SPI_Receive+0x17e>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	2201      	movs	r2, #1
 8002ede:	4013      	ands	r3, r2
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d115      	bne.n	8002f10 <HAL_SPI_Receive+0x158>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	330c      	adds	r3, #12
 8002eea:	001a      	movs	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef0:	7812      	ldrb	r2, [r2, #0]
 8002ef2:	b2d2      	uxtb	r2, r2
 8002ef4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efa:	1c5a      	adds	r2, r3, #1
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	3b01      	subs	r3, #1
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f0e:	e012      	b.n	8002f36 <HAL_SPI_Receive+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f10:	f7fe fe22 	bl	8001b58 <HAL_GetTick>
 8002f14:	0002      	movs	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d802      	bhi.n	8002f26 <HAL_SPI_Receive+0x16e>
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	3301      	adds	r3, #1
 8002f24:	d102      	bne.n	8002f2c <HAL_SPI_Receive+0x174>
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d104      	bne.n	8002f36 <HAL_SPI_Receive+0x17e>
        {
          errorcode = HAL_TIMEOUT;
 8002f2c:	2317      	movs	r3, #23
 8002f2e:	18fb      	adds	r3, r7, r3
 8002f30:	2203      	movs	r2, #3
 8002f32:	701a      	strb	r2, [r3, #0]
          goto error;
 8002f34:	e04d      	b.n	8002fd2 <HAL_SPI_Receive+0x21a>
    while (hspi->RxXferCount > 0U)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1ca      	bne.n	8002ed6 <HAL_SPI_Receive+0x11e>
 8002f40:	e032      	b.n	8002fa8 <HAL_SPI_Receive+0x1f0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d113      	bne.n	8002f78 <HAL_SPI_Receive+0x1c0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68da      	ldr	r2, [r3, #12]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5a:	b292      	uxth	r2, r2
 8002f5c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f62:	1c9a      	adds	r2, r3, #2
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f76:	e012      	b.n	8002f9e <HAL_SPI_Receive+0x1e6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f78:	f7fe fdee 	bl	8001b58 <HAL_GetTick>
 8002f7c:	0002      	movs	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d802      	bhi.n	8002f8e <HAL_SPI_Receive+0x1d6>
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	d102      	bne.n	8002f94 <HAL_SPI_Receive+0x1dc>
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d104      	bne.n	8002f9e <HAL_SPI_Receive+0x1e6>
        {
          errorcode = HAL_TIMEOUT;
 8002f94:	2317      	movs	r3, #23
 8002f96:	18fb      	adds	r3, r7, r3
 8002f98:	2203      	movs	r2, #3
 8002f9a:	701a      	strb	r2, [r3, #0]
          goto error;
 8002f9c:	e019      	b.n	8002fd2 <HAL_SPI_Receive+0x21a>
    while (hspi->RxXferCount > 0U)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1cc      	bne.n	8002f42 <HAL_SPI_Receive+0x18a>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	6839      	ldr	r1, [r7, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	0018      	movs	r0, r3
 8002fb0:	f000 fa4c 	bl	800344c <SPI_EndRxTransaction>
 8002fb4:	1e03      	subs	r3, r0, #0
 8002fb6:	d002      	beq.n	8002fbe <HAL_SPI_Receive+0x206>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d004      	beq.n	8002fd0 <HAL_SPI_Receive+0x218>
  {
    errorcode = HAL_ERROR;
 8002fc6:	2317      	movs	r3, #23
 8002fc8:	18fb      	adds	r3, r7, r3
 8002fca:	2201      	movs	r2, #1
 8002fcc:	701a      	strb	r2, [r3, #0]
 8002fce:	e000      	b.n	8002fd2 <HAL_SPI_Receive+0x21a>
  }

error :
 8002fd0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2251      	movs	r2, #81	; 0x51
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2250      	movs	r2, #80	; 0x50
 8002fde:	2100      	movs	r1, #0
 8002fe0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002fe2:	2317      	movs	r3, #23
 8002fe4:	18fb      	adds	r3, r7, r3
 8002fe6:	781b      	ldrb	r3, [r3, #0]
}
 8002fe8:	0018      	movs	r0, r3
 8002fea:	46bd      	mov	sp, r7
 8002fec:	b007      	add	sp, #28
 8002fee:	bd90      	pop	{r4, r7, pc}
 8002ff0:	ffffbfff 	.word	0xffffbfff

08002ff4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b08c      	sub	sp, #48	; 0x30
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
 8003000:	001a      	movs	r2, r3
 8003002:	1cbb      	adds	r3, r7, #2
 8003004:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003006:	2301      	movs	r3, #1
 8003008:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800300a:	232b      	movs	r3, #43	; 0x2b
 800300c:	18fb      	adds	r3, r7, r3
 800300e:	2200      	movs	r2, #0
 8003010:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2250      	movs	r2, #80	; 0x50
 8003016:	5c9b      	ldrb	r3, [r3, r2]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d101      	bne.n	8003020 <HAL_SPI_TransmitReceive+0x2c>
 800301c:	2302      	movs	r3, #2
 800301e:	e1a1      	b.n	8003364 <HAL_SPI_TransmitReceive+0x370>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2250      	movs	r2, #80	; 0x50
 8003024:	2101      	movs	r1, #1
 8003026:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003028:	f7fe fd96 	bl	8001b58 <HAL_GetTick>
 800302c:	0003      	movs	r3, r0
 800302e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003030:	2023      	movs	r0, #35	; 0x23
 8003032:	183b      	adds	r3, r7, r0
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	2151      	movs	r1, #81	; 0x51
 8003038:	5c52      	ldrb	r2, [r2, r1]
 800303a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003042:	231a      	movs	r3, #26
 8003044:	18fb      	adds	r3, r7, r3
 8003046:	1cba      	adds	r2, r7, #2
 8003048:	8812      	ldrh	r2, [r2, #0]
 800304a:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800304c:	183b      	adds	r3, r7, r0
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d012      	beq.n	800307a <HAL_SPI_TransmitReceive+0x86>
 8003054:	69fa      	ldr	r2, [r7, #28]
 8003056:	2382      	movs	r3, #130	; 0x82
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	429a      	cmp	r2, r3
 800305c:	d108      	bne.n	8003070 <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d104      	bne.n	8003070 <HAL_SPI_TransmitReceive+0x7c>
 8003066:	2323      	movs	r3, #35	; 0x23
 8003068:	18fb      	adds	r3, r7, r3
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b04      	cmp	r3, #4
 800306e:	d004      	beq.n	800307a <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 8003070:	232b      	movs	r3, #43	; 0x2b
 8003072:	18fb      	adds	r3, r7, r3
 8003074:	2202      	movs	r2, #2
 8003076:	701a      	strb	r2, [r3, #0]
    goto error;
 8003078:	e169      	b.n	800334e <HAL_SPI_TransmitReceive+0x35a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d006      	beq.n	800308e <HAL_SPI_TransmitReceive+0x9a>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_SPI_TransmitReceive+0x9a>
 8003086:	1cbb      	adds	r3, r7, #2
 8003088:	881b      	ldrh	r3, [r3, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d104      	bne.n	8003098 <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 800308e:	232b      	movs	r3, #43	; 0x2b
 8003090:	18fb      	adds	r3, r7, r3
 8003092:	2201      	movs	r2, #1
 8003094:	701a      	strb	r2, [r3, #0]
    goto error;
 8003096:	e15a      	b.n	800334e <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2251      	movs	r2, #81	; 0x51
 800309c:	5c9b      	ldrb	r3, [r3, r2]
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b04      	cmp	r3, #4
 80030a2:	d003      	beq.n	80030ac <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2251      	movs	r2, #81	; 0x51
 80030a8:	2105      	movs	r1, #5
 80030aa:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2200      	movs	r2, #0
 80030b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	1cba      	adds	r2, r7, #2
 80030bc:	8812      	ldrh	r2, [r2, #0]
 80030be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	1cba      	adds	r2, r7, #2
 80030c4:	8812      	ldrh	r2, [r2, #0]
 80030c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	68ba      	ldr	r2, [r7, #8]
 80030cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	1cba      	adds	r2, r7, #2
 80030d2:	8812      	ldrh	r2, [r2, #0]
 80030d4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	1cba      	adds	r2, r7, #2
 80030da:	8812      	ldrh	r2, [r2, #0]
 80030dc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2240      	movs	r2, #64	; 0x40
 80030f2:	4013      	ands	r3, r2
 80030f4:	2b40      	cmp	r3, #64	; 0x40
 80030f6:	d007      	beq.n	8003108 <HAL_SPI_TransmitReceive+0x114>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2140      	movs	r1, #64	; 0x40
 8003104:	430a      	orrs	r2, r1
 8003106:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	68da      	ldr	r2, [r3, #12]
 800310c:	2380      	movs	r3, #128	; 0x80
 800310e:	011b      	lsls	r3, r3, #4
 8003110:	429a      	cmp	r2, r3
 8003112:	d000      	beq.n	8003116 <HAL_SPI_TransmitReceive+0x122>
 8003114:	e07a      	b.n	800320c <HAL_SPI_TransmitReceive+0x218>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d004      	beq.n	8003128 <HAL_SPI_TransmitReceive+0x134>
 800311e:	231a      	movs	r3, #26
 8003120:	18fb      	adds	r3, r7, r3
 8003122:	881b      	ldrh	r3, [r3, #0]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d166      	bne.n	80031f6 <HAL_SPI_TransmitReceive+0x202>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312c:	881a      	ldrh	r2, [r3, #0]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003138:	1c9a      	adds	r2, r3, #2
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003142:	b29b      	uxth	r3, r3
 8003144:	3b01      	subs	r3, #1
 8003146:	b29a      	uxth	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800314c:	e053      	b.n	80031f6 <HAL_SPI_TransmitReceive+0x202>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2202      	movs	r2, #2
 8003156:	4013      	ands	r3, r2
 8003158:	2b02      	cmp	r3, #2
 800315a:	d11b      	bne.n	8003194 <HAL_SPI_TransmitReceive+0x1a0>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003160:	b29b      	uxth	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d016      	beq.n	8003194 <HAL_SPI_TransmitReceive+0x1a0>
 8003166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003168:	2b01      	cmp	r3, #1
 800316a:	d113      	bne.n	8003194 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003170:	881a      	ldrh	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317c:	1c9a      	adds	r2, r3, #2
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003186:	b29b      	uxth	r3, r3
 8003188:	3b01      	subs	r3, #1
 800318a:	b29a      	uxth	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003190:	2300      	movs	r3, #0
 8003192:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	2201      	movs	r2, #1
 800319c:	4013      	ands	r3, r2
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d119      	bne.n	80031d6 <HAL_SPI_TransmitReceive+0x1e2>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d014      	beq.n	80031d6 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68da      	ldr	r2, [r3, #12]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b6:	b292      	uxth	r2, r2
 80031b8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031be:	1c9a      	adds	r2, r3, #2
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	3b01      	subs	r3, #1
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031d2:	2301      	movs	r3, #1
 80031d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80031d6:	f7fe fcbf 	bl	8001b58 <HAL_GetTick>
 80031da:	0002      	movs	r2, r0
 80031dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d807      	bhi.n	80031f6 <HAL_SPI_TransmitReceive+0x202>
 80031e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e8:	3301      	adds	r3, #1
 80031ea:	d004      	beq.n	80031f6 <HAL_SPI_TransmitReceive+0x202>
      {
        errorcode = HAL_TIMEOUT;
 80031ec:	232b      	movs	r3, #43	; 0x2b
 80031ee:	18fb      	adds	r3, r7, r3
 80031f0:	2203      	movs	r2, #3
 80031f2:	701a      	strb	r2, [r3, #0]
        goto error;
 80031f4:	e0ab      	b.n	800334e <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1a6      	bne.n	800314e <HAL_SPI_TransmitReceive+0x15a>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003204:	b29b      	uxth	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1a1      	bne.n	800314e <HAL_SPI_TransmitReceive+0x15a>
 800320a:	e07f      	b.n	800330c <HAL_SPI_TransmitReceive+0x318>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d005      	beq.n	8003220 <HAL_SPI_TransmitReceive+0x22c>
 8003214:	231a      	movs	r3, #26
 8003216:	18fb      	adds	r3, r7, r3
 8003218:	881b      	ldrh	r3, [r3, #0]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d000      	beq.n	8003220 <HAL_SPI_TransmitReceive+0x22c>
 800321e:	e06b      	b.n	80032f8 <HAL_SPI_TransmitReceive+0x304>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	330c      	adds	r3, #12
 800322a:	7812      	ldrb	r2, [r2, #0]
 800322c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	1c5a      	adds	r2, r3, #1
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800323c:	b29b      	uxth	r3, r3
 800323e:	3b01      	subs	r3, #1
 8003240:	b29a      	uxth	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003246:	e057      	b.n	80032f8 <HAL_SPI_TransmitReceive+0x304>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	2202      	movs	r2, #2
 8003250:	4013      	ands	r3, r2
 8003252:	2b02      	cmp	r3, #2
 8003254:	d11c      	bne.n	8003290 <HAL_SPI_TransmitReceive+0x29c>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800325a:	b29b      	uxth	r3, r3
 800325c:	2b00      	cmp	r3, #0
 800325e:	d017      	beq.n	8003290 <HAL_SPI_TransmitReceive+0x29c>
 8003260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003262:	2b01      	cmp	r3, #1
 8003264:	d114      	bne.n	8003290 <HAL_SPI_TransmitReceive+0x29c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	330c      	adds	r3, #12
 8003270:	7812      	ldrb	r2, [r2, #0]
 8003272:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003278:	1c5a      	adds	r2, r3, #1
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003282:	b29b      	uxth	r3, r3
 8003284:	3b01      	subs	r3, #1
 8003286:	b29a      	uxth	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800328c:	2300      	movs	r3, #0
 800328e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	2201      	movs	r2, #1
 8003298:	4013      	ands	r3, r2
 800329a:	2b01      	cmp	r3, #1
 800329c:	d119      	bne.n	80032d2 <HAL_SPI_TransmitReceive+0x2de>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d014      	beq.n	80032d2 <HAL_SPI_TransmitReceive+0x2de>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68da      	ldr	r2, [r3, #12]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b2:	b2d2      	uxtb	r2, r2
 80032b4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ba:	1c5a      	adds	r2, r3, #1
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	3b01      	subs	r3, #1
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032ce:	2301      	movs	r3, #1
 80032d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80032d2:	f7fe fc41 	bl	8001b58 <HAL_GetTick>
 80032d6:	0002      	movs	r2, r0
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032de:	429a      	cmp	r2, r3
 80032e0:	d802      	bhi.n	80032e8 <HAL_SPI_TransmitReceive+0x2f4>
 80032e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e4:	3301      	adds	r3, #1
 80032e6:	d102      	bne.n	80032ee <HAL_SPI_TransmitReceive+0x2fa>
 80032e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d104      	bne.n	80032f8 <HAL_SPI_TransmitReceive+0x304>
      {
        errorcode = HAL_TIMEOUT;
 80032ee:	232b      	movs	r3, #43	; 0x2b
 80032f0:	18fb      	adds	r3, r7, r3
 80032f2:	2203      	movs	r2, #3
 80032f4:	701a      	strb	r2, [r3, #0]
        goto error;
 80032f6:	e02a      	b.n	800334e <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1a2      	bne.n	8003248 <HAL_SPI_TransmitReceive+0x254>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003306:	b29b      	uxth	r3, r3
 8003308:	2b00      	cmp	r3, #0
 800330a:	d19d      	bne.n	8003248 <HAL_SPI_TransmitReceive+0x254>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800330c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800330e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	0018      	movs	r0, r3
 8003314:	f000 f904 	bl	8003520 <SPI_EndRxTxTransaction>
 8003318:	1e03      	subs	r3, r0, #0
 800331a:	d007      	beq.n	800332c <HAL_SPI_TransmitReceive+0x338>
  {
    errorcode = HAL_ERROR;
 800331c:	232b      	movs	r3, #43	; 0x2b
 800331e:	18fb      	adds	r3, r7, r3
 8003320:	2201      	movs	r2, #1
 8003322:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2220      	movs	r2, #32
 8003328:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800332a:	e010      	b.n	800334e <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d10b      	bne.n	800334c <HAL_SPI_TransmitReceive+0x358>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003334:	2300      	movs	r3, #0
 8003336:	617b      	str	r3, [r7, #20]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	617b      	str	r3, [r7, #20]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	617b      	str	r3, [r7, #20]
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	e000      	b.n	800334e <HAL_SPI_TransmitReceive+0x35a>
  }

error :
 800334c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2251      	movs	r2, #81	; 0x51
 8003352:	2101      	movs	r1, #1
 8003354:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2250      	movs	r2, #80	; 0x50
 800335a:	2100      	movs	r1, #0
 800335c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800335e:	232b      	movs	r3, #43	; 0x2b
 8003360:	18fb      	adds	r3, r7, r3
 8003362:	781b      	ldrb	r3, [r3, #0]
}
 8003364:	0018      	movs	r0, r3
 8003366:	46bd      	mov	sp, r7
 8003368:	b00c      	add	sp, #48	; 0x30
 800336a:	bd80      	pop	{r7, pc}

0800336c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	603b      	str	r3, [r7, #0]
 8003378:	1dfb      	adds	r3, r7, #7
 800337a:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800337c:	e050      	b.n	8003420 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	3301      	adds	r3, #1
 8003382:	d04d      	beq.n	8003420 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003384:	f7fe fbe8 	bl	8001b58 <HAL_GetTick>
 8003388:	0002      	movs	r2, r0
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	429a      	cmp	r2, r3
 8003392:	d902      	bls.n	800339a <SPI_WaitFlagStateUntilTimeout+0x2e>
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d142      	bne.n	8003420 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	21e0      	movs	r1, #224	; 0xe0
 80033a6:	438a      	bics	r2, r1
 80033a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	2382      	movs	r3, #130	; 0x82
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d113      	bne.n	80033de <SPI_WaitFlagStateUntilTimeout+0x72>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	689a      	ldr	r2, [r3, #8]
 80033ba:	2380      	movs	r3, #128	; 0x80
 80033bc:	021b      	lsls	r3, r3, #8
 80033be:	429a      	cmp	r2, r3
 80033c0:	d005      	beq.n	80033ce <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	689a      	ldr	r2, [r3, #8]
 80033c6:	2380      	movs	r3, #128	; 0x80
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d107      	bne.n	80033de <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2140      	movs	r1, #64	; 0x40
 80033da:	438a      	bics	r2, r1
 80033dc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033e2:	2380      	movs	r3, #128	; 0x80
 80033e4:	019b      	lsls	r3, r3, #6
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d110      	bne.n	800340c <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4914      	ldr	r1, [pc, #80]	; (8003448 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 80033f6:	400a      	ands	r2, r1
 80033f8:	601a      	str	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2180      	movs	r1, #128	; 0x80
 8003406:	0189      	lsls	r1, r1, #6
 8003408:	430a      	orrs	r2, r1
 800340a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2251      	movs	r2, #81	; 0x51
 8003410:	2101      	movs	r1, #1
 8003412:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2250      	movs	r2, #80	; 0x50
 8003418:	2100      	movs	r1, #0
 800341a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e00f      	b.n	8003440 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	68ba      	ldr	r2, [r7, #8]
 8003428:	4013      	ands	r3, r2
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	425a      	negs	r2, r3
 8003430:	4153      	adcs	r3, r2
 8003432:	b2db      	uxtb	r3, r3
 8003434:	001a      	movs	r2, r3
 8003436:	1dfb      	adds	r3, r7, #7
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	429a      	cmp	r2, r3
 800343c:	d19f      	bne.n	800337e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	0018      	movs	r0, r3
 8003442:	46bd      	mov	sp, r7
 8003444:	b004      	add	sp, #16
 8003446:	bd80      	pop	{r7, pc}
 8003448:	ffffdfff 	.word	0xffffdfff

0800344c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af02      	add	r7, sp, #8
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	2382      	movs	r3, #130	; 0x82
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	429a      	cmp	r2, r3
 8003462:	d113      	bne.n	800348c <SPI_EndRxTransaction+0x40>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	689a      	ldr	r2, [r3, #8]
 8003468:	2380      	movs	r3, #128	; 0x80
 800346a:	021b      	lsls	r3, r3, #8
 800346c:	429a      	cmp	r2, r3
 800346e:	d005      	beq.n	800347c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	2380      	movs	r3, #128	; 0x80
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	429a      	cmp	r2, r3
 800347a:	d107      	bne.n	800348c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2140      	movs	r1, #64	; 0x40
 8003488:	438a      	bics	r2, r1
 800348a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	2382      	movs	r3, #130	; 0x82
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	429a      	cmp	r2, r3
 8003496:	d12b      	bne.n	80034f0 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	2380      	movs	r3, #128	; 0x80
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d012      	beq.n	80034ca <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034a4:	68ba      	ldr	r2, [r7, #8]
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	0013      	movs	r3, r2
 80034ae:	2200      	movs	r2, #0
 80034b0:	2180      	movs	r1, #128	; 0x80
 80034b2:	f7ff ff5b 	bl	800336c <SPI_WaitFlagStateUntilTimeout>
 80034b6:	1e03      	subs	r3, r0, #0
 80034b8:	d02d      	beq.n	8003516 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034be:	2220      	movs	r2, #32
 80034c0:	431a      	orrs	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e026      	b.n	8003518 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80034ca:	68ba      	ldr	r2, [r7, #8]
 80034cc:	68f8      	ldr	r0, [r7, #12]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	9300      	str	r3, [sp, #0]
 80034d2:	0013      	movs	r3, r2
 80034d4:	2200      	movs	r2, #0
 80034d6:	2101      	movs	r1, #1
 80034d8:	f7ff ff48 	bl	800336c <SPI_WaitFlagStateUntilTimeout>
 80034dc:	1e03      	subs	r3, r0, #0
 80034de:	d01a      	beq.n	8003516 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e4:	2220      	movs	r2, #32
 80034e6:	431a      	orrs	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e013      	b.n	8003518 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	0013      	movs	r3, r2
 80034fa:	2200      	movs	r2, #0
 80034fc:	2101      	movs	r1, #1
 80034fe:	f7ff ff35 	bl	800336c <SPI_WaitFlagStateUntilTimeout>
 8003502:	1e03      	subs	r3, r0, #0
 8003504:	d007      	beq.n	8003516 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350a:	2220      	movs	r2, #32
 800350c:	431a      	orrs	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e000      	b.n	8003518 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	0018      	movs	r0, r3
 800351a:	46bd      	mov	sp, r7
 800351c:	b004      	add	sp, #16
 800351e:	bd80      	pop	{r7, pc}

08003520 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af02      	add	r7, sp, #8
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	2382      	movs	r3, #130	; 0x82
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	429a      	cmp	r2, r3
 8003536:	d112      	bne.n	800355e <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003538:	68ba      	ldr	r2, [r7, #8]
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	0013      	movs	r3, r2
 8003542:	2200      	movs	r2, #0
 8003544:	2180      	movs	r1, #128	; 0x80
 8003546:	f7ff ff11 	bl	800336c <SPI_WaitFlagStateUntilTimeout>
 800354a:	1e03      	subs	r3, r0, #0
 800354c:	d020      	beq.n	8003590 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003552:	2220      	movs	r2, #32
 8003554:	431a      	orrs	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e019      	b.n	8003592 <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2251      	movs	r2, #81	; 0x51
 8003562:	5c9b      	ldrb	r3, [r3, r2]
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b05      	cmp	r3, #5
 8003568:	d112      	bne.n	8003590 <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	0013      	movs	r3, r2
 8003574:	2200      	movs	r2, #0
 8003576:	2101      	movs	r1, #1
 8003578:	f7ff fef8 	bl	800336c <SPI_WaitFlagStateUntilTimeout>
 800357c:	1e03      	subs	r3, r0, #0
 800357e:	d007      	beq.n	8003590 <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003584:	2220      	movs	r2, #32
 8003586:	431a      	orrs	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e000      	b.n	8003592 <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	0018      	movs	r0, r3
 8003594:	46bd      	mov	sp, r7
 8003596:	b004      	add	sp, #16
 8003598:	bd80      	pop	{r7, pc}
	...

0800359c <__libc_init_array>:
 800359c:	b570      	push	{r4, r5, r6, lr}
 800359e:	2600      	movs	r6, #0
 80035a0:	4d0c      	ldr	r5, [pc, #48]	; (80035d4 <__libc_init_array+0x38>)
 80035a2:	4c0d      	ldr	r4, [pc, #52]	; (80035d8 <__libc_init_array+0x3c>)
 80035a4:	1b64      	subs	r4, r4, r5
 80035a6:	10a4      	asrs	r4, r4, #2
 80035a8:	42a6      	cmp	r6, r4
 80035aa:	d109      	bne.n	80035c0 <__libc_init_array+0x24>
 80035ac:	2600      	movs	r6, #0
 80035ae:	f000 f821 	bl	80035f4 <_init>
 80035b2:	4d0a      	ldr	r5, [pc, #40]	; (80035dc <__libc_init_array+0x40>)
 80035b4:	4c0a      	ldr	r4, [pc, #40]	; (80035e0 <__libc_init_array+0x44>)
 80035b6:	1b64      	subs	r4, r4, r5
 80035b8:	10a4      	asrs	r4, r4, #2
 80035ba:	42a6      	cmp	r6, r4
 80035bc:	d105      	bne.n	80035ca <__libc_init_array+0x2e>
 80035be:	bd70      	pop	{r4, r5, r6, pc}
 80035c0:	00b3      	lsls	r3, r6, #2
 80035c2:	58eb      	ldr	r3, [r5, r3]
 80035c4:	4798      	blx	r3
 80035c6:	3601      	adds	r6, #1
 80035c8:	e7ee      	b.n	80035a8 <__libc_init_array+0xc>
 80035ca:	00b3      	lsls	r3, r6, #2
 80035cc:	58eb      	ldr	r3, [r5, r3]
 80035ce:	4798      	blx	r3
 80035d0:	3601      	adds	r6, #1
 80035d2:	e7f2      	b.n	80035ba <__libc_init_array+0x1e>
 80035d4:	080036a8 	.word	0x080036a8
 80035d8:	080036a8 	.word	0x080036a8
 80035dc:	080036a8 	.word	0x080036a8
 80035e0:	080036ac 	.word	0x080036ac

080035e4 <memset>:
 80035e4:	0003      	movs	r3, r0
 80035e6:	1812      	adds	r2, r2, r0
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d100      	bne.n	80035ee <memset+0xa>
 80035ec:	4770      	bx	lr
 80035ee:	7019      	strb	r1, [r3, #0]
 80035f0:	3301      	adds	r3, #1
 80035f2:	e7f9      	b.n	80035e8 <memset+0x4>

080035f4 <_init>:
 80035f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035f6:	46c0      	nop			; (mov r8, r8)
 80035f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035fa:	bc08      	pop	{r3}
 80035fc:	469e      	mov	lr, r3
 80035fe:	4770      	bx	lr

08003600 <_fini>:
 8003600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003602:	46c0      	nop			; (mov r8, r8)
 8003604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003606:	bc08      	pop	{r3}
 8003608:	469e      	mov	lr, r3
 800360a:	4770      	bx	lr
